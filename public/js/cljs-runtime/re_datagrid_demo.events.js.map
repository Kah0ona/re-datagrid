{"version":3,"sources":["re_datagrid_demo/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","re-datagrid-demo.db/default-db","re-datagrid-demo.events/last-id","reagent.core.atom","p__55326","vec__55327","cljs.core.nth","db","r","cljs.core.swap_BANG_","cljs.core/inc","cljs.core.update","cljs.core/conj","cljs.core/deref","cljs.core.assoc","p__55338","vec__55339","p1__55333#","p2__55330#","cljs.core.remove","r'","cljs.core._EQ_","p__55345","vec__55346","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","p__55385","vec__55386","p1__55380#","p2__55379#","cljs.core.map","re-datagrid-demo.events/swap","v","i1","i2","re-datagrid-demo.events/index-of","coll","pk","i","cljs.core/count","p1__55394#","cljs.core.take_while","cljs.core.not_EQ_","cljs.core.get","cljs.core/last","re-datagrid-demo.events/move","direction","record","n","data","p__55429","vec__55430","p__55435","vec__55437","field","p__55453","vec__55454","id","k","blur?"],"sourcesContent":["(ns re-datagrid-demo.events\n  (:require [re-datagrid-demo.db :as db]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [taoensso.timbre :as timbre\n             :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                 logf tracef debugf infof warnf errorf fatalf reportf\n                                 spy get-env log-env)]))\n\n(rf/reg-event-db\n :initialize-db\n (fn  [_ _]\n   db/default-db))\n\n\n(def last-id (r/atom 100))\n\n(rf/reg-event-db\n :create\n (fn [db [_ r]]\n   (swap! last-id inc)\n   (update db :data conj\n           (assoc r :id @last-id))))\n\n(rf/reg-event-db\n :delete\n (fn [db [_ r]]\n   (update db\n           :data\n           #(remove\n             (fn [r'] (= (:id r') (:id %2)))\n             %1)\n           r)))\n\n(rf/reg-event-db\n :start-edit\n (fn [db [_ r]]\n   (debug \"custom start-edit-dispatch effect, record: \" r)\n   db))\n\n(rf/reg-event-db\n :update\n (fn [db [_ r]]\n   (update db\n           :data\n           #(map\n             (fn [r']\n               (if (= (:id r') (:id %2))\n                 %2\n                 r'))\n             %1)\n           r)))\n\n(defn swap [v i1 i2]\n  (assoc v i2 (v i1) i1 (v i2)))\n\n\n(defn index-of [coll v pk]\n  (let [i (count (take-while #(not= (get v pk) (get % pk)) coll))]\n    (when (or (< i (count coll))\n              (= (get v pk) (get (last coll) pk)))\n      i)))\n\n(defn move\n  [db direction record]\n  (let [i (index-of (:data db) record :id)\n        i2 (if (= :up direction)\n             (dec i)\n             (inc i))\n        n (count (:data db))\n        data (if (and (>= i2 0) (< i2 n)\n                      (>= i 0) (< i n))\n               (swap (:data db) i i2)\n               (:data db))]\n    (assoc db :data data)))\n\n(rf/reg-event-db\n :reorder\n (fn [db [_ direction record]]\n   (move db direction record)))\n\n\n\n(rf/reg-event-db\n :sort\n (fn [db [_ field direction]]\n   (debug \"custom sort effect, sorting: \" field \" direction \" direction)\n   db))\n\n\n(rf/reg-event-db\n :header-filter-dispatch\n (fn [db [_ id k v blur?]]\n   (debug \"custom header-filter-dispatch effect, \" id k v blur?)\n   db))\n"]}