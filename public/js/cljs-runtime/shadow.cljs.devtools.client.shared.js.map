{"version":3,"sources":["shadow/cljs/devtools/client/shared.cljs"],"mappings":"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","names":["shadow$cljs$devtools$client$shared$IRemote$remote_open$dyn","x__5373__auto__","m__5374__auto__","shadow.cljs.devtools.client.shared/remote-open","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","shadow$cljs$devtools$client$shared$IRemote$remote_msg$dyn","shadow.cljs.devtools.client.shared/remote-msg","shadow$cljs$devtools$client$shared$IRemote$remote_close$dyn","shadow.cljs.devtools.client.shared/remote-close","shadow$cljs$devtools$client$shared$IRemote$remote_error$dyn","shadow.cljs.devtools.client.shared/remote-error","shadow.cljs.devtools.client.shared/IRemote","this","e","msg","info","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_init$dyn","shadow.cljs.devtools.client.shared/do-repl-init","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_require$dyn","shadow.cljs.devtools.client.shared/do-repl-require","shadow$cljs$devtools$client$shared$IHostSpecific$do_invoke$dyn","shadow.cljs.devtools.client.shared/do-invoke","shadow.cljs.devtools.client.shared/IHostSpecific","action","done","error","require-msg","ns","invoke-msg","success","fail","shadow.cljs.devtools.client.shared/load-sources","runtime","sources","callback","shadow.remote.runtime.shared.call","shadow.cljs.devtools.client.env/worker-client-id","cljs.core.into","cljs.core.map","p__44062","map__44063","cljs.core/--destructure-map","cljs.core.get","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.shared","js/shadow.cljs.devtools.client.shared.runtime-ref","shadow.cljs.devtools.client.shared/runtime-ref","cljs.core.atom","js/shadow.cljs.devtools.client.shared.plugins-ref","shadow.cljs.devtools.client.shared/plugins-ref","p__44065","map__44066","shadow.cljs.devtools.client.shared/start-all-plugins!","state-ref","cljs.core/deref","started-set","cljs.core/set","cljs.core/keys","plugins","plugins-set","pending-set","clojure.set.difference","cljs.core/empty?","cljs.core.reduce","plugin-id","map__44074","depends-on","init-fn","plugin","cljs.core/some","start-arg","cljs.core.assoc","cljs.core/select-keys","started","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.disj","js/Error","shadow.cljs.devtools.client.shared/add-plugin!","stop-fn","cljs.core/Keyword","cljs.core/set?","cljs.core/fn?","temp__5827__auto__","cljs.core.get_in","map__44080","old","cljs.core/update","cljs.core/dissoc","cljs.core/assoc","p__44086","map__44087","shadow.cljs.devtools.client.shared/transit-read","transit-readers","state","data","t","cognitect.transit.reader","cognitect.transit/read","p__44092","map__44093","shadow.cljs.devtools.client.shared/transit-str","transit-writers","obj","w","cognitect.transit.writer","cognitect.transit/write","p__44098","map__44099","shadow.cljs.devtools.client.shared/add-transit-writers!","writers","cljs.core/merge","shadow.cljs.devtools.client.shared/continue!","shadow.cljs.devtools.client.shared/interpret-actions","p__44100","map__44101","shadow.cljs.devtools.client.shared/abort!","ex","cljs.core.dissoc","G__44105","shadow.cljs.devtools.client.shared/handle-invoke","res","G__44106","cljs.core/not","cljs.core.update","cljs.core/conj","js/console.error","shadow.cljs.devtools.client.shared/handle-repl-invoke","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","G__44107","cljs.core/*e","p__44108","p__44109","map__44110","map__44111","shadow.cljs.devtools.client.shared/interpret-action","type","G__44112","map__44113","internal","G__44114","map__44115","cljs.core/into","G__44116","repl","obj-refs","vec__44117","cljs.core.nth","obj-support","a","b","c","shadow.remote.runtime.obj-support/get-ref","invoke-fn","and__5023__auto__","cljs.core.ex_info","p__44124","map__44125","queue","warnings","map__44126","js/Date.now","G__44127","cljs.core/seq","shadow.cljs.devtools.client.env/ignore-warnings","map__44129","G__44130","cljs.core/first","cljs.core/rest","p__44131","map__44132","shadow.cljs.devtools.client.shared/setup-actions","input","actions","cljs.core.mapcat","cljs.core/vec","this__5323__auto__","k__5324__auto__","this__5325__auto__","k44139","else__5326__auto__","G__44153","__extmap","this__5343__auto__","f__5344__auto__","init__5345__auto__","ret__5346__auto__","p__44154","vec__44155","k__5347__auto__","v__5348__auto__","this__5338__auto__","writer__5339__auto__","opts__5340__auto__","pr-pair__5341__auto__","keyval__5342__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__44138","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5321__auto__","__meta","this__5318__auto__","__hash","this__5327__auto__","cljs.core/count","this__5319__auto__","h__5134__auto__","coll__5320__auto__","cljs.core/hash-unordered-coll","this44140","other44141","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5333__auto__","k__5334__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__5330__auto__","G__44171","this__5331__auto__","k__5332__auto__","pred__44172","cljs.core/keyword-identical?","expr__44173","this__5336__auto__","cljs.core/MapEntry","this__5322__auto__","this__5328__auto__","entry__5329__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.cljs.devtools.client.shared/Runtime","this__5369__auto__","cljs.core/List","writer__5370__auto__","cljs.core/-write","G__44148","extmap__5365__auto__","G__44179","cljs.core/record?","shadow.cljs.devtools.client.shared/->Runtime","shadow.cljs.devtools.client.shared/map->Runtime","map__44166","ws-state","ws-connected","ws-send-fn","shadow.remote.runtime.shared/now","js/console.warn","s","e44168","key","spec","shadow.remote.runtime.shared/add-extension","shadow.remote.runtime.shared/del-extension","p__44158","map__44159","ex-oid","ex-client-id","report","G__44161","G__44162","text","shadow.remote.runtime.shared/process","cljs.core/inc","shadow.remote.runtime.shared/trigger!","map__44151","ws-connecting","ws-connect-timeout","shutdown","stale","ws-stop-fn","ws-start-fn","js/clearTimeout","after","map__44152","js/setTimeout","js/shadow.cljs.devtools.client.shared.print-subs","shadow.cljs.devtools.client.shared/print-subs","p__44189","map__44190","shadow.cljs.devtools.client.shared/stop-runtime!","map__44191","interval","js/clearInterval","cljs.core/reduce-kv","_","map__44192","shadow.cljs.devtools.client.shared/init-runtime!","client-info","cljs.core/reset!","p1__44202#","shadow.remote.runtime.obj-support/start","shadow.remote.runtime.obj-support/stop","p__44212","map__44213","shadow.remote.runtime.tap-support/start","shadow.remote.runtime.tap-support/stop","p__44214","map__44215","shadow.remote.runtime.eval-support/start","shadow.remote.runtime.eval-support/stop","cljs.core.keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.remote.runtime.shared/init-state","cljs.core/tagged-literal","G__44216","shadow.remote.runtime.shared/add-defaults","idle-fn","map__44218","ws-last-msg","shadow.remote.runtime.shared/run-on-idle","js/setInterval","js/goog.global.cljs_eval","opts","cljs.core/map?","cljs.core/object?","cljs.core.symbol","shadow.cljs.devtools.client.shared.goog$module$goog$object.get","js/Promise","resolve","reject","shadow.remote.runtime.api/cljs-eval","p__44225","map__44226","result","results","G__44227","cljs.core/last","p__44228","map__44229","from","shadow.remote.runtime.shared/relay-msg","p__44230","map__44231","cljs.core/disj","p__44232","map__44233","event-op","client-id","p__44235","map__44236","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/set-print-fns!","stream","subs","p__44237","map__44238","clients","map__44239","worker","cljs.core.not_EQ_"],"sourcesContent":["(ns shadow.cljs.devtools.client.shared\n  (:require\n    [goog.object :as gobj]\n    [cognitect.transit :as transit]\n    [clojure.set :as set]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    [shadow.remote.runtime.tap-support :as tap-support]\n    [shadow.remote.runtime.eval-support :as eval-support]))\n\n(defprotocol IRemote\n  (remote-open [this e])\n  (remote-msg [this msg])\n  (remote-close [this e info])\n  (remote-error [this e]))\n\n(defprotocol IHostSpecific\n  (do-repl-init [this action done error])\n  (do-repl-require [this require-msg done error])\n  (do-invoke [this ns invoke-msg success fail]))\n\n(defn load-sources [runtime sources callback]\n  (shared/call runtime\n    {:op :cljs-load-sources\n     :to env/worker-client-id\n     :sources (into [] (map :resource-id) sources)}\n    {:cljs-sources\n     (fn [{:keys [sources] :as msg}]\n       (callback sources))}))\n\n(defonce runtime-ref (atom nil))\n(defonce plugins-ref (atom {}))\n\n(defn start-all-plugins! [{:keys [state-ref] :as runtime}]\n  (let [started-set (set (keys (::plugins @state-ref)))\n        plugins @plugins-ref\n        plugins-set (set (keys plugins))\n        pending-set (set/difference plugins-set started-set)]\n\n    ;; FIXME: this is dumb, should properly sort things in dependency order\n    ;; instead of looping over\n    (loop [pending-set pending-set]\n      (cond\n        (empty? pending-set)\n        ::done!\n\n        :else\n        (-> (reduce\n              (fn [pending-set plugin-id]\n                (let [{:keys [depends-on init-fn] :as plugin} (get plugins plugin-id)]\n                  (if (some pending-set depends-on)\n                    pending-set\n                    (let [start-arg (assoc (select-keys (::plugins @state-ref) depends-on) :runtime runtime)\n                          started (init-fn start-arg)]\n                      (swap! state-ref assoc-in [::plugins plugin-id] started)\n                      (disj pending-set plugin-id)))))\n              pending-set\n              pending-set)\n            (recur))))))\n\n;; generic plugin mechanism\n;; runtime already has extensions but requires access to runtime\n;; plugin decouple the lifecycle so they can be created wherever\n(defn add-plugin!\n  [plugin-id depends-on init-fn stop-fn]\n  {:pre [(keyword? plugin-id)\n         (set? depends-on)\n         (fn? init-fn)\n         (fn? stop-fn)]}\n\n  (when-some [runtime @runtime-ref]\n    (when-some [started (get-in runtime [::plugins plugin-id])]\n      (let [{:keys [stop-fn] :as old} (get @plugins-ref plugin-id)]\n        (stop-fn started)\n        (swap! runtime-ref update ::plugins dissoc plugin-id))))\n\n  (swap! plugins-ref assoc plugin-id\n    {:ext-id plugin-id\n     :depends-on depends-on\n     :init-fn init-fn\n     :stop-fn stop-fn})\n\n  ;; in case runtime is already started\n  (when-some [runtime @runtime-ref]\n    (start-all-plugins! runtime)))\n\n(defn transit-read [{::keys [transit-readers] :as state} data]\n  (let [t (transit/reader :json {:handlers transit-readers})]\n    (transit/read t data)))\n\n(defn transit-str [{::keys [transit-writers] :as state} obj]\n  (let [w (transit/writer :json {:handlers transit-writers})]\n    (transit/write w obj)))\n\n(defn add-transit-writers! [{:keys [state-ref] :as runtime} writers]\n  (swap! state-ref update ::transit-writers merge writers)\n  runtime)\n\n(declare interpret-actions)\n\n(defn continue! [state]\n  (interpret-actions state))\n\n(defn abort! [{:keys [callback] :as state} action ex]\n  (-> state\n      (assoc :result :runtime-error\n             :ex ex\n             :ex-action action)\n      (dissoc :runtime :callback)\n      (callback)))\n\n(defn handle-invoke [state runtime action]\n  (do-invoke runtime (:ns state) action\n    (fn invoke-success [res]\n      (-> state\n          (cond->\n            (not (:internal action))\n            (update :results conj res))\n          (continue!)))\n    (fn invoke-fail [ex]\n      ;; doing this here and no longer in handle-repl-invoke to avoid\n      ;; rethrowing the exception. JS doesn't do that very well and messes\n      ;; with the stacktrace, basically killing the original one\n\n      (js/console.error \"REPL Invoke Exception\" ex)\n      (abort! state action ex)\n      )))\n\n(defn handle-repl-invoke [state runtime action]\n  (do-invoke runtime (:ns state) action\n    (fn repl-invoke-success [ret]\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (-> state\n          (cond->\n            (not (:internal action))\n            (update :results conj ret))\n          (continue!)))\n    (fn repl-invoke-fail [ex]\n      ;; doing this here and no longer in handle-repl-invoke to avoid\n      ;; rethrowing the exception. JS doesn't do that very well and messes\n      ;; with the stacktrace, basically killing the original one\n      (set! *e ex)\n\n      (js/console.error \"REPL Invoke Exception\" ex)\n      (abort! state action ex))))\n\n(defn interpret-action\n  [{:keys [runtime] :as state}\n   {:keys [type] :as action}]\n  (case type\n    :repl/init\n    (do-repl-init runtime action\n      (fn []\n        (swap! (:state-ref runtime) assoc :init-complete true)\n        (continue! state))\n      (fn [ex]\n        (abort! state action ex)))\n\n    :repl/set-ns\n    (let [{:keys [ns internal]} action]\n      (-> state\n          (assoc :ns ns)\n          (cond->\n            (not internal)\n            (update :results conj nil))\n          (continue!)))\n\n    :repl/require\n    (let [{:keys [internal]} action]\n      (do-repl-require runtime action\n        (fn [sources]\n          (-> state\n              (update :loaded-sources into sources)\n              (cond->\n                ;; (require '...) has a result\n                ;; (ns foo.bar (:require ...)) does not since ns has the result\n                (not internal)\n                (update :results conj nil))\n              (continue!)))\n        (fn [ex]\n          (abort! state action ex))))\n\n    :repl/invoke\n    (let [repl (get-in state [:input :repl])]\n      (try\n        ;; FIXME: avoiding bindings since to many things in JS go async\n        (when-some [obj-refs (get-in state [:input :obj-refs])]\n          (let [obj-support (:obj-support (::plugins @(:state-ref runtime)))\n                [a b c] obj-refs]\n            (when a\n              (set! *1 (:obj (obj-support/get-ref obj-support a))))\n            (when b\n              (set! *2 (:obj (obj-support/get-ref obj-support b))))\n            (when c\n              (set! *3 (:obj (obj-support/get-ref obj-support c))))))\n\n        (let [invoke-fn\n              (if (and repl (not (:internal action)))\n                handle-repl-invoke\n                handle-invoke)]\n          (invoke-fn state runtime action))))\n\n    (throw (ex-info \"unhandled repl action\" {:state state :action action}))))\n\n(defn interpret-actions [{:keys [queue warnings] :as state}]\n  (cond\n    (empty? queue)\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :time-finish (js/Date.now))\n          (callback)))\n\n    (and (seq warnings) (false? env/ignore-warnings))\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :result :warnings\n                 :warnings warnings\n                 :time-finish (js/Date.now))\n          (callback)))\n\n    :else\n    (let [action (first queue)\n          state (update state :queue rest)]\n      (interpret-action state action))))\n\n(defn setup-actions [runtime input {:keys [actions] :as msg} callback]\n  {:runtime runtime\n   :callback callback\n   :input input\n   :msg msg\n   :time-start (js/Date.now) ;; time used for prepl\n   :queue actions\n   :result :ok\n   :results []\n   :ns (:ns input)\n   :warnings\n   (->> actions\n        (mapcat :warnings)\n        (vec))\n   :loaded-sources []})\n\n(defrecord Runtime [state-ref]\n  api/IRuntime\n  (relay-msg [this msg]\n    (let [{::keys [ws-state ws-connected ws-send-fn] :as state} @state-ref]\n      ;; also count messages sent as activity as relay will not send ping if it received regular messages\n      ;; so if there is consistent activity but no reply from relay we'd otherwise disconnect due to idle-fn\n      (swap! state-ref assoc ::ws-last-msg (shared/now))\n      (if-not ws-connected\n        (js/console.warn \"shadow-cljs - dropped ws message, not connected\" msg state)\n        (let [s (try\n                  (transit-str state msg)\n                  (catch :default e\n                    (throw (ex-info \"failed to encode relay msg\" {:msg msg}))))]\n          ;; (js/console.log \"sending\" msg state)\n          (ws-send-fn ws-state s)))))\n\n  (add-extension [runtime key spec]\n    (shared/add-extension runtime key spec))\n  (del-extension [runtime key]\n    (shared/del-extension runtime key))\n\n  api/IEvalCLJS\n  (-cljs-eval [this input callback]\n    ;; FIXME: define what input is supposed to look like\n    ;; {:code \"(some-cljs)\" :ns foo.bar}\n    (shared/call this\n      {:op :cljs-compile\n       :to env/worker-client-id\n       :input input\n       :include-init (not (:init-complete @state-ref))}\n\n      {:cljs-compile-result\n       (fn [msg]\n         (-> (setup-actions this input msg callback)\n             (interpret-actions)))\n\n       ;; going from cljs specific error\n       :cljs-compile-error\n       (fn [{:keys [ex-oid ex-client-id report]}]\n         (callback\n           ;; to more generic error, that CLJ can also use\n           {:result :compile-error\n            :ex-oid ex-oid\n            :ex-client-id ex-client-id\n            :report report}))\n\n       :client-not-found\n       (fn [msg]\n         (callback\n           {:result :worker-not-found}))}))\n\n  IRemote\n  (remote-open [this e]\n    ;; (js/console.log \"runtime remote-open\" this e)\n    (swap! state-ref assoc\n      ::ws-errors 0\n      ::ws-connecting false\n      ::ws-connected true\n      ::ws-last-msg (shared/now)))\n\n  (remote-msg [this text]\n    (let [msg (transit-read @state-ref text)]\n      ;; (js/console.log \"runtime remote-msg\" this msg)\n      (swap! state-ref assoc ::ws-last-msg (shared/now))\n      (when (= :access-denied (:op msg))\n        (swap! state-ref assoc ::stale true))\n      (shared/process this msg)))\n\n  (remote-close [this e info]\n    ;; (js/console.log \"runtime remote-close\" @state-ref e)\n    (swap! state-ref dissoc ::ws-connected ::ws-connecting)\n\n    ;; after 3 failed attempts just stop\n    (if (>= 3 (::ws-errors @state-ref))\n      (.schedule-connect! this 5000)\n      (js/console.warn \"shadow-cljs: giving up trying to connect to \" info)))\n\n  (remote-error [this e]\n    (swap! state-ref update ::ws-errors inc)\n\n    (shared/trigger! this :on-disconnect)\n\n    (js/console.error \"shadow-cljs - remote-error\" e))\n\n  Object\n  (attempt-connect! [this]\n    (let [{::keys [ws-connecting ws-connect-timeout shutdown stale ws-state ws-stop-fn ws-start-fn]\n           :as state}\n          @state-ref]\n\n      ;; (js/console.log \"attempt-connect!\" state)\n      (when (and (not shutdown)\n                 (not stale)\n                 (not ws-connecting))\n\n        (when ws-connect-timeout\n          (js/clearTimeout ws-connect-timeout))\n\n        (when (some? ws-state)\n          (ws-stop-fn ws-state))\n\n        (let [ws-state (ws-start-fn this)]\n          (swap! state-ref assoc\n            ::ws-connecting true\n            ::ws-connected false\n            ::ws-state ws-state)))))\n\n  (schedule-connect! [this after]\n    ;; (js/console.log \"scheduling next connect\" after @state-ref)\n    (let [{::keys [ws-connect-timeout stale shutdown]} @state-ref]\n      (when ws-connect-timeout\n        (js/clearTimeout ws-connect-timeout))\n\n      (when (and (not stale) (not shutdown))\n        (shared/trigger! this :on-reconnect)\n\n        (swap! state-ref assoc\n          ::ws-connect-timeout\n          (js/setTimeout\n            (fn []\n              ;; (js/console.log \"attempt-connect after schedule timeout\" @state-ref)\n              (swap! state-ref dissoc ::ws-connect-timeout)\n              (.attempt-connect! this))\n            after))))))\n\n(defonce print-subs (atom #{}))\n\n(defn stop-runtime! [{:keys [state-ref] :as runtime}]\n  (let [{::keys [ws-state ws-stop-fn interval plugins]} @state-ref]\n\n    (js/clearInterval interval)\n\n    (when (some? ws-state)\n      (ws-stop-fn ws-state))\n\n    (reduce-kv\n      (fn [_ plugin-id started]\n        ;; FIXME: should stop in reverse started order\n        (let [{:keys [stop-fn]} (get @plugins-ref plugin-id)]\n          (stop-fn started)))\n      nil\n      plugins)\n\n    (swap! state-ref assoc ::shutdown true)))\n\n\n(defn init-runtime! [client-info ws-start-fn ws-send-fn ws-stop-fn]\n  ;; in case of hot-reload or reconnect, clean up previous runtime\n  (when-some [runtime @runtime-ref]\n    (stop-runtime! runtime)\n    (reset! runtime-ref nil))\n\n  (add-plugin! :obj-support #{}\n    #(obj-support/start (:runtime %))\n    obj-support/stop)\n\n  (add-plugin! :tap-support #{:obj-support}\n    (fn [{:keys [runtime obj-support]}]\n      (tap-support/start runtime obj-support))\n    tap-support/stop)\n\n  (add-plugin! :eval-support #{:obj-support}\n    (fn [{:keys [runtime obj-support]}]\n      (eval-support/start runtime obj-support))\n    eval-support/stop)\n\n  (let [state-ref\n        (-> (assoc client-info\n              :type :runtime\n              :lang :cljs\n              :build-id (keyword env/build-id)\n              :worker-id env/worker-client-id\n              :proc-id env/proc-id)\n            (shared/init-state)\n            (assoc ::shutdown false\n                   ::stale false\n                   ::plugins {}\n                   ::ws-errors 0\n                   ::transit-writers {}\n                   ::transit-readers {:default tagged-literal}\n                   ::ws-start-fn ws-start-fn\n                   ::ws-send-fn ws-send-fn\n                   ::ws-stop-fn ws-stop-fn)\n            (atom))\n\n        runtime\n        (doto (->Runtime state-ref)\n          (shared/add-defaults))\n\n        idle-fn\n        (fn []\n          (let [{::keys [shutdown ws-connected ws-last-msg ws-connect-timeout] :as state} @state-ref]\n            (when (and (not ws-connect-timeout) (not shutdown) ws-connected (> (shared/now) (+ ws-last-msg 20000)))\n              ;; should be receiving pings, if not assume dead ws\n              ;; (js/console.log \"attempting reconnect because of idle\" state)\n              ;; wait a little, otherwise might get ERR_INTERNET_DISCONNECTED after waking from sleep\n              (swap! state-ref dissoc ::ws-connected)\n              (.schedule-connect! runtime 2000))\n\n            (shared/run-on-idle state-ref)))]\n\n    (swap! state-ref assoc ::interval (js/setInterval idle-fn 1000))\n\n    (reset! runtime-ref runtime)\n\n    ;; test exporting this into the global so potential consumers\n    ;; don't have to worry about importing a namespace that shouldn't be in release builds\n    ;; can't bind cljs.core/eval since that expects a CLJ form not a string\n    ;; which we could technically also support but I don't want to assume the user\n    ;; knows how to read properly. just accepting a string and optional ns is much easier\n    (set! js/goog.global.cljs_eval\n      (fn [input opts]\n        (let [input\n              (cond\n                ;; preferred when calling from CLJS\n                (map? input)\n                input\n\n                ;; just calling with code\n                (and (string? input) (not opts))\n                {:code input :ns 'cljs.user}\n\n                ;; when calling from JS {ns: \"cljs.user\"}\n                ;; FIXME: other opts?\n                (and (string? input) (object? opts))\n                {:code input :ns (symbol (gobj/get opts \"ns\"))}\n\n                :else\n                (throw (ex-info \"invalid arguments, call cljs_eval(string, opts-obj) or cljs_eval(map)\" {:input input :opts opts})))]\n\n          (js/Promise.\n            (fn [resolve reject]\n              (api/cljs-eval runtime input\n                (fn [{:keys [result results] :as info}]\n                  (if (= :ok result)\n                    ;; FIXME: option to not throw away multiple results?\n                    ;; user may do cljs_eval(\"1 2 3\") and will only get 3 but we have [1 2 3]\n                    (resolve (last results))\n                    (reject info)))))))))\n\n    (api/add-extension runtime\n      ::print-support\n      {:ops\n       {:runtime-print-sub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs conj from)\n          (shared/relay-msg runtime\n            {:op :request-notify\n             :notify-op ::runtime-print-disconnect\n             :query [:eq :client-id from]}))\n        :runtime-print-unsub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs disj from))\n        ::runtime-print-disconnect\n        (fn [{:keys [event-op client-id]}]\n          (when (= :client-disconnect event-op)\n            (swap! print-subs disj client-id)))}\n\n       ;; just in case the disconnect notify comes after trying to send something\n       :on-client-not-found\n       (fn [{:keys [client-id]}]\n         (swap! print-subs disj client-id))})\n\n    ;; in case this was hot reloaded, restore previous state first\n    (env/reset-print-fns!)\n\n    (env/set-print-fns!\n      (fn [stream text]\n        (let [subs @print-subs]\n          ;; (js/console.log \"print\" stream text subs)\n          (when (seq subs)\n            (shared/relay-msg runtime\n              {:op :runtime-print\n               :to subs\n               :stream stream\n               :text text})))))\n\n    (api/add-extension runtime\n      ::shared\n      {:on-welcome\n       (fn []\n         ;; request notifications about worker responsible for us\n         ;; also acts as verification the worker that produced the JS output is still actually running\n         ;; in case of webpack it can be that the build was restarted, but webpack didn't properly update the code\n         ;; so still pointing to an older worker, potentially causing troubles for hot-reload and REPL later on.\n         (shared/call runtime\n           {:op :request-clients\n            :notify true\n            :notify-op ::env/worker-notify\n            :query [:eq :shadow.cljs/worker-for (keyword env/build-id)]}\n           {:clients\n            (fn [{:keys [clients] :as msg}]\n              (if-not (seq clients)\n                (js/console.error (str \"shadow-cljs watch for build :\" env/build-id \" not running!\"))\n                (let [worker (first clients)\n                      {:keys [client-id]} worker]\n\n                  (when (not= client-id env/worker-client-id)\n                    (js/console.warn \"shadow-cljs worker id outdated! This can mean that the JS loaded is outdated! Ensure that the shadow-cljs output is not cached. If other tools process this output make sure they update correctly. The code may continue to run fine, but if unexplained things happen make sure to fix this first.\")\n\n                    ;; just updating to the current one, as triggering a reload will likely do nothing\n                    (set! env/worker-client-id client-id)\n                    ))))})\n         )})\n\n    (start-all-plugins! runtime)\n\n    ;; (js/console.log \"first connect from init-runtime!\")\n    (.attempt-connect! runtime)))\n\n"],"x_google_ignoreList":[0]}