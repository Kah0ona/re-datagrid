{"version":3,"sources":["cljs_time/coerce.cljs"],"mappings":"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","names":["cljs-time$coerce$ICoerce$to_date_time$dyn","x__5350__auto__","m__5351__auto__","cljs-time.coerce/to-date-time","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","cljs-time.coerce/ICoerce","obj","cljs-time.coerce/from-long","millis","G__40052","goog.date.UtcDateTime/fromTimestamp","cljs-time.coerce/from-string","s","cljs.core/first","iter__5480__auto__","s__40054","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__40056","cljs.core/chunk-buffer","i__40055","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40053","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","f","cljs.core/vals","cljs-time.format/formatters","d","e40063","e40068","cljs_time.format.parse","js/Error","_","cljs-time.coerce/from-date","date","G__40073","cljs-time.coerce/to-long","G__40074","cljs-time.coerce/to-epoch","and__5000__auto__","cljs.core/quot","cljs-time.coerce/to-date","G__40084","js/Date","cljs-time.coerce/to-string","G__40086","cljs-time.format/unparse","cljs-time.coerce/to-local-date","cljs.core._EQ_","js/goog.date.Date","cljs.core/type","temp__5821__auto__","dt","cljs-time.coerce/to-local-date-time","G__40091","js/goog.date.DateTime","cljs.core/PROTOCOL_SENTINEL","local-date","cljs-time.core/to-utc-time-zone","local-date-time","js/goog.date.UtcDateTime","date-time","long","string","cljs.core/chunk-first"],"sourcesContent":["(ns cljs-time.coerce\n  \"### Utilites to coerce goog.date DateTime instances to and from\n  various other types.\n\n  For example, to convert a goog.date DateTime to and from a js number:\n\n```clojure\n=> (to-long (date-time 1998 4 25))\n893462400000\n\n=> (from-long 893462400000)\n#<19980425T000000>\n```\"\n  (:refer-clojure :exclude [extend second])\n  (:require\n    [cljs-time.core :refer\n     [date-time to-utc-time-zone from-default-time-zone year month day\n      hour minute second milli]]\n    [cljs-time.format :as time-fmt])\n  (:import [goog.date UtcDateTime]))\n\n(defprotocol ICoerce\n  (to-date-time [obj] \"Convert `obj` to a goog.date.DateTime instance.\"))\n\n(defn from-long\n  \"Returns a DateTime instance in the UTC time zone corresponding to the given\n  number of milliseconds after the Unix epoch.\"\n  [millis]\n  (some-> millis UtcDateTime.fromTimestamp))\n\n(defn from-string\n  \"Returns DateTime instance from string using formatters in cljs-time.format,\n  returning first which parses\"\n  [s]\n  (when s\n    (first\n     (for [f (vals time-fmt/formatters)\n           :let [d (try (time-fmt/parse f s) (catch js/Error _))]\n           :when d] d))))\n\n(defn from-date\n  \"Returns a DateTime instance in the UTC time zone corresponding to the given\n  js Date object.\"\n  [date]\n  (some-> date .getTime from-long))\n\n(defn to-long\n  \"Convert `obj` to the number of milliseconds after the Unix epoch.\"\n  [obj]\n  (some-> obj to-date-time .getTime))\n\n(defn to-epoch\n  \"Convert `obj` to Unix epoch.\"\n  [obj]\n  (let [millis (to-long obj)]\n    (and millis (quot millis 1000))))\n\n(defn to-date\n  \"Convert `obj` to a JavaScript Date instance.\"\n  [obj]\n  (some-> obj to-date-time .getTime js/Date.))\n\n(defn to-string\n  \"Returns a string representation of obj in UTC time-zone\n  using \\\"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\\\" date-time representation.\"\n  [obj]\n  (some->> obj\n           to-date-time\n           (time-fmt/unparse (:date-time time-fmt/formatters))))\n\n(defn to-local-date\n  \"Convert `obj` to a goog.date.Date instance\"\n  [obj]\n  (when obj\n    (if (= goog.date.Date (type obj))\n      obj\n      (if-let [dt (to-date-time obj)]\n        (goog.date.Date. (.getYear dt) (.getMonth dt) (.getDate dt))))))\n\n(defn to-local-date-time\n  \"Convert `obj` to a goog.date.DateTime instance\"\n  [obj]\n  (when obj\n    (if-let [dt (to-date-time obj)]\n      (doto (goog.date.DateTime. (.getYear dt) (.getMonth dt) (.getDate dt))\n        (.setHours (.getHours dt))\n        (.setMinutes (.getMinutes dt))\n        (.setSeconds (.getSeconds dt))\n        (.setMilliseconds (.getMilliseconds dt))))))\n\n(extend-protocol ICoerce\n  nil\n  (to-date-time [_]\n    nil)\n\n  js/Date\n  (to-date-time [date]\n    (from-date date))\n\n  goog.date.Date\n  (to-date-time [local-date]\n    (when local-date\n      (to-utc-time-zone local-date)))\n\n  goog.date.DateTime\n  (to-date-time [local-date-time]\n    (when local-date-time\n      (to-utc-time-zone local-date-time)))\n\n  goog.date.UtcDateTime\n  (to-date-time [date-time]\n    date-time)\n\n  number\n  (to-date-time [long]\n    (from-long long))\n\n  string\n  (to-date-time [string]\n    (from-string string)))\n"],"x_google_ignoreList":[0]}