{
"version":3,
"file":"goog.async.debouncer.js",
"lineCount":70,
"mappings":"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",
"sources":["goog/async/debouncer.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of the goog.async.Debouncer class.\n *\n * @see ../demos/timers.html\n */\n\ngoog.provide('goog.async.Debouncer');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.Timer');\n\n\n\n/**\n * Debouncer will perform a specified action exactly once for any sequence of\n * signals fired repeatedly so long as they are fired less than a specified\n * interval apart (in milliseconds). Whether it receives one signal or multiple,\n * it will always wait until a full interval has elapsed since the last signal\n * before performing the action.\n * @param {function(this: T, ...?)} listener Function to callback when the\n *     action is triggered.\n * @param {number} interval Interval over which to debounce. The listener will\n *     only be called after the full interval has elapsed since the last signal.\n * @param {T=} opt_handler Object in whose scope to call the listener.\n * @constructor\n * @struct\n * @extends {goog.Disposable}\n * @final\n * @template T\n */\ngoog.async.Debouncer = function(listener, interval, opt_handler) {\n  'use strict';\n  goog.async.Debouncer.base(this, 'constructor');\n\n  /**\n   * Function to callback\n   * @const @private {function(this: T, ...?)}\n   */\n  this.listener_ =\n      opt_handler != null ? goog.bind(listener, opt_handler) : listener;\n\n  /**\n   * Interval for the debounce time\n   * @const @private {number}\n   */\n  this.interval_ = interval;\n\n  /**\n   * Cached callback function invoked after the debounce timeout completes\n   * @const @private {!Function}\n   */\n  this.callback_ = goog.bind(this.onTimer_, this);\n\n  /**\n   * Indicates that the action is pending and needs to be fired.\n   * @private {boolean}\n   */\n  this.shouldFire_ = false;\n\n  /**\n   * Indicates the count of nested pauses currently in effect on the debouncer.\n   * When this count is not zero, fired actions will be postponed until the\n   * debouncer is resumed enough times to drop the pause count to zero.\n   * @private {number}\n   */\n  this.pauseCount_ = 0;\n\n  /**\n   * Timer for scheduling the next callback\n   * @private {?number}\n   */\n  this.timer_ = null;\n\n  /**\n   * When set this is a timestamp. On the onfire we want to reschedule the\n   * callback so it ends up at this time.\n   * @private {?number}\n   */\n  this.refireAt_ = null;\n\n  /**\n   * The last arguments passed into `fire`.\n   * @private {!IArrayLike}\n   */\n  this.args_ = [];\n};\ngoog.inherits(goog.async.Debouncer, goog.Disposable);\n\n\n/**\n * Notifies the debouncer that the action has happened. It will debounce the\n * call so that the callback is only called after the last action in a sequence\n * of actions separated by periods less the interval parameter passed to the\n * constructor, passing the arguments from the last call of this function into\n * the debounced function.\n * @param {...?} var_args Arguments to pass on to the debounced function.\n */\ngoog.async.Debouncer.prototype.fire = function(var_args) {\n  'use strict';\n  this.args_ = arguments;\n  // When this method is called, we need to prevent fire() calls from within the\n  // previous interval from calling the callback. The simplest way of doing this\n  // is to call this.stop() which calls clearTimeout, and then reschedule the\n  // timeout. However clearTimeout and setTimeout are expensive, so we just\n  // leave them untouched and when they do happen we potentially reschedule.\n  this.shouldFire_ = false;\n  if (this.timer_) {\n    this.refireAt_ = goog.now() + this.interval_;\n    return;\n  }\n  this.timer_ = goog.Timer.callOnce(this.callback_, this.interval_);\n};\n\n\n/**\n * Cancels any pending action callback. The debouncer can be restarted by\n * calling {@link #fire}.\n */\ngoog.async.Debouncer.prototype.stop = function() {\n  'use strict';\n  this.clearTimer_();\n  this.refireAt_ = null;\n  this.shouldFire_ = false;\n  this.args_ = [];\n};\n\n\n/**\n * Pauses the debouncer. All pending and future action callbacks will be delayed\n * until the debouncer is resumed. Pauses can be nested.\n */\ngoog.async.Debouncer.prototype.pause = function() {\n  'use strict';\n  ++this.pauseCount_;\n};\n\n\n/**\n * Resumes the debouncer. If doing so drops the pausing count to zero, pending\n * action callbacks will be executed as soon as possible, but still no sooner\n * than an interval's delay after the previous call. Future action callbacks\n * will be executed as normal.\n */\ngoog.async.Debouncer.prototype.resume = function() {\n  'use strict';\n  if (!this.pauseCount_) {\n    return;\n  }\n\n  --this.pauseCount_;\n  if (!this.pauseCount_ && this.shouldFire_) {\n    this.doAction_();\n  }\n};\n\n\n/** @override */\ngoog.async.Debouncer.prototype.disposeInternal = function() {\n  'use strict';\n  this.stop();\n  goog.async.Debouncer.base(this, 'disposeInternal');\n};\n\n\n/**\n * Handler for the timer to fire the debouncer.\n * @private\n */\ngoog.async.Debouncer.prototype.onTimer_ = function() {\n  'use strict';\n  this.clearTimer_();\n  // There is a newer call to fire() within the debounce interval.\n  // Reschedule the callback and return.\n  if (this.refireAt_) {\n    this.timer_ =\n        goog.Timer.callOnce(this.callback_, this.refireAt_ - goog.now());\n    this.refireAt_ = null;\n    return;\n  }\n\n  if (!this.pauseCount_) {\n    this.doAction_();\n  } else {\n    this.shouldFire_ = true;\n  }\n};\n\n\n/**\n * Cleans the initialized timer.\n * @private\n */\ngoog.async.Debouncer.prototype.clearTimer_ = function() {\n  'use strict';\n  if (this.timer_) {\n    goog.Timer.clear(this.timer_);\n    this.timer_ = null;\n  }\n};\n\n\n/**\n * Calls the callback.\n * @private\n */\ngoog.async.Debouncer.prototype.doAction_ = function() {\n  'use strict';\n  this.shouldFire_ = false;\n  this.listener_.apply(null, this.args_);\n};\n"],
"names":["goog","provide","require","async","Debouncer","goog.async.Debouncer","listener","interval","opt_handler","base","listener_","bind","interval_","callback_","onTimer_","shouldFire_","pauseCount_","timer_","refireAt_","args_","inherits","Disposable","prototype","fire","goog.async.Debouncer.prototype.fire","var_args","arguments","now","Timer","callOnce","stop","goog.async.Debouncer.prototype.stop","clearTimer_","pause","goog.async.Debouncer.prototype.pause","resume","goog.async.Debouncer.prototype.resume","doAction_","disposeInternal","goog.async.Debouncer.prototype.disposeInternal","goog.async.Debouncer.prototype.onTimer_","goog.async.Debouncer.prototype.clearTimer_","clear","goog.async.Debouncer.prototype.doAction_","apply"]
}
