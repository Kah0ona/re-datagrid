{
"version":3,
"file":"goog.date.date.js",
"lineCount":649,
"mappings":"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",
"sources":["goog/date/date.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Functions and objects for date representation and manipulation.\n * @suppress {checkPrototypalTypes}\n */\n\ngoog.provide('goog.date');\ngoog.provide('goog.date.Date');\ngoog.provide('goog.date.DateLike');\ngoog.provide('goog.date.DateTime');\ngoog.provide('goog.date.Interval');\ngoog.provide('goog.date.month');\ngoog.provide('goog.date.weekDay');\n\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.DateTimeSymbols');\ngoog.require('goog.string');\n\n\n/**\n * Constants for weekdays.\n * @enum {number}\n */\ngoog.date.weekDay = {\n  MON: 0,\n  TUE: 1,\n  WED: 2,\n  THU: 3,\n  FRI: 4,\n  SAT: 5,\n  SUN: 6\n};\n\n\n/**\n * Constants for months.\n * @enum {number}\n */\ngoog.date.month = {\n  JAN: 0,\n  FEB: 1,\n  MAR: 2,\n  APR: 3,\n  MAY: 4,\n  JUN: 5,\n  JUL: 6,\n  AUG: 7,\n  SEP: 8,\n  OCT: 9,\n  NOV: 10,\n  DEC: 11\n};\n\n\n/**\n * Regular expression for splitting date parts from ISO 8601 styled string.\n * Examples: '20060210' or '2005-02-22' or '20050222' or '2005-08'\n * or '2005-W22' or '2005W22' or '2005-W22-4', etc.\n * For explanation and more examples, see:\n * {@link http://en.wikipedia.org/wiki/ISO_8601}\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDateStringRegex_ = new RegExp(\n    '^((?:[-+]\\\\d*)?\\\\d{4})(?:(?:-?(\\\\d{2})(?:-?(\\\\d{2}))?)|' +\n    '(?:-?(\\\\d{3}))|(?:-?W(\\\\d{2})(?:-?([1-7]))?))?$');\n\n\n/**\n * Regular expression for splitting time parts from ISO 8601 styled string.\n * Examples: '18:46:39.994' or '184639.994'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimeStringRegex_ =\n    /^(\\d{2})(?::?(\\d{2})(?::?(\\d{2})(\\.\\d+)?)?)?$/;\n\n\n/**\n * Regular expression for splitting timezone parts from ISO 8601 styled string.\n * Example: The part after the '+' in '18:46:39+07:00'.  Or '09:30Z' (UTC).\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\\d{2})(?::?(\\d{2}))?)$/;\n\n\n/**\n * Regular expression for splitting duration parts from ISO 8601 styled string.\n * Example: '-P1Y2M3DT4H5M6.7S'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDurationRegex_ = new RegExp(\n    '^(-)?P(?:(\\\\d+)Y)?(?:(\\\\d+)M)?(?:(\\\\d+)D)?' +\n    '(T(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+(?:\\\\.\\\\d+)?)S)?)?$');\n\n\n/**\n * Number of milliseconds in a day.\n * @type {number}\n */\ngoog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;\n\n/**\n * Number of milliseconds in an ordinary 400-year Gregorian calendar cycle.\n * It can be derived by running\n * `new Date(800, 0, 0).getTime() - new Date(400, 0, 0).getTime()`.\n * Since this number includes leap seconds, it is not evenly dividable by\n * the number of years (importantly, 146097 = 365.2425 * 400).\n * It should be used only for computing dates in the years 0-99 in UTC.\n * @type {number}\n * @private\n */\ngoog.date.MS_PER_GREGORIAN_CYCLE_ = 146097 * 24 * 60 * 60 * 1000;\n\n/**\n * Returns whether the given year is a leap year.\n *\n * @param {number} year Year part of date.\n * @return {boolean} Whether the given year is a leap year.\n */\ngoog.date.isLeapYear = function(year) {\n  'use strict';\n  // Leap year logic; the 4-100-400 rule\n  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n};\n\n\n/**\n * Returns whether the given year is a long ISO year.\n * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.\n *\n * @param {number} year Full year part of date.\n * @return {boolean} Whether the given year is a long ISO year.\n */\ngoog.date.isLongIsoYear = function(year) {\n  'use strict';\n  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));\n  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);\n  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);\n\n  return n % 28 < 5;\n};\n\n\n/**\n * Returns the number of days for a given month.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date.\n * @return {number} The number of days for the given month.\n */\ngoog.date.getNumberOfDaysInMonth = function(year, month) {\n  'use strict';\n  switch (month) {\n    case goog.date.month.FEB:\n      return goog.date.isLeapYear(year) ? 29 : 28;\n    case goog.date.month.JUN:\n    case goog.date.month.SEP:\n    case goog.date.month.NOV:\n    case goog.date.month.APR:\n      return 30;\n  }\n  return 31;\n};\n\n\n/**\n * Returns true if the 2 dates are in the same day.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are on the same day.\n */\ngoog.date.isSameDay = function(date, opt_now) {\n  'use strict';\n  var now = opt_now || new Date(goog.now());\n  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same month.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar month.\n */\ngoog.date.isSameMonth = function(date, opt_now) {\n  'use strict';\n  var now = opt_now || new Date(goog.now());\n  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same year.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar year.\n */\ngoog.date.isSameYear = function(date, opt_now) {\n  'use strict';\n  var now = opt_now || new Date(goog.now());\n  return date.getFullYear() == now.getFullYear();\n};\n\n\n/**\n * Static function for the day of the same week that determines the week number\n * and year of week.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} the cutoff day of the same week in millis since epoch.\n * @private\n */\ngoog.date.getCutOffSameWeek_ = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  'use strict';\n  var d = new Date(year, month, date);\n\n  // Default to Thursday for cut off as per ISO 8601.\n  var cutoff =\n      (opt_weekDay !== undefined) ? opt_weekDay : goog.date.weekDay.THU;\n\n  // Default to Monday for first day of the week as per ISO 8601.\n  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;\n\n  // The d.getDay() has to be converted first to ISO weekday (Monday=0).\n  var isoday = (d.getDay() + 6) % 7;\n\n  // Position of given day in the picker grid w.r.t. first day of week\n  var daypos = (isoday - firstday + 7) % 7;\n\n  // Position of cut off day in the picker grid w.r.t. first day of week\n  var cutoffpos = (cutoff - firstday + 7) % 7;\n\n  // Unix timestamp of the midnight of the cutoff day in the week of 'd'.\n  // There might be +-1 hour shift in the result due to the daylight saving,\n  // but it doesn't affect the year.\n  return d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;\n};\n\n\n/**\n * Static function for week number calculation. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The week number (1-53).\n */\ngoog.date.getWeekNumber = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  'use strict';\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  // Unix timestamp of January 1 in the year of the week.\n  var jan1 = new Date(new Date(cutoffSameWeek).getFullYear(), 0, 1).valueOf();\n\n  // Number of week. The round() eliminates the effect of daylight saving.\n  return Math.floor(\n             Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) +\n      1;\n};\n\n\n/**\n * Static function for year of the week. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The four digit year of date.\n */\ngoog.date.getYearOfWeek = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  'use strict';\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  return new Date(cutoffSameWeek).getFullYear();\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The earlier of them in time.\n * @template T,S\n */\ngoog.date.min = function(date1, date2) {\n  'use strict';\n  return date1 < date2 ? date1 : date2;\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The later of them in time.\n * @template T,S\n */\ngoog.date.max = function(date1, date2) {\n  'use strict';\n  return date1 > date2 ? date1 : date2;\n};\n\n\n/**\n * Parses a datetime string expressed in ISO 8601 format. Overwrites the date\n * and optionally the time part of the given object with the parsed values.\n *\n * @param {!goog.date.DateTime} dateTime Object whose fields will be set.\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n */\ngoog.date.setIso8601DateTime = function(dateTime, formatted) {\n  'use strict';\n  formatted = goog.string.trim(formatted);\n  var delim = formatted.indexOf('T') == -1 ? ' ' : 'T';\n  var parts = formatted.split(delim);\n  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) &&\n      (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 format string.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {string} formatted A date expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601DateOnly_ = function(d, formatted) {\n  'use strict';\n  // split the formatted ISO date string into its date fields\n  var parts = formatted.match(goog.date.splitDateStringRegex_);\n  if (!parts) {\n    return false;\n  }\n\n  var year = Number(parts[1]);\n  var month = Number(parts[2]);\n  var date = Number(parts[3]);\n  var dayOfYear = Number(parts[4]);\n  var week = Number(parts[5]);\n  // ISO weekdays start with 1, native getDay() values start with 0\n  var dayOfWeek = Number(parts[6]) || 1;\n\n  d.setFullYear(year);\n\n  if (dayOfYear) {\n    d.setDate(1);\n    d.setMonth(0);\n    var offset = dayOfYear - 1;  // offset, so 1-indexed, i.e., skip day 1\n    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));\n  } else if (week) {\n    goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);\n  } else {\n    if (month) {\n      d.setDate(1);\n      d.setMonth(month - 1);\n    }\n    if (date) {\n      d.setDate(date);\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 week string.\n * See {@link http://en.wikipedia.org/wiki/ISO_week_date}, \"Relation with the\n * Gregorian Calendar\".  The first week of a new ISO year is the week with the\n * majority of its days in the new Gregorian year.  I.e., ISO Week 1's Thursday\n * is in that year.  ISO weeks always start on Monday. So ISO Week 1 can\n * contain a few days from the previous Gregorian year.  And ISO weeks always\n * end on Sunday, so the last ISO week (Week 52 or 53) can have a few days from\n * the following Gregorian year.\n * Example: '1997-W01' lasts from 1996-12-30 to 1997-01-05.  January 1, 1997 is\n * a Wednesday. So W01's Monday is Dec.30, 1996, and Sunday is January 5, 1997.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {number} week ISO week number.\n * @param {number} dayOfWeek ISO day of week.\n * @private\n */\ngoog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {\n  'use strict';\n  // calculate offset for first week\n  d.setMonth(0);\n  d.setDate(1);\n  var jsDay = d.getDay();\n  // switch Sunday (0) to index 7; ISO days are 1-indexed\n  var jan1WeekDay = jsDay || 7;\n\n  var THURSDAY = 4;\n  if (jan1WeekDay <= THURSDAY) {\n    // was extended back to Monday\n    var startDelta = 1 - jan1WeekDay;  // e.g., Thu(4) ==> -3\n  } else {\n    // was extended forward to Monday\n    startDelta = 8 - jan1WeekDay;  // e.g., Fri(5) ==> +3\n  }\n\n  // find the absolute number of days to offset from the start of year\n  // to arrive close to the Gregorian equivalent (pending adjustments above)\n  // Note: decrement week multiplier by one because 1st week is\n  // represented by dayOfWeek value\n  var absoluteDays = Number(dayOfWeek) + (7 * (Number(week) - 1));\n\n  // convert from ISO weekday format to Gregorian calendar date\n  // note: subtract 1 because 1-indexed; offset should not include 1st of month\n  var delta = startDelta + absoluteDays - 1;\n  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);\n  d.add(interval);\n};\n\n\n/**\n * Sets time fields based on an ISO 8601 format string.\n * Note: only time fields, not date fields.\n *\n * @param {!goog.date.DateTime} d Object whose fields will be set.\n * @param {string} formatted A time expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601TimeOnly_ = function(d, formatted) {\n  'use strict';\n  // first strip timezone info from the end\n  var timezoneParts = formatted.match(goog.date.splitTimezoneStringRegex_);\n\n  var offsetMinutes;  // Offset from UTC if not local time\n  var formattedTime;  // The time components of the input string; no timezone.\n\n  if (timezoneParts) {\n    // Trim off the timezone characters.\n    formattedTime =\n        formatted.substring(0, formatted.length - timezoneParts[0].length);\n\n    // 'Z' indicates a UTC timestring.\n    if (timezoneParts[0] === 'Z') {\n      offsetMinutes = 0;\n    } else {\n      offsetMinutes = Number(timezoneParts[2]) * 60 + Number(timezoneParts[3]);\n      offsetMinutes *= (timezoneParts[1] == '-') ? 1 : -1;\n    }\n  } else {\n    formattedTime = formatted;\n  }\n\n  var timeParts = formattedTime.match(goog.date.splitTimeStringRegex_);\n  if (!timeParts) {\n    return false;\n  }\n\n  // We have to branch on local vs non-local times because we can't always\n  // calculate the correct UTC offset for the specified time. Specifically, the\n  // offset for daylight-savings time depends on the date being set. Therefore,\n  // when an offset is specified, we apply it verbatim.\n  if (timezoneParts) {\n    goog.asserts.assertNumber(offsetMinutes);\n\n    // Convert the date part into UTC. This is important because the local date\n    // can differ from the UTC date, and the date part of an ISO 8601 string is\n    // always set in terms of the local date.\n    var year = d.getYear();\n    var month = d.getMonth();\n    var day = d.getDate();\n    var hour = Number(timeParts[1]);\n    var minute = Number(timeParts[2]) || 0;\n    var second = Number(timeParts[3]) || 0;\n    var millisecond = timeParts[4] ? Number(timeParts[4]) * 1000 : 0;\n\n    // Date.UTC treats one- and two-digit years as if they were four-digit years\n    // beginning in 1900 (for example, a year specified as 84 becomes 1984).\n    // Since we use it in this code path, we need to account for this by\n    // incrementing the input year by 400 (in order to bypass the two-digit year\n    // behavior), and then compensate by deducting the number of milliseconds in\n    // the 400-year Gregorian calendar cycle.\n    const twoDigitYear = year >= 0 && year < 100;\n    if (twoDigitYear) {\n      year += 400;\n    }\n    let utc = Date.UTC(year, month, day, hour, minute, second, millisecond);\n    if (twoDigitYear) {\n      utc -= goog.date.MS_PER_GREGORIAN_CYCLE_;\n    }\n    d.setTime(utc + offsetMinutes * 60000);\n  } else {\n    d.setHours(Number(timeParts[1]));\n    d.setMinutes(Number(timeParts[2]) || 0);\n    d.setSeconds(Number(timeParts[3]) || 0);\n    d.setMilliseconds(timeParts[4] ? Number(timeParts[4]) * 1000 : 0);\n  }\n\n  return true;\n};\n\n\n/**\n * Pads the year to 4 unsigned digits, or 6 digits with a sign.\n * @param {number} year\n * @return {string}\n */\ngoog.date.padYear_ = function(year) {\n  const sign = year < 0 ? '-' : year >= 10000 ? '+' : '';\n  return sign + goog.string.padNumber(Math.abs(year), sign ? 6 : 4);\n};\n\n\n/**\n * Class representing a date/time interval. Used for date calculations.\n * <pre>\n * new goog.date.Interval(0, 1) // One month\n * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour\n * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day\n * </pre>\n *\n * @param {number|string=} opt_years Years or string representing date part.\n * @param {number=} opt_months Months or number of whatever date part specified\n *     by first parameter.\n * @param {number=} opt_days Days.\n * @param {number=} opt_hours Hours.\n * @param {number=} opt_minutes Minutes.\n * @param {number=} opt_seconds Seconds.\n * @constructor\n * @struct\n * @final\n */\ngoog.date.Interval = function(\n    opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {\n  'use strict';\n  if (typeof opt_years === 'string') {\n    var type = opt_years;\n    var interval = /** @type {number} */ (opt_months);\n    /** @type {number} */\n    this.years = type == goog.date.Interval.YEARS ? interval : 0;\n    /** @type {number} */\n    this.months = type == goog.date.Interval.MONTHS ? interval : 0;\n    /** @type {number} */\n    this.days = type == goog.date.Interval.DAYS ? interval : 0;\n    /** @type {number} */\n    this.hours = type == goog.date.Interval.HOURS ? interval : 0;\n    /** @type {number} */\n    this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;\n    /** @type {number} */\n    this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;\n  } else {\n    this.years = /** @type {number} */ (opt_years) || 0;\n    this.months = opt_months || 0;\n    this.days = opt_days || 0;\n    this.hours = opt_hours || 0;\n    this.minutes = opt_minutes || 0;\n    this.seconds = opt_seconds || 0;\n  }\n};\n\n\n/**\n * Parses an XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param  {string} duration An XML schema duration in textual format.\n *     Recurring durations and weeks are not supported.\n * @return {goog.date.Interval} The duration as a goog.date.Interval or null\n *     if the parse fails.\n */\ngoog.date.Interval.fromIsoString = function(duration) {\n  'use strict';\n  var parts = duration.match(goog.date.splitDurationRegex_);\n  if (!parts) {\n    return null;\n  }\n\n  var timeEmpty = !(parts[6] || parts[7] || parts[8]);\n  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);\n  if (dateTimeEmpty || timeEmpty && parts[5]) {\n    return null;\n  }\n\n  var negative = parts[1];\n  var years = parseInt(parts[2], 10) || 0;\n  var months = parseInt(parts[3], 10) || 0;\n  var days = parseInt(parts[4], 10) || 0;\n  var hours = parseInt(parts[6], 10) || 0;\n  var minutes = parseInt(parts[7], 10) || 0;\n  var seconds = parseFloat(parts[8]) || 0;\n  return negative ?\n      new goog.date.Interval(\n          -years, -months, -days, -hours, -minutes, -seconds) :\n      new goog.date.Interval(years, months, days, hours, minutes, seconds);\n};\n\n\n/**\n * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param {boolean=} opt_verbose Include zero fields in the duration string.\n * @return {?string} An XML schema duration in ISO 8601 extended format,\n *     or null if the interval contains both positive and negative fields.\n */\ngoog.date.Interval.prototype.toIsoString = function(opt_verbose) {\n  'use strict';\n  var minField = Math.min(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  var maxField = Math.max(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  if (minField < 0 && maxField > 0) {\n    return null;\n  }\n\n  // Return 0 seconds if all fields are zero.\n  if (!opt_verbose && minField == 0 && maxField == 0) {\n    return 'PT0S';\n  }\n\n  var res = [];\n\n  // Add sign and 'P' prefix.\n  if (minField < 0) {\n    res.push('-');\n  }\n  res.push('P');\n\n  // Add date.\n  if (this.years || opt_verbose) {\n    res.push(Math.abs(this.years) + 'Y');\n  }\n  if (this.months || opt_verbose) {\n    res.push(Math.abs(this.months) + 'M');\n  }\n  if (this.days || opt_verbose) {\n    res.push(Math.abs(this.days) + 'D');\n  }\n\n  // Add time.\n  if (this.hours || this.minutes || this.seconds || opt_verbose) {\n    res.push('T');\n    if (this.hours || opt_verbose) {\n      res.push(Math.abs(this.hours) + 'H');\n    }\n    if (this.minutes || opt_verbose) {\n      res.push(Math.abs(this.minutes) + 'M');\n    }\n    if (this.seconds || opt_verbose) {\n      res.push(Math.abs(this.seconds) + 'S');\n    }\n  }\n\n  return res.join('');\n};\n\n\n/**\n * Tests whether the given interval is equal to this interval.\n * Note, this is a simple field-by-field comparison, it doesn't\n * account for comparisons like \"12 months == 1 year\".\n *\n * @param {goog.date.Interval} other The interval to test.\n * @return {boolean} Whether the intervals are equal.\n */\ngoog.date.Interval.prototype.equals = function(other) {\n  'use strict';\n  return other.years == this.years && other.months == this.months &&\n      other.days == this.days && other.hours == this.hours &&\n      other.minutes == this.minutes && other.seconds == this.seconds;\n};\n\n\n/**\n * @return {!goog.date.Interval} A clone of the interval object.\n */\ngoog.date.Interval.prototype.clone = function() {\n  'use strict';\n  return new goog.date.Interval(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n};\n\n\n/**\n * Years constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.YEARS = 'y';\n\n\n/**\n * Months constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MONTHS = 'm';\n\n\n/**\n * Days constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.DAYS = 'd';\n\n\n/**\n * Hours constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.HOURS = 'h';\n\n\n/**\n * Minutes constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MINUTES = 'n';\n\n\n/**\n * Seconds constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.SECONDS = 's';\n\n\n/**\n * @return {boolean} Whether all fields of the interval are zero.\n */\ngoog.date.Interval.prototype.isZero = function() {\n  'use strict';\n  return this.years == 0 && this.months == 0 && this.days == 0 &&\n      this.hours == 0 && this.minutes == 0 && this.seconds == 0;\n};\n\n\n/**\n * @return {!goog.date.Interval} Negative of this interval.\n */\ngoog.date.Interval.prototype.getInverse = function() {\n  'use strict';\n  return this.times(-1);\n};\n\n\n/**\n * Calculates n * (this interval) by memberwise multiplication.\n * @param {number} n An integer.\n * @return {!goog.date.Interval} n * this.\n */\ngoog.date.Interval.prototype.times = function(n) {\n  'use strict';\n  return new goog.date.Interval(\n      this.years * n, this.months * n, this.days * n, this.hours * n,\n      this.minutes * n, this.seconds * n);\n};\n\n\n/**\n * Gets the total number of seconds in the time interval. Assumes that months\n * and years are empty.\n * @return {number} Total number of seconds in the interval.\n */\ngoog.date.Interval.prototype.getTotalSeconds = function() {\n  'use strict';\n  goog.asserts.assert(this.years == 0 && this.months == 0);\n  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 +\n      this.seconds;\n};\n\n\n/**\n * Adds the Interval in the argument to this Interval field by field.\n *\n * @param {goog.date.Interval} interval The Interval to add.\n */\ngoog.date.Interval.prototype.add = function(interval) {\n  'use strict';\n  this.years += interval.years;\n  this.months += interval.months;\n  this.days += interval.days;\n  this.hours += interval.hours;\n  this.minutes += interval.minutes;\n  this.seconds += interval.seconds;\n};\n\n\n/**\n * @typedef {(?Date|?goog.date.Date)}\n */\ngoog.date.DateLike;\n\n\n/**\n * Class representing a date. Defaults to current date if none is specified.\n *\n * Implements most methods of the native js Date object (except the time related\n * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just\n * as if goog.date.Date was a synonym of Date. To make this more transparent,\n * Closure APIs should accept goog.date.DateLike instead of the real Date\n * object.\n *\n * @param {number|goog.date.DateLike=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date\n *     determined by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @constructor\n * @struct\n * @see goog.date.DateTime\n */\ngoog.date.Date = function(opt_year, opt_month, opt_date) {\n  'use strict';\n  /** @protected {!Date} The wrapped date or datetime. */\n  this.date;\n  // goog.date.DateTime assumes that only this.date is added in this ctor.\n  if (typeof opt_year === 'number') {\n    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);\n    this.maybeFixDst_(opt_date || 1);\n  } else if (goog.isObject(opt_year)) {\n    this.date = this.buildDate_(\n        opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());\n    this.maybeFixDst_(opt_year.getDate());\n  } else {\n    this.date = new Date(goog.now());\n    var expectedDate = this.date.getDate();\n    this.date.setHours(0);\n    this.date.setMinutes(0);\n    this.date.setSeconds(0);\n    this.date.setMilliseconds(0);\n    // In some time zones there is no \"0\" hour on certain days during DST.\n    // Adjust here, if necessary. See:\n    // https://github.com/google/closure-library/issues/34.\n    this.maybeFixDst_(expectedDate);\n  }\n};\n\n\n/**\n * new Date(y, m, d) treats years in the interval [0, 100) as two digit years,\n * adding 1900 to them. This method ensures that calling the date constructor\n * as a copy constructor returns a value that is equal to the passed in\n * date value by explicitly setting the full year.\n * @private\n * @param {number} fullYear The full year (including century).\n * @param {number} month The month, from 0-11.\n * @param {number} date The day of the month.\n * @return {!Date} The constructed Date object.\n */\ngoog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {\n  'use strict';\n  var d = new Date(fullYear, month, date);\n  if (fullYear >= 0 && fullYear < 100) {\n    // Can't just setFullYear as new Date() can flip over for e.g. month = 13.\n    d.setFullYear(d.getFullYear() - 1900);\n  }\n  return d;\n};\n\n\n/**\n * First day of week. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstDayOfWeek_ =\n    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\n\n\n/**\n * The cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstWeekCutOffDay_ =\n    goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;\n\n\n/**\n * @return {!goog.date.Date} A clone of the date object.\n */\ngoog.date.Date.prototype.clone = function() {\n  'use strict';\n  var date = new goog.date.Date(this.date);\n  date.firstDayOfWeek_ = this.firstDayOfWeek_;\n  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;\n\n  return date;\n};\n\n\n/**\n * @return {number} The four digit year of date.\n */\ngoog.date.Date.prototype.getFullYear = function() {\n  'use strict';\n  return this.date.getFullYear();\n};\n\n\n/**\n * Alias for getFullYear.\n *\n * @return {number} The four digit year of date.\n * @see #getFullYear\n */\ngoog.date.Date.prototype.getYear = function() {\n  'use strict';\n  return this.getFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date, 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getMonth = function() {\n  'use strict';\n  return /** @type {goog.date.month} */ (this.date.getMonth());\n};\n\n\n/**\n * @return {number} The date of month.\n */\ngoog.date.Date.prototype.getDate = function() {\n  'use strict';\n  return this.date.getDate();\n};\n\n\n/**\n * Returns the number of milliseconds since 1 January 1970 00:00:00.\n *\n * @return {number} The number of milliseconds since 1 January 1970 00:00:00.\n */\ngoog.date.Date.prototype.getTime = function() {\n  'use strict';\n  return this.date.getTime();\n};\n\n\n/**\n * @return {number} The day of week, US style. 0 = Sun, 6 = Sat.\n */\ngoog.date.Date.prototype.getDay = function() {\n  'use strict';\n  return this.date.getDay();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week, ISO style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getIsoWeekday = function() {\n  'use strict';\n  return /** @type {goog.date.weekDay} */ ((this.getDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getWeekday = function() {\n  'use strict';\n  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The four digit year of date according to universal time.\n */\ngoog.date.Date.prototype.getUTCFullYear = function() {\n  'use strict';\n  return this.date.getUTCFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date according to universal time,\n *     0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getUTCMonth = function() {\n  'use strict';\n  return /** @type {goog.date.month} */ (this.date.getUTCMonth());\n};\n\n\n/**\n * @return {number} The date of month according to universal time.\n */\ngoog.date.Date.prototype.getUTCDate = function() {\n  'use strict';\n  return this.date.getUTCDate();\n};\n\n\n/**\n * @return {number} The day of week according to universal time, US style.\n *     0 = Sun, 1 = Mon, 6 = Sat.\n */\ngoog.date.Date.prototype.getUTCDay = function() {\n  'use strict';\n  return this.date.getDay();\n};\n\n\n/**\n * @return {number} The hours value according to universal time.\n */\ngoog.date.Date.prototype.getUTCHours = function() {\n  'use strict';\n  return this.date.getUTCHours();\n};\n\n\n/**\n * @return {number} The minutes value according to universal time.\n */\ngoog.date.Date.prototype.getUTCMinutes = function() {\n  'use strict';\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week according to universal time, ISO\n *     style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getUTCIsoWeekday = function() {\n  'use strict';\n  return /** @type {goog.date.weekDay} */ ((this.date.getUTCDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to universal time and\n *     firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getUTCWeekday = function() {\n  'use strict';\n  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The first day of the week. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstDayOfWeek = function() {\n  'use strict';\n  return this.firstDayOfWeek_;\n};\n\n\n/**\n * @return {number} The cut off weekday used for week number calculations.\n *     0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstWeekCutOffDay = function() {\n  'use strict';\n  return this.firstWeekCutOffDay_;\n};\n\n\n/**\n * @return {number} The number of days for the selected month.\n */\ngoog.date.Date.prototype.getNumberOfDaysInMonth = function() {\n  'use strict';\n  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());\n};\n\n\n/**\n * @return {number} The week number.\n */\ngoog.date.Date.prototype.getWeekNumber = function() {\n  'use strict';\n  return goog.date.getWeekNumber(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * Returns year in \u201cWeek of Year\u201d based calendars in which the year transition\n * occurs on a week boundary.\n * @return {number} The four digit year in \"Week of Year\"\n */\ngoog.date.Date.prototype.getYearOfWeek = function() {\n  'use strict';\n  return goog.date.getYearOfWeek(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * @return {number} The day of year.\n */\ngoog.date.Date.prototype.getDayOfYear = function() {\n  'use strict';\n  var dayOfYear = this.getDate();\n  var year = this.getFullYear();\n  for (var m = this.getMonth() - 1; m >= 0; m--) {\n    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);\n  }\n\n  return dayOfYear;\n};\n\n\n/**\n * Returns timezone offset. The timezone offset is the delta in minutes between\n * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time\n * prevents this value from being constant.\n *\n * @return {number} The timezone offset.\n */\ngoog.date.Date.prototype.getTimezoneOffset = function() {\n  'use strict';\n  return this.date.getTimezoneOffset();\n};\n\n\n/**\n * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z\n * for UTC.\n *\n * @return {string} The timezone offset as a string.\n */\ngoog.date.Date.prototype.getTimezoneOffsetString = function() {\n  'use strict';\n  var tz;\n  var offset = this.getTimezoneOffset();\n\n  if (offset == 0) {\n    tz = 'Z';\n  } else {\n    var n = Math.abs(offset) / 60;\n    var h = Math.floor(n);\n    var m = (n - h) * 60;\n    tz = (offset > 0 ? '-' : '+') + goog.string.padNumber(h, 2) + ':' +\n        goog.string.padNumber(m, 2);\n  }\n\n  return tz;\n};\n\n\n/**\n * Sets the date.\n *\n * @param {goog.date.Date} date Date object to set date from.\n */\ngoog.date.Date.prototype.set = function(date) {\n  'use strict';\n  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n};\n\n\n/**\n * Sets the year part of the date.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setFullYear = function(year) {\n  'use strict';\n  this.date.setFullYear(year);\n};\n\n\n/**\n * Alias for setFullYear.\n *\n * @param {number} year Four digit year.\n * @see #setFullYear\n */\ngoog.date.Date.prototype.setYear = function(year) {\n  'use strict';\n  this.setFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date.\n *\n * TODO(nnaze): Update type to goog.date.month.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setMonth = function(month) {\n  'use strict';\n  this.date.setMonth(month);\n};\n\n\n/**\n * Sets the day part of the date.\n *\n * @param {number} date The day part.\n */\ngoog.date.Date.prototype.setDate = function(date) {\n  'use strict';\n  this.date.setDate(date);\n};\n\n\n/**\n * Sets the value of the date object as expressed in the number of milliseconds\n * since 1 January 1970 00:00:00.\n *\n * @param {number} ms Number of milliseconds since 1 Jan 1970.\n */\ngoog.date.Date.prototype.setTime = function(ms) {\n  'use strict';\n  this.date.setTime(ms);\n};\n\n\n/**\n * Sets the year part of the date according to universal time.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setUTCFullYear = function(year) {\n  'use strict';\n  this.date.setUTCFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date according to universal time.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setUTCMonth = function(month) {\n  'use strict';\n  this.date.setUTCMonth(month);\n};\n\n\n/**\n * Sets the day part of the date according to universal time.\n *\n * @param {number} date The UTC date.\n */\ngoog.date.Date.prototype.setUTCDate = function(date) {\n  'use strict';\n  this.date.setUTCDate(date);\n};\n\n\n/**\n * Sets the first day of week.\n *\n * @param {number} day 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.setFirstDayOfWeek = function(day) {\n  'use strict';\n  this.firstDayOfWeek_ = day;\n};\n\n\n/**\n * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n *\n * @param {number} day The cut off weekday.\n */\ngoog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {\n  'use strict';\n  this.firstWeekCutOffDay_ = day;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n */\ngoog.date.Date.prototype.add = function(interval) {\n  'use strict';\n  if (interval.years || interval.months) {\n    // As months have different number of days adding a month to Jan 31 by just\n    // setting the month would result in a date in early March rather than Feb\n    // 28 or 29. Doing it this way overcomes that problem.\n\n    // adjust year and month, accounting for both directions\n    var month = this.getMonth() + interval.months + interval.years * 12;\n    var year = this.getYear() + Math.floor(month / 12);\n    month %= 12;\n    if (month < 0) {\n      month += 12;\n    }\n\n    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);\n    var date = Math.min(daysInTargetMonth, this.getDate());\n\n    // avoid inadvertently causing rollovers to adjacent months\n    this.setDate(1);\n\n    this.setFullYear(year);\n    this.setMonth(month);\n    this.setDate(date);\n  }\n\n  if (interval.days) {\n    // Because Javascript Date objects are being used and the 'year' argument\n    // to the constructor has special behavior for values 0-99 (inclusive),\n    // enable correcting for those special values being interpreted as relative\n    // to the year 1900 (rather than absolute year numbers as with all other\n    // integer values for that argument).\n    //\n    // Since only the constructor taking a separate field for the 'year' of\n    // a date behaves this way, the adjustment value depends only on the initial\n    // date. This is because the interval-adjusted date value uses a Date\n    // constructor that avoids the problematic, special behavior for years 0-99.\n    const initialYear = this.getYear();\n    const yearAdjustment = initialYear >= 0 && initialYear <= 99 ? -1900 : 0;\n\n    // Convert the days to milliseconds and add it to the UNIX timestamp.\n    // Taking noon helps to avoid 1 day error due to the daylight saving.\n    const noon = new Date(initialYear, this.getMonth(), this.getDate(), 12);\n    const result = new Date(noon.getTime() + interval.days * 86400000);\n\n    // Set date to 1 to prevent rollover caused by setting the year or month.\n    this.setDate(1);\n    this.setFullYear(result.getFullYear() + yearAdjustment);\n    this.setMonth(result.getMonth());\n    this.setDate(result.getDate());\n\n    this.maybeFixDst_(result.getDate());\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date. Consistent with the\n * standard built-in Date#toISOString method, the year is either four digits\n * (YYYY) or six with a sign prefix (\u00b1YYYYYY), since ISO 8601 requires the\n * number of digits in the year to be agreed upon in advance.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n */\ngoog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var str = [\n    goog.date.padYear_(this.getFullYear()),\n    goog.string.padNumber(this.getMonth() + 1, 2),\n    goog.string.padNumber(this.getDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date according to universal time.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date according to\n *     universal time.\n */\ngoog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var str = [\n    goog.date.padYear_(this.getUTCFullYear()),\n    goog.string.padNumber(this.getUTCMonth() + 1, 2),\n    goog.string.padNumber(this.getUTCDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Tests whether given date is equal to this Date.\n * Note: This ignores units more precise than days (hours and below)\n * and also ignores timezone considerations.\n *\n * @param {goog.date.Date} other The date to compare.\n * @return {boolean} Whether the given date is equal to this one.\n */\ngoog.date.Date.prototype.equals = function(other) {\n  'use strict';\n  return !!(\n      other && this.getYear() == other.getYear() &&\n      this.getMonth() == other.getMonth() && this.getDate() == other.getDate());\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date.\n * @override\n */\ngoog.date.Date.prototype.toString = function() {\n  'use strict';\n  return this.toIsoString();\n};\n\n\n/**\n * Fixes date to account for daylight savings time in browsers that fail to do\n * so automatically.\n * @param {number} expected Expected date.\n * @private\n */\ngoog.date.Date.prototype.maybeFixDst_ = function(expected) {\n  'use strict';\n  if (this.getDate() != expected) {\n    var dir = this.getDate() < expected ? 1 : -1;\n    this.date.setUTCHours(this.date.getUTCHours() + dir);\n  }\n};\n\n\n/**\n * @return {number} Value of wrapped date.\n * @override\n */\ngoog.date.Date.prototype.valueOf = function() {\n  'use strict';\n  return this.date.valueOf();\n};\n\n\n/**\n * Compares two dates.  May be used as a sorting function.\n * @see goog.array.sort\n * @param {!goog.date.DateLike} date1 Date to compare.\n * @param {!goog.date.DateLike} date2 Date to compare.\n * @return {number} Comparison result. 0 if dates are the same, less than 0 if\n *     date1 is earlier than date2, greater than 0 if date1 is later than date2.\n */\ngoog.date.Date.compare = function(date1, date2) {\n  'use strict';\n  return date1.getTime() - date2.getTime();\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.Date`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.Date} Parsed date or null if parse fails.\n */\ngoog.date.Date.fromIsoString = function(formatted) {\n  'use strict';\n  var ret = new goog.date.Date(2000);\n  return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;\n};\n\n\n\n/**\n * Class representing a date and time. Defaults to current date and time if none\n * is specified.\n *\n * Implements most methods of the native js Date object and can be used\n * interchangeably with it just as if goog.date.DateTime was a subclass of Date.\n *\n * @param {(number|{getTime:?}|null)=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date determined\n *     by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @param {number=} opt_hours Hours, 0 - 23.\n * @param {number=} opt_minutes Minutes, 0 - 59.\n * @param {number=} opt_seconds Seconds, 0 - 61.\n * @param {number=} opt_milliseconds Milliseconds, 0 - 999.\n * @constructor\n * @struct\n * @extends {goog.date.Date}\n */\ngoog.date.DateTime = function(\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\n    opt_milliseconds) {\n  'use strict';\n  if (typeof opt_year === 'number') {\n    /** @override */\n    this.date = new Date(\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    this.date = new Date(\n        opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());\n  }\n};\ngoog.inherits(goog.date.DateTime, goog.date.Date);\n\n\n/**\n * @param {number} timestamp Number of milliseconds since Epoch.\n * @return {!goog.date.DateTime}\n */\ngoog.date.DateTime.fromTimestamp = function(timestamp) {\n  'use strict';\n  var date = new goog.date.DateTime();\n  date.setTime(timestamp);\n  return date;\n};\n\n\n/**\n * Creates a DateTime from a datetime string expressed in RFC 822 format.\n *\n * @param {string} formatted A date or datetime expressed in RFC 822 format.\n * @return {goog.date.DateTime} Parsed date or null if parse fails.\n */\ngoog.date.DateTime.fromRfc822String = function(formatted) {\n  'use strict';\n  var date = new Date(formatted);\n  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;\n};\n\n\n/**\n * Returns the hours part of the datetime.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.getHours = function() {\n  'use strict';\n  return this.date.getHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.getMinutes = function() {\n  'use strict';\n  return this.date.getMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getSeconds = function() {\n  'use strict';\n  return this.date.getSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getMilliseconds = function() {\n  'use strict';\n  return this.date.getMilliseconds();\n};\n\n\n/**\n * Returns the day of week according to universal time, US style.\n *\n * @return {goog.date.weekDay} Day of week, 0 = Sun, 1 = Mon, 6 = Sat.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCDay = function() {\n  'use strict';\n  return /** @type {goog.date.weekDay} */ (this.date.getUTCDay());\n};\n\n\n/**\n * Returns the hours part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCHours = function() {\n  'use strict';\n  return this.date.getUTCHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCMinutes = function() {\n  'use strict';\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getUTCSeconds = function() {\n  'use strict';\n  return this.date.getUTCSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getUTCMilliseconds = function() {\n  'use strict';\n  return this.date.getUTCMilliseconds();\n};\n\n\n/**\n * Sets the hours part of the datetime.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setHours = function(hours) {\n  'use strict';\n  this.date.setHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setMinutes = function(minutes) {\n  'use strict';\n  this.date.setMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setSeconds = function(seconds) {\n  'use strict';\n  this.date.setSeconds(seconds);\n};\n\n\n/**\n * Sets the milliseconds part of the datetime.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setMilliseconds = function(ms) {\n  'use strict';\n  this.date.setMilliseconds(ms);\n};\n\n\n/**\n * Sets the hours part of the datetime according to universal time.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setUTCHours = function(hours) {\n  'use strict';\n  this.date.setUTCHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime according to universal time.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setUTCMinutes = function(minutes) {\n  'use strict';\n  this.date.setUTCMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setUTCSeconds = function(seconds) {\n  'use strict';\n  this.date.setUTCSeconds(seconds);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {\n  'use strict';\n  this.date.setUTCMilliseconds(ms);\n};\n\n\n/**\n * @return {boolean} Whether the datetime is aligned to midnight.\n */\ngoog.date.DateTime.prototype.isMidnight = function() {\n  'use strict';\n  return this.getHours() == 0 && this.getMinutes() == 0 &&\n      this.getSeconds() == 0 && this.getMilliseconds() == 0;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n * @override\n */\ngoog.date.DateTime.prototype.add = function(interval) {\n  'use strict';\n  goog.date.Date.prototype.add.call(this, interval);\n\n  if (interval.hours) {\n    this.setUTCHours(this.date.getUTCHours() + interval.hours);\n  }\n  if (interval.minutes) {\n    this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);\n  }\n  if (interval.seconds) {\n    this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time. Consistent with the\n * standard built-in Date#toISOString method, the year is either four digits\n * (YYYY) or six with a sign prefix (\u00b1YYYYYY), since ISO 8601 requires the\n * number of digits in the year to be agreed upon in advance.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n */\ngoog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) + ':' +\n        goog.string.padNumber(this.getMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getSeconds(), 2) +\n        (opt_tz ? this.getTimezoneOffsetString() : '');\n  }\n\n  return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) +\n      goog.string.padNumber(this.getMinutes(), 2) +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns XML Schema 2 string representation of date/time.\n * The return value is also ISO 8601 compliant.\n *\n * @param {boolean=} opt_timezone Should the timezone offset be included in the\n *     string?.\n * @return {string} XML Schema 2 string representation of date/time.\n */\ngoog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {\n  'use strict';\n  return goog.date.Date.prototype.toIsoString.call(this, true) + 'T' +\n      goog.string.padNumber(this.getHours(), 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2) + ':' +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_timezone ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time according to universal\n * time.\n *\n * @param {boolean=} opt_verbose Whether the opt_verbose format should be\n *     returned instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date/time according to\n *     universal time.\n * @override\n */\ngoog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  'use strict';\n  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) + ':' +\n        goog.string.padNumber(this.getUTCMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n  }\n\n  return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) +\n      goog.string.padNumber(this.getUTCMinutes(), 2) +\n      goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Returns RFC 3339 string representation of datetime in UTC.\n *\n * @return {string} A UTC datetime expressed in RFC 3339 format.\n */\ngoog.date.DateTime.prototype.toUTCRfc3339String = function() {\n  'use strict';\n  var date = this.toUTCIsoString(true);\n  var millis = this.getUTCMilliseconds();\n  return (millis ? date + '.' + goog.string.padNumber(millis, 3) : date) + 'Z';\n};\n\n\n/**\n * Tests whether given datetime is exactly equal to this DateTime.\n *\n * @param {goog.date.Date} other The datetime to compare.\n * @return {boolean} Whether the given datetime is exactly equal to this one.\n * @override\n */\ngoog.date.DateTime.prototype.equals = function(other) {\n  'use strict';\n  return this.getTime() == other.getTime();\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n */\ngoog.date.DateTime.prototype.toString = function() {\n  'use strict';\n  return this.toIsoString();\n};\n\n\n/**\n * Generates time label for the datetime, e.g., '5:30 AM'.\n * By default this does not pad hours (e.g., to '05:30') and it does add\n * an am/pm suffix.\n * TODO(user): i18n -- hardcoding time format like this is bad.  E.g., in CJK\n *               locales, need Chinese characters for hour and minute units.\n * @param {boolean=} opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.\n * @param {boolean=} opt_showAmPm Whether to show the 'am' and 'pm' suffix.\n * @param {boolean=} opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm',\n *                                      but '5:01pm' remains '5:01pm'.\n * @return {string} The time label.\n * @deprecated Use goog.i18n.DateTimeFormat with\n *     goog.i18n.DateTimeFormat.Format.FULL_TIME or\n *     goog.i18n.DateTimeFormat.Format.LONG_TIME or\n *     goog.i18n.DateTimeFormat.Format.MEDIUM_TIME or\n *     goog.i18n.DateTimeFormat.Format.SHORT_TIME.\n */\ngoog.date.DateTime.prototype.toUsTimeString = function(\n    opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {\n  'use strict';\n  var hours = this.getHours();\n\n  // show am/pm marker by default\n  if (opt_showAmPm === undefined) {\n    opt_showAmPm = true;\n  }\n\n  // 12pm\n  var isPM = hours == 12;\n\n  // change from 1-24 to 1-12 basis\n  if (hours > 12) {\n    hours -= 12;\n    isPM = true;\n  }\n\n  // midnight is expressed as \"12am\", but if am/pm marker omitted, keep as '0'\n  if (hours == 0 && opt_showAmPm) {\n    hours = 12;\n  }\n\n  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);\n  var minutes = this.getMinutes();\n  if (!opt_omitZeroMinutes || minutes > 0) {\n    label += ':' + goog.string.padNumber(minutes, 2);\n  }\n\n  // by default, show am/pm suffix\n  if (opt_showAmPm) {\n    label += isPM ? ' PM' : ' AM';\n  }\n  return label;\n};\n\n\n/**\n * Generates time label for the datetime in standard ISO 24-hour time format.\n * E.g., '06:00:00' or '23:30:15'.\n * @param {boolean=} opt_showSeconds Whether to shows seconds. Defaults to TRUE.\n * @return {string} The time label.\n */\ngoog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {\n  'use strict';\n  var hours = this.getHours();\n  var label = goog.string.padNumber(hours, 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2);\n  if (opt_showSeconds === undefined || opt_showSeconds) {\n    label += ':' + goog.string.padNumber(this.getSeconds(), 2);\n  }\n  return label;\n};\n\n\n/**\n * @return {!goog.date.DateTime} A clone of the datetime object.\n * @override\n */\ngoog.date.DateTime.prototype.clone = function() {\n  'use strict';\n  var date = new goog.date.DateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.DateTime`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.DateTime} Parsed date or null if parse fails.\n * @override\n */\ngoog.date.DateTime.fromIsoString = function(formatted) {\n  'use strict';\n  var ret = new goog.date.DateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n"],
"names":["goog","provide","require","date","weekDay","MON","TUE","WED","THU","FRI","SAT","SUN","month","JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","splitDateStringRegex_","RegExp","splitTimeStringRegex_","splitTimezoneStringRegex_","splitDurationRegex_","MS_PER_DAY","MS_PER_GREGORIAN_CYCLE_","isLeapYear","goog.date.isLeapYear","year","isLongIsoYear","goog.date.isLongIsoYear","n","Math","floor","getNumberOfDaysInMonth","goog.date.getNumberOfDaysInMonth","isSameDay","goog.date.isSameDay","opt_now","now","Date","getDate","isSameMonth","goog.date.isSameMonth","getMonth","isSameYear","goog.date.isSameYear","getFullYear","getCutOffSameWeek_","goog.date.getCutOffSameWeek_","opt_weekDay","opt_firstDayOfWeek","d","cutoff","undefined","firstday","isoday","getDay","daypos","cutoffpos","valueOf","getWeekNumber","goog.date.getWeekNumber","cutoffSameWeek","jan1","round","getYearOfWeek","goog.date.getYearOfWeek","min","goog.date.min","date1","date2","max","goog.date.max","setIso8601DateTime","goog.date.setIso8601DateTime","dateTime","formatted","string","trim","delim","indexOf","parts","split","setIso8601DateOnly_","length","setIso8601TimeOnly_","goog.date.setIso8601DateOnly_","match","Number","dayOfYear","week","dayOfWeek","setFullYear","setDate","setMonth","offset","add","Interval","DAYS","setDateFromIso8601Week_","goog.date.setDateFromIso8601Week_","jsDay","jan1WeekDay","THURSDAY","startDelta","absoluteDays","delta","interval","goog.date.setIso8601TimeOnly_","timezoneParts","offsetMinutes","formattedTime","substring","timeParts","asserts","assertNumber","getYear","day","hour","minute","second","millisecond","twoDigitYear","utc","UTC","setTime","setHours","setMinutes","setSeconds","setMilliseconds","padYear_","goog.date.padYear_","sign","padNumber","abs","goog.date.Interval","opt_years","opt_months","opt_days","opt_hours","opt_minutes","opt_seconds","type","years","YEARS","months","MONTHS","days","hours","HOURS","minutes","MINUTES","seconds","SECONDS","fromIsoString","goog.date.Interval.fromIsoString","duration","timeEmpty","dateTimeEmpty","negative","parseInt","parseFloat","prototype","toIsoString","goog.date.Interval.prototype.toIsoString","opt_verbose","minField","maxField","res","push","join","equals","goog.date.Interval.prototype.equals","other","clone","goog.date.Interval.prototype.clone","isZero","goog.date.Interval.prototype.isZero","getInverse","goog.date.Interval.prototype.getInverse","times","goog.date.Interval.prototype.times","getTotalSeconds","goog.date.Interval.prototype.getTotalSeconds","assert","goog.date.Interval.prototype.add","DateLike","goog.date.Date","opt_year","opt_month","opt_date","buildDate_","maybeFixDst_","isObject","expectedDate","goog.date.Date.prototype.buildDate_","fullYear","firstDayOfWeek_","i18n","DateTimeSymbols","FIRSTDAYOFWEEK","firstWeekCutOffDay_","FIRSTWEEKCUTOFFDAY","goog.date.Date.prototype.clone","goog.date.Date.prototype.getFullYear","goog.date.Date.prototype.getYear","goog.date.Date.prototype.getMonth","goog.date.Date.prototype.getDate","getTime","goog.date.Date.prototype.getTime","goog.date.Date.prototype.getDay","getIsoWeekday","goog.date.Date.prototype.getIsoWeekday","getWeekday","goog.date.Date.prototype.getWeekday","getUTCFullYear","goog.date.Date.prototype.getUTCFullYear","getUTCMonth","goog.date.Date.prototype.getUTCMonth","getUTCDate","goog.date.Date.prototype.getUTCDate","getUTCDay","goog.date.Date.prototype.getUTCDay","getUTCHours","goog.date.Date.prototype.getUTCHours","getUTCMinutes","goog.date.Date.prototype.getUTCMinutes","getUTCIsoWeekday","goog.date.Date.prototype.getUTCIsoWeekday","getUTCWeekday","goog.date.Date.prototype.getUTCWeekday","getFirstDayOfWeek","goog.date.Date.prototype.getFirstDayOfWeek","getFirstWeekCutOffDay","goog.date.Date.prototype.getFirstWeekCutOffDay","goog.date.Date.prototype.getNumberOfDaysInMonth","goog.date.Date.prototype.getWeekNumber","goog.date.Date.prototype.getYearOfWeek","getDayOfYear","goog.date.Date.prototype.getDayOfYear","m","getTimezoneOffset","goog.date.Date.prototype.getTimezoneOffset","getTimezoneOffsetString","goog.date.Date.prototype.getTimezoneOffsetString","tz","h","set","goog.date.Date.prototype.set","goog.date.Date.prototype.setFullYear","setYear","goog.date.Date.prototype.setYear","goog.date.Date.prototype.setMonth","goog.date.Date.prototype.setDate","goog.date.Date.prototype.setTime","ms","setUTCFullYear","goog.date.Date.prototype.setUTCFullYear","setUTCMonth","goog.date.Date.prototype.setUTCMonth","setUTCDate","goog.date.Date.prototype.setUTCDate","setFirstDayOfWeek","goog.date.Date.prototype.setFirstDayOfWeek","setFirstWeekCutOffDay","goog.date.Date.prototype.setFirstWeekCutOffDay","goog.date.Date.prototype.add","daysInTargetMonth","initialYear","yearAdjustment","noon","result","goog.date.Date.prototype.toIsoString","opt_tz","str","toUTCIsoString","goog.date.Date.prototype.toUTCIsoString","goog.date.Date.prototype.equals","toString","goog.date.Date.prototype.toString","goog.date.Date.prototype.maybeFixDst_","expected","dir","setUTCHours","goog.date.Date.prototype.valueOf","compare","goog.date.Date.compare","goog.date.Date.fromIsoString","ret","DateTime","goog.date.DateTime","opt_milliseconds","inherits","fromTimestamp","goog.date.DateTime.fromTimestamp","timestamp","fromRfc822String","goog.date.DateTime.fromRfc822String","isNaN","getHours","goog.date.DateTime.prototype.getHours","getMinutes","goog.date.DateTime.prototype.getMinutes","getSeconds","goog.date.DateTime.prototype.getSeconds","getMilliseconds","goog.date.DateTime.prototype.getMilliseconds","goog.date.DateTime.prototype.getUTCDay","goog.date.DateTime.prototype.getUTCHours","goog.date.DateTime.prototype.getUTCMinutes","getUTCSeconds","goog.date.DateTime.prototype.getUTCSeconds","getUTCMilliseconds","goog.date.DateTime.prototype.getUTCMilliseconds","goog.date.DateTime.prototype.setHours","goog.date.DateTime.prototype.setMinutes","goog.date.DateTime.prototype.setSeconds","goog.date.DateTime.prototype.setMilliseconds","goog.date.DateTime.prototype.setUTCHours","setUTCMinutes","goog.date.DateTime.prototype.setUTCMinutes","setUTCSeconds","goog.date.DateTime.prototype.setUTCSeconds","setUTCMilliseconds","goog.date.DateTime.prototype.setUTCMilliseconds","isMidnight","goog.date.DateTime.prototype.isMidnight","goog.date.DateTime.prototype.add","call","goog.date.DateTime.prototype.toIsoString","dateString","toXmlDateTime","goog.date.DateTime.prototype.toXmlDateTime","opt_timezone","goog.date.DateTime.prototype.toUTCIsoString","dateStr","toUTCRfc3339String","goog.date.DateTime.prototype.toUTCRfc3339String","millis","goog.date.DateTime.prototype.equals","goog.date.DateTime.prototype.toString","toUsTimeString","goog.date.DateTime.prototype.toUsTimeString","opt_padHours","opt_showAmPm","opt_omitZeroMinutes","isPM","label","String","toIsoTimeString","goog.date.DateTime.prototype.toIsoTimeString","opt_showSeconds","goog.date.DateTime.prototype.clone","goog.date.DateTime.fromIsoString"]
}
