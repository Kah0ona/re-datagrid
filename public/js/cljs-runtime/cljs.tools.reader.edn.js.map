{"version":3,"sources":["cljs/tools/reader/edn.cljs"],"mappings":"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","names":["cljs.tools.reader.edn/macro-terminating?","ch","and__5023__auto__","cljs.tools.reader.edn/macros","cljs.tools.reader.edn/not-constituent?","var_args","G__47524","cljs.tools.reader.edn/read-token","js/Error","rdr","kind","initch","cljs.tools.reader.edn.read_token","validate-leading?","cljs.core/not","cljs.tools.reader.impl.errors/throw-eof-at-start","cljs.tools.reader.impl.errors/throw-bad-char","sb","js/goog.string.StringBuffer","cljs.tools.reader.impl.utils/whitespace?","cljs.tools.reader.reader-types/unread","G__47540","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.edn/read-dispatch","_","opts","temp__5821__auto__","dm","cljs.tools.reader.edn/dispatch-macros","G__47544","G__47545","G__47546","cljs.tools.reader.edn/read-tagged","G__47552","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-unmatched-delimiter","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","G__47560","cljs.tools.reader.edn/read-unicode-char","token","offset","length","base","l","cljs.core/count","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","i","uc","js/String.fromCharCode","d","cljs.tools.reader.impl.utils/char-code","cljs.core.nth","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","exact?","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","cljs.tools.reader.reader-types/peek-char","or__5025__auto__","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.edn/upper-limit","cljs.tools.reader.edn/lower-limit","cljs.tools.reader.edn/read-char*","backslash","token-len","goog.string/startsWith","c","cljs.tools.reader.edn.read_unicode_char","ic","cljs.tools.reader.impl.errors/throw-invalid-character-literal","len","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.edn/read-delimited","delim","vec__47573","start-line","start-column","cljs.tools.reader.impl.utils/char","a","cljs.core/transient","cljs.tools.reader.impl.commons/read-past","cljs.tools.reader.impl.errors.throw_eof_delimited","cljs.core._EQ_","cljs.core/persistent!","macrofn","mret","cljs.core.conj_BANG_","o","G__47577","G__47578","G__47579","G__47580","cljs.tools.reader.edn/read","G__47581","cljs.tools.reader.edn/read-list","the-list","cljs.core/empty?","cljs.core.apply","cljs.core/list","cljs.tools.reader.edn/read-vector","cljs.tools.reader.edn/read-map","vec__47588","the-map","map-count","ks","cljs.core.take_nth","key-set","cljs.core/set","cljs.core/odd?","cljs.tools.reader.impl.errors/throw-odd-map","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","cljs.core/to-array","cljs.core/PersistentHashMap","cljs.tools.reader.edn/read-number","G__47595","s","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.errors/throw-invalid-number","G__47596","cljs.tools.reader.edn/escape-char","G__47613","js/parseInt","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.tools.reader.edn/read-string*","G__47618","cljs.tools.reader.impl.errors.throw_eof_reading","G__47619","G__47620","cljs.tools.reader.edn/read-symbol","temp__5823__auto__","G__47622","p","cljs.tools.reader.impl.commons/parse-symbol","cljs.core.symbol","cljs.tools.reader.impl.errors/throw-invalid","cljs.tools.reader.edn/read-keyword","reader","ns","name","cljs.core.keyword","cljs.tools.reader.impl.errors/throw-single-colon","cljs.tools.reader.edn/wrapping-reader","sym","cljs.core/List","cljs.tools.reader.edn/read-meta","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.core/map?","cljs.tools.reader.impl.errors/throw-bad-metadata","cljs.core/PROTOCOL_SENTINEL","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","cljs.tools.reader.impl.errors/throw-bad-metadata-target","cljs.tools.reader.edn/read-set","coll","the-set","cljs.tools.reader.edn/read-discard","G__47630","cljs.tools.reader.edn/read-namespaced-map","G__47631","cljs.tools.reader.impl.utils/second'","items","keys","cljs.tools.reader.impl.utils/namespace-keys","vals","cljs.core/rest","cljs.core/zipmap","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/read-symbolic-value","G__47634","js/Number.NaN","js/Number.NEGATIVE_INFINITY","js/Number.POSITIVE_INFINITY","cljs.tools.reader.impl.errors.reader_error","G__47636","cljs.tools.reader.impl.commons/read-comment","G__47641","cljs.tools.reader.impl.commons/throwing-reader","tag","object","cljs.core/Symbol","cljs.tools.reader.impl.errors/throw-bad-reader-tag","f","cljs.core.get","cljs.tools.reader/default-data-readers","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","G__47650","p__47657","map__47658","cljs.core/--destructure-map","cljs.tools.reader.edn.read","eof","eof-error?","cljs.core/contains?","e47659","cljs.tools.reader.impl.errors/throw-eof-error","cljs.tools.reader.impl.commons/number-literal?","res","e","cljs.tools.reader.impl.utils/ex-info?","cljs.core/ex-data","cljs.core.ex_info","cljs.tools.reader.reader-types/get-file-name","G__47673","cljs.tools.reader.edn/read-string","cljs.tools.reader.edn.read_string","cljs.core.not_EQ_","cljs.tools.reader.reader_types.string_push_back_reader"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second' char-code]]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch initch]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (do (when-not (nil? ch)\n                (unread rdr ch))\n              (str sb))\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append ch)) (read-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (read-tagged (doto rdr (unread ch)) ch opts))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (.charCodeAt \\uD7ff 0))\n(def ^:private ^:const lower-limit (.charCodeAt \\uE000 0))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr (.toString ic 16))\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (when-not (nil? ch)\n          (unread rdr ch))\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword (str \\: token)) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword (str \\: token))))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"],"x_google_ignoreList":[0]}