{"version":3,"sources":["re_datagrid/schema.cljs"],"mappings":"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","names":["re-datagrid.schema/GridRecord","schema.core/Any","re-datagrid.schema/GridValue","re-datagrid.schema/LoadingMessage","schema.core/Str","re-datagrid.schema/DataArrivedFunction","schema.core/make-fn-schema","re-datagrid.schema/DataFetchErrorFunction","re-datagrid.schema/GridConfiguration","schema.core/optional-key","schema.core/Bool","schema.core/Keyword","schema.core/Int","re-datagrid.schema/GridField","schema.core/Num"],"sourcesContent":["(ns re-datagrid.schema\n    (:require [reagent.core :as r]\n              [schema.core :as s\n               :include-macros true]\n              [taoensso.timbre :as timbre\n               :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                  logf tracef debugf infof warnf errorf fatalf reportf\n                                  spy get-env log-env)]))\n\n; ================ Prismatic Schema for various input maps ================ ;\n(def GridRecord\n \"A grid row, or record.\"\n  s/Any)\n\n(def GridValue\n \"Raw value of a grid\"\n  s/Any)\n\n(def LoadingMessage s/Str)\n\n\n(def DataArrivedFunction\n  (s/make-fn-schema\n    s/Any ;returns anything\n    [[[GridRecord]]])) ; should take a list of grid records\n\n(def DataFetchErrorFunction\n  (s/make-fn-schema\n    s/Any ;returns anything\n    [[s/Str]])) ; takes an error message\n\n(def GridConfiguration\n  \"A schema for the top-level configuration of the grid\"\n  {(s/optional-key :debug)                       s/Bool\n   (s/optional-key :title)                       s/Str\n   :grid-id                                      s/Keyword\n   ;; datapath in the db\n   (s/optional-key :data-path)                   [s/Keyword]\n   ;; callback that should return a class name to be added to the tr belonging to the passed in record\n   (s/optional-key :row-formatter)               s/Any\n   ;;if set to like 3, it shows 3 rows. There will be a button added to expand the table to show all.\n   (s/optional-key :show-max-num-rows)           s/Int\n   (s/optional-key :can-edit)                    s/Bool\n   (s/optional-key :can-edit-fn)                 s/Any\n   ;;loads more data if available after user scrolls to bottom or clicks the read more button\n   (s/optional-key :progressive-loading)         s/Bool\n   (s/optional-key :can-create)                  s/Bool\n   (s/optional-key :can-delete)                  s/Bool\n   (s/optional-key :default-sort-key)            s/Keyword\n   (s/optional-key :default-sort-direction)      s/Keyword\n   ;; fn that partitions the rows. It will add a CSS class on the start of each partition,\n   ;; with as class name the return value of partition-fn\n   (s/optional-key :partition-fn)                s/Any\n   (s/optional-key :can-reorder)                 s/Bool\n   (s/optional-key :can-reorder-fn-up)           s/Any\n   (s/optional-key :can-reorder-fn-down)         s/Any\n   (s/optional-key :on-record-click)             s/Any\n   (s/optional-key :can-sort)                    s/Bool\n   (s/optional-key :header-filters)              s/Bool\n   ;;a subscription that returns true if data is still loading, or false/nil if it doesn't\n   (s/optional-key :loading-subscription)        s/Any\n   ;; handler to implement reordering.\n   ;; NOTE: it's the handler's responsibility to do actual reordering, ie. swap records around!\n   ;; TODO: make a macro in the crud handlers that automatically generates this handler\n   (s/optional-key :reorder-dispatch)            s/Any\n   ;; this dispatch is called when the user clicks on a sort header.\n   ;; If you want to do extra side-effects, ie. fetch server data, you can do that here.\n   ;; It gets passed in field-name (ie. the key being sorted) and the new sort-direction\n   (s/optional-key :sort-dispatch)               s/Any\n   (s/optional-key :header-filter-dispatch)      s/Any\n   (s/optional-key :hide-heading)                s/Bool\n   ;;a component to use as an extra header row above the default one.\n   ;; if you want to use 'only' this one, use this in combination with :hide-heading\n   (s/optional-key :extra-header-row)            s/Any\n   (s/optional-key :delete-are-you-sure-message) s/Str\n   (s/optional-key :delete-are-you-sure-title)   s/Str\n   (s/optional-key :yes-text)                    s/Str\n   (s/optional-key :no-text)                     s/Str\n   (s/optional-key :no-records-text)             s/Any\n   ;;callback that provides row grained control wether to show a delete button.\n   ;;takes a record as input, should return true/false\n   (s/optional-key :can-delete-fn)               s/Any\n   :id-field                                     s/Keyword\n   (s/optional-key :default-values)              s/Any\n   ;;which url to PUT data to upon saving?\n   ;;which url to POST data to upon saving?\n   (s/optional-key :checkbox-select)             s/Bool\n   (s/optional-key :on-selection-change)         s/Any\n   ;;callback fn that gets set of all selected records as argumentlist\n   :data-subscription                            s/Any\n   (s/optional-key :create-dispatch)             s/Any\n   (s/optional-key :start-edit-dispatch)         s/Any\n   (s/optional-key :update-dispatch)             s/Any\n   (s/optional-key :delete-dispatch)             s/Any\n   (s/optional-key :additional-css-class-names)  s/Str ; additional css-class-names to be applied to the <table> tag.\n   })\n\n(def GridField\n  \"A schema for grid field configuration\"\n  {:name                                          s/Keyword\n   :title                                         s/Any\n   ;;list of validators, a validator should return [true nil] if valid\n   ;;and [false \"some error msg] if invalid\n   ;;the first validator to fail will return\n   (s/optional-key :on-click)                     s/Any\n   (s/optional-key :footer-cell)                  s/Any\n   (s/optional-key :validators)                   s/Any\n   (s/optional-key :align)                        s/Any\n   (s/optional-key :custom-element-renderer)      s/Any\n   (s/optional-key :custom-element-edit-renderer) s/Any\n   ;;click callback which gets passed in a record that was being clicked\n   (s/optional-key :custom-element-click)         s/Any\n   (s/optional-key :width)                        s/Num\n   (s/optional-key :placeholder)                  s/Any\n   (s/optional-key :hide-header-filter)           s/Bool\n   (s/optional-key :type)                         s/Any\n   ;; fn that takes grid id, and field\n   (s/optional-key :custom-header-filter)         s/Any\n   (s/optional-key :can-sort)                     s/Any\n   (s/optional-key :custom-filter-fn) s/Any ;; if you want custom filter logic, implement this callback, which looks like (fn [formatted-value-of-record query record])\n   (s/optional-key :sort-value-fn)                s/Any ; uses this as the sort-by argument, should be a fn like: (fn [val rec] ...)\n   (s/optional-key :formatter)                    (s/make-fn-schema ; should be a function\n                                                   s/Str ; should return a string\n                                        ; Input should conform as below.\n                                        ; (we have one vector in the vector here,\n                                        ; because the function is not multi-arity,\n                                        ; then it would need a vector to match for each arity, ie. [[..][..][..]])\n                                                   [[{GridValue GridRecord}]])\n   ;;for a future feature for exporting the current grid as it's displaying now, we want to allow this.\n   ;;we'll base it on SheetJS cljsjs package: https://github.com/cljsjs/packages/tree/master/xlsx\n   (s/optional-key :excel-formatter)              s/Any\n   })\n"]}