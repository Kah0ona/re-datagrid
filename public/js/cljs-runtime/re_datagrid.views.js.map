{"version":3,"sources":["re_datagrid/views.cljs"],"mappings":"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","names":["var_args","G__55643","re-datagrid.views/debounced","js/Error","re_datagrid.views.debounced","re-frame.core/dispatch","f","interval","cljs.core/ifn?","cljs.core/pos-int?","debouncer","js/goog.async.Debouncer","args","cljs.core/to-array","re-datagrid.views/debounced-dispatch","re-datagrid.views/clean-formatted-keys","r","cljs.core.into","cljs.core.remove","p__55644","vec__55645","cljs.core.nth","k","v","clojure.string/ends-with?","cljs.core/name","re-datagrid.views/is-checked?","pkey","record","selected-records","rs","cljs.core/keys","cljs.core/group-by","cljs.core/some","re-datagrid.views/cell-select-checkbox","id","options","re_frame.core.subscribe","record-selected?","cljs.core/deref","cljs.core.get","e","re-datagrid.views/are-you-sure-modal","or__5025__auto__","re-datagrid.views/create-button","re-datagrid.views/save-cell-button","pk","re-datagrid.views/delete-cell-button","re-datagrid.views/reorder-cell-button-up","callback","re-datagrid.views/reorder-cell-button-down","re-datagrid.views/edit-cell-button","js/re-datagrid","js/re-datagrid.views","js/re-datagrid.views.table-header-filter","method-table__5622__auto__","cljs.core.atom","prefer-table__5623__auto__","method-cache__5624__auto__","cached-hierarchy__5625__auto__","hierarchy__5626__auto__","fexpr__55648","cljs.core/MultiFn","cljs.core.symbol","re-datagrid.views/table-header-filter","field","p__55650","map__55651","cljs.core/--destructure-map","name","lv","reagent.core.atom","p__55652","map__55653","p1__55649#","cljs.core/reset!","G__55654","G__55655","p__55657","map__55658","p__55659","map__55660","p1__55656#","G__55661","G__55662","p__55663","map__55664","re-datagrid.views/table-header-cell","title","align","width","can-sort","hide-header-filter","custom-header-filter","cljs.core/not","atts","G__55665","cljs.core.assoc","header-filter-expanded?","sorting","p__55666","map__55667","sort-by-key","sort-direction","can-sort-global?","header-filters?","and__5023__auto__","cljs.core.not_EQ_","cljs.core._EQ_","re-datagrid.views/mass-select","data-sub","visible-records","checked?","re-datagrid.views/header-filter-toggle","re-datagrid.views/table-header","fields","cells","cljs.core.map","G__55668","cljs.core.concat","js/re-datagrid.views.edit-cell","fexpr__55669","re-datagrid.views/edit-cell","p__55670","map__55671","_","t","p1__55672#","G__55675","G__55676","G__55677","p1__55673#","G__55678","fexpr__55674","p1__55679#","G__55681","G__55682","fexpr__55680","p1__55683#","re-datagrid.views/create-row","re-datagrid.views/edit-row","cljs.core.doall","save-button","js/re-datagrid.views.table-cell","fexpr__55684","re-datagrid.views/table-cell","p__55685","map__55686","is-clickable?","fieldname","fmt-fieldname","cljs.core.keyword","value","fexpr__55687","formatter","formatted-value","G__55688","G__55689","G__55690","G__55691","p__55692","map__55693","re-datagrid.views/command-td","can-edit","can-edit-fn","can-reorder","can-reorder-fn-up","id-field","can-reorder-fn-down","can-delete","can-delete-fn","data-subscription","sorted-records","p__55694","map__55695","G__55696","G__55697","G__55698","G__55699","re-datagrid.views/non-edit-row","row-class","classNames","fexpr__55700","G__55701","cljs.core.update","c","G__55703","G__55704","G__55705","fexpr__55702","cljs.core/merge","G__55706","G__55707","re-datagrid.views/table-row","editing?","fexpr__55708","fexpr__55709","re-datagrid.views/build-partition-map","partition-fn","cljs.core.partition_by","cljs.core.reduce","p__55710","vec__55711","prev-idx","acc","partition","n","cljs.core/count","G__55714","cljs.core/first","cljs.core/last","re-datagrid.views/table-data","creating?","all-records","partition-map","rows","cljs.core.map_indexed","i","partition-value","fexpr__55715","max-rows","G__55716","cljs.core.conj","re-datagrid.views/table-footer","records","fexpr__55717","ufv55719","schema.utils/use-fn-validation","output-schema55718","schema.core/Any","input-schema55720","schema.core/one","input-checker55721","cljs.core/Delay","schema.core/checker","output-checker55722","ret__49219__auto__","validate__47236__auto__","args__47237__auto__","G__55723","G__55724","schema.core/fn-validator","G__55725","G__55726","G__55727","G__55728","G__55729","temp__5823__auto__","fexpr__55730","error__47238__auto__","cljs.core.ex_info","schema.utils.format_STAR_","cljs.core.pr_str","o__47239__auto__","G__55732","G__55733","G__55734","G__55735","G__55736","fexpr__55737","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","re-datagrid.views/datagrid","re-datagrid.schema/GridConfiguration","re-datagrid.schema/GridField","loading-sub","show-sure?","current-options","current-fields","expanded?","initialized?","loading?","colspan","G__55731","cljs.core/empty?","cljs.core.filter"],"sourcesContent":["(ns re-datagrid.views\n    (:require\n              [cljs.pprint :as pprint]\n              [re-datagrid.events]\n              [re-datagrid.schema :as ds]\n              [re-datagrid.local-db :as local-db]\n              [re-datagrid.subs]\n              [re-frame.core :as rf]\n              [reagent.core :as r]\n              [schema.core :as s\n               :include-macros true]\n              [taoensso.timbre :as timbre\n               :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                  logf tracef debugf infof warnf errorf fatalf reportf\n                                  spy get-env log-env)])\n    (:import\n     (goog.async Debouncer)))\n\n(defn debounced\n  \"Returns a function that applies args to function 'f' with debounce 'interval' milliseconds.\n  Usefull for dispatching events: `((debounced rf/dispatch) [:dispatch/event])`\"\n  ([] (debounced rf/dispatch 500))\n  ([f] (debounced f 500))\n  ([f interval]\n   (let [f          (if (ifn? f) f rf/dispatch)\n         interval   (if (pos-int? interval) interval 500)\n         debouncer  (Debouncer. f interval)]\n     (fn debounced* [& args]\n       (.apply (.-fire debouncer) debouncer (to-array args))))))\n\n(def debounced-dispatch (debounced))\n\n(defn clean-formatted-keys\n  [r]\n  (into {}\n        (remove\n         (fn [[k v]]\n           (clojure.string/ends-with? (name k) \"-formatted\" ))\n         r)))\n\n(defn is-checked?\n  [pkey record selected-records]\n  (let [rs (keys (group-by pkey selected-records))]\n    (some #{(pkey record)} rs)))\n\n(defn cell-select-checkbox\n  [id record]\n  (let [options          (rf/subscribe [:datagrid/options id])\n        record-selected? (rf/subscribe [:datagrid/record-selected? id record])]\n    (fn [id record]\n      (let [pkey (:id-field @options)]\n        [:td.check {:key (str \"checkbox_\" (get record pkey))}\n         [:div.checkbox\n          [:label\n           [:input {:type      :checkbox\n                    :checked   (if @record-selected? true false)\n                    :on-click  (fn [^js e] (.stopPropagation e))\n                    :on-change (fn [e]\n                                  (rf/dispatch [:datagrid/toggle-checkbox id record]))}]\n           [:i.input-helper]]]]))))\n\n(defn are-you-sure-modal\n  [id]\n  (let [options (rf/subscribe [:datagrid/options id])]\n    (fn [id]\n      [:div\n       [:div.sweet-overlay.are-you-sure {:style {:display :block}}]\n       [:div.sweet-alert.showSweetAlert.visible\n        {:style {:display :block} }\n        [:div.icon.warning.pulseWarning\n         [:span.body.pulseWarningIns]\n         [:span.dot.pulseWarningIns]]\n        [:h2 (:delete-are-you-sure-title @options)]\n        [:p.lead.text-muted (:delete-are-you-sure-message @options)]\n        [:p\n         [:button.btn.cancel.btn-lg.btn-default\n          {:on-click #(rf/dispatch [:datagrid/show-are-you-sure-popup id false])}\n          (or (:no-text @options) \"Nee\")]\n         [:button.btn.btn-lg.confirm.btn-warning\n          {:on-click #(rf/dispatch [:datagrid/delete-record id])}\n          (or (:yes-text @options) \"Ja\")]]]])))\n\n(defn create-button\n  [id]\n  (fn [id]\n    [:button.btn.btn-xs.btn-primary.waves-effect.waves-circle.waves-float\n     {:on-click #(rf/dispatch [:datagrid/create-new-record id])}\n     [:i.zmdi.zmdi-plus]]))\n\n(defn save-cell-button\n  [id pk]\n  [:td.commands {:key \"SAVECELLBUTTON\" :className \"save\"}\n   [:button.btn.btn-xs.bgm-teal.waves-effect.waves-circle.waves-float\n    {:on-click #(rf/dispatch [:datagrid/save-edited-record id pk])}\n    [:i.zmdi.zmdi-check]]])\n\n(defn delete-cell-button\n  [id record]\n  (let []\n    (fn [id record]\n      [:span {:key \"DELETE\" :className \"delete\"}\n       [:button.btn.btn-xs.btn-danger.waves-effect.waves-circle.waves-float\n        {:on-click (fn [^js e]\n                     (.stopPropagation e)\n                     (rf/dispatch [:datagrid/delete-record-maybe id record]))}\n        [:i.zmdi.zmdi-close]]])))\n\n(defn reorder-cell-button-up\n  [callback]\n  [:span {:key \"REORDER\" :className \"reorder reorder-up\"}\n   [:button.btn.btn-xs.bgm-gray.waves-effect.waves-circle.waves-float\n    {:on-click callback}\n    [:i.zmdi.zmdi-long-arrow-up]]])\n\n(defn reorder-cell-button-down\n  [callback]\n  [:span {:key \"REORDER\" :className \"reorder reorder-down\"}\n   [:button.btn.btn-xs.bgm-gray.waves-effect.waves-circle.waves-float\n    {:on-click callback}\n    [:i.zmdi.zmdi-long-arrow-down]]])\n\n(defn edit-cell-button\n  \"Starts editing the row\"\n  [id pk record]\n  [:span {:key \"EDITING\" :className \"edit\"}\n    [:button.btn.btn-xs.btn-info.waves-effect.waves-circle.waves-float\n     {:on-click #(rf/dispatch [:datagrid/start-edit id pk (clean-formatted-keys record)])}\n     [:i.zmdi.zmdi-edit]]])\n\n(defmulti table-header-filter (fn [id field]\n                                (:type field)))\n\n\n(defmethod table-header-filter :default\n  [id {:keys [name] :as field}]\n  (let [v (rf/subscribe [:datagrid/header-filter-value id name])\n        lv (r/atom @v)]\n    (fn [id {:keys [name] :as field}]\n      [:div.table-header-filter.m-b-10\n       [:input.form-control\n        {:value       (or @lv \"\")\n         :placeholder \"Filter...\"\n         :on-change   #(do\n                         (reset! lv (-> % .-target .-value))\n                         (debounced-dispatch [:datagrid/header-filter-value id name @lv]))\n         :on-blur     #(debounced-dispatch [:datagrid/header-filter-value id name @lv true])\n         :type        :text}]])))\n\n(defmethod table-header-filter :number\n  [id {:keys [name] :as field}]\n  (let [v (rf/subscribe [:datagrid/header-filter-value id name])\n        lv (r/atom @v)]\n    (fn [id {:keys [name] :as field}]\n      [:div.table-header-filter.m-b-10\n       [:input.form-control\n        {:value       (or @lv \"\")\n         :placeholder \"Filter...\"\n         :on-change   #(do\n                         (reset! lv (-> % .-target .-value))\n                         (debounced-dispatch [:datagrid/header-filter-value id name @lv]))\n         :on-blur     #(debounced-dispatch [:datagrid/header-filter-value id name @lv true])\n         :type        :number}]])))\n\n(defn table-header-cell\n  [id {:keys [title align width can-sort hide-header-filter custom-header-filter] :as field}]\n  (let [align                   (if-not align :text-left align)\n        atts                    (cond-> {:className align\n                                         :key (name (:name field))}\n                                  width\n                                  (assoc :style {:width width}))\n        header-filter-expanded? (rf/subscribe [:datagrid/header-filter-expanded? id])\n        sorting                 (rf/subscribe [:datagrid/sorting id])\n        options                 (rf/subscribe [:datagrid/options id])]\n    (fn [id {:keys [title align width can-sort] :as field}]\n      (let [sort-by-key      (:key @sorting)\n            sort-direction   (:direction @sorting)\n            can-sort-global? (:can-sort @options)\n            header-filter-expanded? @header-filter-expanded?\n            header-filters?  (:header-filters @options)]\n        [:th atts\n\n         (if (and can-sort-global?\n                  (not= false can-sort))\n           [:a.column-header-anchor\n\n            [:span.text.m-r-5\n             {:style    {:cursor :pointer}\n              :on-click #(rf/dispatch [:datagrid/sort-field id (:name field)])}\n             title]\n            (cond\n              (and\n               (= (:name field) sort-by-key)\n               (= sort-direction :asc))  [:i.zmdi.zmdi-caret-up]\n              (and\n               (= (:name field) sort-by-key)\n               (= sort-direction :desc)) [:i.zmdi.zmdi-caret-down]\n\n              :otherwise\n              [:i {:style {:display :inline-block\n                           :width   \"5px\"\n                           :height  \"5px\"}}])]\n           ;;else\n           [:span\n            [:span.text.m-r-5 title]\n            (cond\n              (and\n               (= (:name field) sort-by-key)\n               (= sort-direction :asc))  [:i.zmdi.zmdi-caret-up]\n              (and\n               (= (:name field) sort-by-key)\n               (= sort-direction :desc)) [:i.zmdi.zmdi-caret-down]\n\n              :otherwise\n              [:i {:style {:display :inline-block\n                           :width   \"5px\"\n                           :height  \"5px\"}}])])\n\n         (when (and header-filters?\n                    header-filter-expanded?\n                    (or (nil? hide-header-filter)\n                        (not hide-header-filter))\n                    (not custom-header-filter))\n           [table-header-filter id field])\n         (when (and header-filters?\n                    header-filter-expanded?\n                    (or (nil? hide-header-filter)\n                        (not hide-header-filter))\n                    custom-header-filter)\n           (custom-header-filter id field))\n\n         (when (and header-filters?\n                    header-filter-expanded?\n                    hide-header-filter)\n           [:div.m-b-10 {:style {:height \"35px\"}} \" \"])]))))\n\n(defn mass-select\n  [id data-sub]\n  (let [visible-records (rf/subscribe [:datagrid/sorted-records id data-sub])\n        checked?        (rf/subscribe [:datagrid/mass-select-checked? id])]\n    (fn\n      [id data-sub]\n      [:div.checkbox\n       [:label\n        [:input {:type      :checkbox\n                 :checked   (if @checked? true false)\n                 :on-change #(rf/dispatch [:datagrid/toggle-mass-select id @visible-records])}]\n        [:i.input-helper]]])))\n\n(defn header-filter-toggle\n  [id]\n  [:button.btn.btn-xs.btn-default.waves-effect.waves-circle.waves-float\n   {:on-click #(rf/dispatch [:datagrid/header-filter-expanded? id])}\n   [:i.zmdi.zmdi-search]])\n\n(defn table-header\n  [id data-sub]\n  (let [fields           (rf/subscribe [:datagrid/fields id])\n        sorting          (rf/subscribe [:datagrid/sorting id])\n        options          (rf/subscribe [:datagrid/options id])\n        selected-records (rf/subscribe [:datagrid/selected-record-pks id data-sub])]\n    (fn [id data-sub]\n      (let [cells (map (fn [f]\n                          ^{:key (:name f)}\n                          [table-header-cell id f]) @fields)\n            cells (cond->> cells\n                    (:checkbox-select @options)\n                    (concat [^{:key \"check\"}\n                             [:th.check\n                              {:key \"check\"}\n                              [mass-select id data-sub]]]))]\n        [:thead  {:key \"head\"}\n         (when (:extra-header-row @options)\n           (:extra-header-row @options))\n         (when-not (:hide-heading @options)\n           [:tr\n            (cond\n              (:can-create @options)\n              (concat cells [ ^{:key \"cmds\"}\n                             [:th.commands\n                              [:div.commands-inner\n                               [create-button id]\n                               (when (:header-filters @options)\n                                 [header-filter-toggle id])]]])\n\n              (or (:header-filters @options)\n                  (:can-delete @options))\n              (concat cells [ ^{:key \"cmds2\"}\n                             [:th.commands\n                              [:div.commands-inner\n                               (when (:header-filters @options)\n                                 [header-filter-toggle id])]]])\n              :else\n              cells)])]))))\n\n(defmulti edit-cell\n  (fn [_ {t :type} _]\n    (or t :string)))\n\n(defmethod edit-cell :number\n  [id field pk]\n  (let [r (rf/subscribe [:datagrid/edited-record-by-pk id pk])]\n    (fn [id field pk]\n      (let [v (get @r (:name field))]\n        [:td {:key       (:name field)\n              :className \"editing\"}\n         [:div.fg-line\n          [:input.form-control {:type      \"number\"\n                                :value     v\n                                :on-change #(rf/dispatch [:datagrid/update-edited-record id pk\n                                                          (:name field) (.-target.value ^js %)])}]]]))))\n\n(defmethod edit-cell :custom\n  [id field pk]\n  (let [r (rf/subscribe [:datagrid/edited-record-by-pk id pk])]\n    (fn [id field pk]\n      (let [v (get @r (:name field))]\n        [:td {:key (:name field)\n              :className \"editing\"}\n         ((:custom-element-edit-renderer field) field @r\n          #(rf/dispatch [:datagrid/update-edited-record id pk (:name field) %]) v)]))))\n\n(defmethod edit-cell :yesno\n  [id field pk]\n  (let [r (rf/subscribe [:datagrid/edited-record-by-pk id pk])]\n    (fn [id field pk]\n      (let [v (get @r (:name field))]\n        [:td {:key       (:name field)\n              :className \"editing\"}\n         [:div.fg-line\n          [:div.select\n           [:select.form-control\n            {:value     (if v \"true\" \"false\")\n             :on-change #(rf/dispatch [:datagrid/update-edited-record id pk\n                                      (:name field) (= \"true\" (.-target.value ^js %))])}\n            [:option {:value \"true\"}  \"ja\"]\n            [:option {:value \"false\"} \"nee\"]]]]]))))\n\n(defmethod edit-cell :no-edit\n  [id field pk]\n  (let [r (rf/subscribe [:datagrid/edited-record-by-pk id pk])]\n    (fn [id field pk]\n      (let [v (get @r (:name field))]\n        [:td {:key       (:name field)\n              :className \"editing\"}\n         (if (:formatter field)\n           ((:formatter field) v @r)\n           v)]))))\n\n\n(defmethod edit-cell :default\n  [id field pk]\n  (let [r (rf/subscribe [:datagrid/edited-record-by-pk id pk])]\n    (fn [id field pk]\n      (let [v (get @r (:name field))]\n        [:td {:key       (:name field)\n              :className \"editing\"}\n         [:div.fg-line\n          [:input.form-control {:type      \"text\"\n                                :value     v\n                                :on-change #(rf/dispatch [:datagrid/update-edited-record id pk\n                                                          (:name field) (.-target.value ^js %)])}]]]))))\n\n(defn create-row\n  [id]\n  (let []\n    (fn [id]\n      [:div \"TODO\"]\n      )))\n\n(defn edit-row\n  \"shows a row with inline editing elements\"\n  [id pk]\n  (let [fields (rf/subscribe [:datagrid/fields id])]\n    (fn [id pk]\n      (let [cells       (doall\n                         (map (fn [f]\n                                ^{:key (:name f)}\n                                [edit-cell id f pk]) @fields))\n            save-button ^{:key (or pk -1)} [save-cell-button id pk]]\n        [:tr.editing {:key pk} (concat cells [save-button])]))))\n\n\n(defmulti table-cell\n  (fn [_ {t :type} _]\n    (or t :string)))\n\n(defmethod table-cell :custom\n  [id field record]\n  (let [is-clickable? (not (nil? (:on-click field)))\n        fieldname     (:name field)\n        fmt-fieldname (-> field :name name (str \"-formatted\") keyword)\n        value         (or\n                       (get record fmt-fieldname)\n                       (get record fieldname))\n        align         (if (nil? (:align field)) :text-left (:align field))]\n    [:td {:key (:name field) :className align}\n     [:span {:on-click #((:custom-element-click field) record)}\n      [(:custom-element-renderer field) record]]]))\n\n(defmethod table-cell :default\n  [id field record]\n  (let [options (rf/subscribe [:datagrid/options id])]\n    (fn [id field record]\n      (let [is-clickable?   (not (nil? (:on-click field)))\n            formatter       (:formatter field)\n            fieldname       (:name field)\n            fmt-fieldname   (-> field :name name (str \"-formatted\") keyword)\n            formatted-value (or\n                             (get record fmt-fieldname)\n                             (get record fieldname))\n            align           (if (nil? (:align field)) :text-left (:align field))\n            formatted-value (if is-clickable?\n                              [:a.table-link {:on-click\n                                              (fn [^js e]\n                                                (.stopPropagation e)\n                                                (let [f (:on-click field)]\n                                                  (f (clean-formatted-keys record)\n                                                     field e\n                                                     @options)))}\n                               formatted-value]\n                              formatted-value)]\n        [:td {:key       fieldname\n              :className align}\n         formatted-value]))))\n\n(defn command-td\n  [id\n   {:keys [can-edit can-edit-fn can-reorder can-reorder-fn-up\n           id-field can-reorder-fn-down can-delete can-delete-fn data-subscription]\n    :as   options}\n   record]\n  (let [sorted-records (rf/subscribe [:datagrid/sorted-records id data-subscription])]\n    (fn [id\n         {:keys [can-edit can-edit-fn can-reorder can-reorder-fn-up\n                 id-field can-reorder-fn-down can-delete can-delete-fn data-subscription]\n          :as   options}\n         record]\n      [:td.commands\n       [:div.commands-inner\n        (when\n            (and can-edit\n                 (or\n                  (nil? can-edit-fn)\n                  (and\n                   (not (nil? can-edit-fn))\n                   (can-edit-fn record))))\n          [edit-cell-button id (get record id-field) record])\n\n        (when (and can-reorder\n                   (or (nil? can-reorder-fn-up)\n                       (can-reorder-fn-up record @sorted-records)))\n          [reorder-cell-button-up #(rf/dispatch [:datagrid/reorder id :up (clean-formatted-keys record)])])\n\n        (when (and can-reorder\n                   (or (nil? can-reorder-fn-down)\n                       (can-reorder-fn-down record @sorted-records)))\n          [reorder-cell-button-down #(rf/dispatch [:datagrid/reorder id :down (clean-formatted-keys record)])])\n\n        (when\n            (and can-delete\n                 (or\n                  (nil? can-delete-fn)\n                  (and\n                   (not (nil? can-delete-fn))\n                   (can-delete-fn record))))\n          [delete-cell-button id record])]])))\n\n(defn non-edit-row\n  [id record row-class]\n  (let [options (rf/subscribe [:datagrid/options id])\n        fields  (rf/subscribe [:datagrid/fields id])]\n    (fn [id record row-class]\n      (let [pk (get record (:id-field @options))\n            k  (if (or (= \"\" pk) (nil? pk))\n                 \"editing\"\n                 pk)\n\n            classNames (if (:row-formatter @options)\n                         ((:row-formatter @options) record)\n                         \"\")\n\n            classNames (if (:show-max-num-rows @options)\n                         (str classNames \" \" \"expandable\")\n                         classNames)\n            atts       (cond-> {:key k :class classNames}\n                         ;;(:show-max-num-rows @options) (assoc :on-click (:expand-handler @options)))\n                         row-class (update :class (fn [c]\n                                                    (str c \" \" row-class)))\n                         false (assoc :on-click (:expand-handler @options)))\n\n            atts (if (:on-record-click @options)\n                   (-> atts\n                       (assoc :on-click #((:on-record-click @options) record @fields @options))\n                       (update :style merge {:cursor :pointer}))\n                   atts)\n            cells (cond->> (doall\n                            (map (fn [f]\n                                   ^{:key (:name f)}\n                                   [table-cell id f record]) @fields))\n                    (:checkbox-select @options)\n                    (concat [^{:key \"checkbox__\"}\n                             [cell-select-checkbox id record]]))]\n        [:tr atts\n         (cond-> cells\n           (or (:can-update @options) (:can-edit @options) (:can-delete @options))\n           (concat [^{:key \"commands\"}\n                    [command-td id @options record]]))]))))\n\n(defn table-row\n  [id record row-class]\n  (let [options  (rf/subscribe [:datagrid/options id])\n        editing? (rf/subscribe [:datagrid/editing-record? id record])]\n    (fn [id record row-class]\n      (if @editing?\n        ^{:key ((:id-field @options) record)}\n        [edit-row id (get record (:id-field @options)) row-class]\n\n        ^{:key ((:id-field @options) record)}\n        [non-edit-row id record row-class]))))\n\n(defn build-partition-map\n  [rs partition-fn]\n  (->> rs\n       (partition-by partition-fn)\n       (reduce\n        (fn [[prev-idx acc] partition]\n          (let [n (count partition)\n                v (partition-fn (first partition))\n                ]\n            [(+ prev-idx n) (assoc acc prev-idx v)]))\n        [0 {}])\n       last))\n\n(comment\n\n  (build-partition-map\n   [{:a 1}\n    {:a 1}\n    {:a 1}\n    {:a :x}\n    {:a :x}\n    {:a 2}\n    {:a 2}]\n   :a)\n;; => {0 1, 3 :x, 5 2}\n\n  )\n\n(defn table-data\n  [id data-sub]\n  (let [options         (rf/subscribe [:datagrid/options id])\n        fields          (rf/subscribe [:datagrid/fields id])\n        creating?       (rf/subscribe [:datagrid/creating? id])\n        all-records     (rf/subscribe [:datagrid/records data-sub])\n        visible-records (rf/subscribe [:datagrid/sorted-records id data-sub])]\n    (fn [id data-sub]\n      (let [partition-fn (:partition-fn @options)\n            rs           @visible-records\n            ;;row-idx -> result val, where only the first row of partition returns something\n            partition-map (when partition-fn\n                            (build-partition-map rs partition-fn))\n            rows         (doall\n                          (map-indexed (fn [i r]\n                                         (let [partition-value (get partition-map i)]\n                                           ^{:key ((:id-field @options) r)}\n                                           [table-row id r partition-value]))\n                                       rs))\n            max-rows     (:show-max-num-rows @options)]\n        [:tbody {:key \"body\"}\n         (cond-> rows\n           @creating? (conj ^{:key -9}\n                            [edit-row id nil]))]))))\n\n(defn table-footer\n  [id fields records]\n  (let []\n    [:tfoot\n     [:tr\n      (doall\n       (map-indexed\n        (fn [i f]\n          ^{:key i}\n          [:td\n           (when (:footer-cell f)\n             ((:footer-cell f) records))])\n        fields))]]))\n\n(s/defn ^:always-validate datagrid\n  \"Creates a datagrid\"\n  [options :- ds/GridConfiguration\n   fields  :- [ds/GridField]]\n  (let [id              (:grid-id options)\n        data-sub        (:data-subscription options)\n        loading-sub     (:loading-subscription options)\n        creating?       (rf/subscribe [:datagrid/creating? id])\n        show-sure?      (rf/subscribe [:datagrid/show-sure? id])\n        ;; we do this aliassing, since we have 'sorted-records' depend on this one\n        records         (rf/subscribe [:datagrid/records data-sub])\n        current-options (rf/subscribe [:datagrid/options id])\n        current-fields  (rf/subscribe [:datagrid/fields id])\n        expanded?       (rf/subscribe [:datagrid/expanded? id])\n        initialized?    (rf/subscribe [:datagrid/initialized? id])\n        loading?        (rf/subscribe [:datagrid/loading? loading-sub])]\n    (fn [options fields]\n      (if-not @initialized?\n        (do (rf/dispatch [:datagrid/initialize options fields])\n            [:div.p-30\n             {:style {:text-align :center}}\n             [:div.preloader.pl-xl\n              [:svg.pl-circular\n               {:viewBox \"25 25 50 50\"}\n               [:circle.plc-path {:r \"20\", :cy \"50\", :cx \"50\"}]]]])\n        ;;else\n        (let [colspan (cond-> (count fields)\n                        (:checkbox-select options) inc)]\n          (when (not= options @current-options)\n            (rf/dispatch [:datagrid/update-options id options]))\n          (when (not= fields @current-fields)\n            (rf/dispatch [:datagrid/update-fields id fields]))\n          [:div\n           (when @show-sure?\n             [are-you-sure-modal id])\n           [:div.table-responsive\n            [:table.table.bootgrid-table\n             {:class (str (name id) \" \" (:additional-css-class-names options))}\n             (when-not (and (:hide-heading options)\n                            (not (:extra-header-row options)))\n               [table-header id data-sub])\n             (when-not (empty?\n                        (filter (fn [f]\n                                  (not (nil? (:footer-cell f)))) fields))\n               [table-footer id fields @records])\n             (cond\n               @loading?\n               [:tbody\n                [:tr\n                 [:td {:col-span (+ (count fields) 2)}\n                  [:div.p-30\n                   {:style {:text-align :center}}\n                   [:div.preloader.pl-xl\n                    [:svg.pl-circular\n                     {:viewBox \"25 25 50 50\"}\n                     [:circle.plc-path {:r \"20\", :cy \"50\", :cx \"50\"}]]]]]]]\n\n               (and (empty? @records) (not @creating?))\n               [:tbody\n                [:tr\n                 [:td.nodata {:style   {:padding-top \"20px\"}\n                              :col-span colspan}\n                  [:i (or (:no-records-text options) \"Geen gegevens gevonden.\")]]]]\n\n               :otherwise\n               [table-data id (:data-subscription options)])]\n            (when (:progressive-loading options)\n              [:div.re-datagrid-read-more-marker])\n\n            (when (and (:show-max-num-rows options)\n                       (not @expanded?)\n                       (> (count @records) (:show-max-num-rows options)))\n              [:div.re-datagrid-button-container\n               [:button.btn.btn-primary.btn-read-more\n                {:on-click #(rf/dispatch [:datagrid/toggle-expand id])} \"Toon meer\"]])\n\n            (when (and\n                   (:show-max-num-rows options)\n                   @expanded?\n                   (> (count @records) (:show-max-num-rows options)))\n              [:div.re-datagrid-button-container\n               [:button.btn.btn-primary.btn-read-less\n                {:on-click #(rf/dispatch [:datagrid/toggle-expand id])} \"Toon minder\"]])]])))))\n"]}