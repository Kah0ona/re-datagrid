{"version":3,"sources":["schema/spec/variant.cljc"],"mappings":"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","names":["schema.spec.variant/option-step","o","params","else","g","c","schema.spec.core/sub-checker","step","x","guard-result","e47517","js/Object","e#","cljs.core._EQ_","schema.utils/error","schema.utils/make-ValidationError","cljs.core/Delay","cljs.core/List","cljs.core.symbol","schema.utils/fn-name","schema.utils/value-name","temp__5821__auto__","wrap-error","res","e","schema.utils/error-val","this__5323__auto__","k__5324__auto__","this__5325__auto__","k47531","else__5326__auto__","G__47543","cljs.core/Keyword","pre","options","err-f","post","cljs.core.get","__extmap","this__5343__auto__","f__5344__auto__","init__5345__auto__","cljs.core.reduce","ret__5346__auto__","p__47553","vec__47554","k__5347__auto__","cljs.core.nth","v__5348__auto__","cljs.core/PROTOCOL_SENTINEL","this__5338__auto__","writer__5339__auto__","opts__5340__auto__","pr-pair__5341__auto__","keyval__5342__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__47530","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5321__auto__","__meta","this__5318__auto__","__hash","this__5327__auto__","cljs.core/count","this__5319__auto__","h__5134__auto__","coll__5320__auto__","cljs.core/hash-unordered-coll","this47532","other47533","this__5333__auto__","k__5334__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5330__auto__","G__47565","this__5331__auto__","k__5332__auto__","pred__47566","cljs.core/keyword-identical?","expr__47567","cljs.core.assoc","this__5336__auto__","cljs.core/seq","cljs.core/MapEntry","this__5322__auto__","this__5328__auto__","entry__5329__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","schema.spec.variant/VariantSpec","this__5369__auto__","writer__5370__auto__","cljs.core/-write","G__47539","extmap__5365__auto__","G__47576","cljs.core/record?","schema.spec.variant/->VariantSpec","schema.spec.variant/map->VariantSpec","this","cljs.core.map","t","f","G__47557","cljs.core/reverse","or__5025__auto__","v","schema.utils/error?","G__47558","var_args","G__47583","schema.spec.variant/variant-spec","js/Error","schema.spec.variant.variant_spec","schema.utils/format*","cljs.core/last"],"sourcesContent":["(ns schema.spec.variant\n  (:require\n   #?(:clj [schema.macros :as macros])\n   [schema.utils :as utils]\n   [schema.spec.core :as spec])\n  #?(:cljs (:require-macros [schema.macros :as macros])))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Variant Specs\n\n(defn- option-step [o params else]\n  (let [g (:guard o)\n        c (spec/sub-checker o params)\n        step (if g\n               (fn [x]\n                 (let [guard-result (macros/try-catchall\n                                     (g x)\n                                     (catch e# ::exception))]\n                   (cond (= ::exception guard-result)\n                         (macros/validation-error\n                          (:schema o)\n                          x\n                          (list (symbol (utils/fn-name g)) (utils/value-name x))\n                          'throws?)\n\n                         guard-result\n                         (c x)\n\n                         :else\n                         (else x))))\n               c)]\n    (if-let [wrap-error (:wrap-error o)]\n      (fn [x]\n        (let [res (step x)]\n          (if-let [e (utils/error-val res)]\n            (utils/error (wrap-error e))\n            res)))\n      step)))\n\n(defrecord VariantSpec [pre options err-f post]\n  spec/CoreSpec\n  (subschemas [this] (map :schema options))\n  (checker [this params]\n    (let [t (reduce\n             (fn [f o]\n               (option-step o params f))\n             (fn [x] (macros/validation-error this x (err-f (utils/value-name x))))\n             (reverse options))]\n      (if post\n        (fn [x]\n          (or (pre x)\n              (let [v (t x)]\n                (if (utils/error? v)\n                  v\n                  (or (post (if (:return-walked? params) v x)) v)))))\n        (fn [x]\n          (or (pre x)\n              (t x)))))))\n\n(defn variant-spec\n  \"A variant spec represents a choice between a set of alternative\n   subschemas, e.g., a tagged union. It has an overall precondition,\n   set of options, and error function.\n\n   The semantics of `options` is that the options are processed in\n   order. During checking, the datum must match the schema for the\n   first option for which `guard` passes. During generation, any datum\n   generated from an option will pass the corresponding `guard`.\n\n   err-f is a function to produce an error message if none\n   of the guards match (and must be passed unless the last option has no\n   guard).\"\n  ([pre options]\n     (variant-spec pre options nil))\n  ([pre options err-f]\n     (variant-spec pre options err-f nil))\n  ([pre ;- spec/Precondition\n    options ;- [{:schema (s/protocol Schema)\n    ;;           (s/optional-key :guard) (s/pred fn?)\n    ;;           (s/optional-key :error-wrap) (s/pred fn?)}]\n    err-f ;- (s/pred fn?)\n    post ;- (s/maybe spec/Precondition)\n    ]\n     (macros/assert! (or err-f (nil? (:guard (last options))))\n                     \"when last option has a guard, err-f must be provided\")\n     (->VariantSpec pre options err-f post)))\n"],"x_google_ignoreList":[0]}