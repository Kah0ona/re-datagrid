{"version":3,"sources":["reagent/dom/client.cljs"],"mappings":";;;;;;AASA;;;iCAAA,jCAAMA,0EAEHC;AAFH,AAGE,OAACC,gDAA4BD;;AAE/B;;;6BAAA,7BAAME,kEAEHC;AAFH,AAGE,OAAUA;;AAEZ,kCAAA,lCAAOC,4EAAkBC;AAAzB,AAGE,IAAMC,KAAG,wDAAA,xDAACC,+CAASF;AAAnB,AACE,AAACG,0CAAgB;AAAA,AACE,IAAAC,4CAAUE;IAAVD,4CAAA;AAAA,AAAA,+CAAAA,9CAAUC;;AAAV,IAAA,AACE,AAACC;;AACDC;UAFF,AAAA,+CAAAJ,9CAAUE;;;AAG7B,IAAAG,4CAAUH;IAAVI,4CAAA;AAAA,AAAA,+CAAAA,9CAAUJ;;AAAV,IAAA,AACE,QAACL,mCAAAA,qCAAAA;UADH,AAAA,+CAAAQ,9CAAUH;;AAGd,AAAA;;;;4BAAA,oCAAAK,hEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMD,qEAGFf,KAAKG;AAHT,AAIG,OAACc,wDAAOjB,KAAKG,GAAGe;;;AAJnB,CAAA,0DAAA,1DAAMH,qEAKFf,KAAKG,GAAGgB;AALZ,AAMG,IAGMC,OAAK;AAAA,AAAO,OAACC,kCAAaF,SAAShB;;AAHzC,AAIE,OAASH,YAAK,8EAAA,9EAACsB,8CAAoBrB,0CAAwBmB;;;AAVhE,CAAA,oDAAA,pDAAML;;AAAN,AAYA,AAAA,kCAAA,0CAAAF,5EAAMW;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAR,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gEAAA,hEAAMQ,2EACF3B,UAAUM;AADd,AAEG,kFAAA,3EAAC0B,8DAAahC,UAAUM;;;AAF3B,CAAA,gEAAA,wBAAAsB,xFAAMD,2EAGF3B,UAAUM;AAHd,AAAA,IAAAuB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAGyBP,mIACOD;2BAJhC,AAAAU,4CAAAF,eAAA,lFAGkCI;wBAHlC,AAAAF,4CAAAF,eAAA,/EAGuDK;AAHvD,AAKG,IAAMX,OAAK;AAAA,AAAO,OAACC,kCAAaF,SAAShB;;AAAzC,AACE,OAAC6B,iDAA6BnC,UAAU,8EAAA,9EAACyB,8CAAoBrB,0CAAwBmB;;;AAN1F,CAAA,0DAAA,1DAAMI;;AAAN","names":["reagent.dom.client/create-root","container","js/module$node_modules$react_dom$client.createRoot","reagent.dom.client/unmount","root","reagent.dom.client/reagent-root","js-props","el","reagent.dom.client.goog$module$goog$object.get","js/module$node_modules$react$index.useEffect","*always-update*-orig-val__51785","*always-update*-temp-val__51786","reagent.impl.util/*always-update*","reagent.impl.batching/flush-after-render","js/undefined","*always-update*-orig-val__51787","*always-update*-temp-val__51788","var_args","G__51790","reagent.dom.client/render","js/Error","reagent.dom.client.render","reagent.impl.template/*current-default-compiler*","compiler","comp","reagent.impl.protocols/as-element","js/module$node_modules$react$index.createElement","G__51792","reagent.dom.client/hydrate-root","p__51793","map__51794","cljs.core/--destructure-map","cljs.core.get","reagent.dom.client.hydrate_root","on-recoverable-error","identifier-prefix","js/module$node_modules$react_dom$client.hydrateRoot"],"sourcesContent":["(ns reagent.dom.client\n  (:require [\"react\" :as react]\n            [\"react-dom/client\" :as react-dom-client]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.util :as util]\n            [goog.object :as gobj]))\n\n(defn create-root\n  \"Create a React Root connected to given container DOM element.\"\n  [container]\n  (react-dom-client/createRoot container))\n\n(defn unmount\n  \"Unmount the given React Root\"\n  [root]\n  (.unmount root))\n\n(defn- reagent-root [^js js-props]\n  ;; This will flush initial r/after-render callbacks.\n  ;; Later that queue will be flushed on Reagent render-loop.\n  (let [el (gobj/get js-props \"comp\")]\n    (react/useEffect (fn []\n                       (binding [util/*always-update* false]\n                         (batch/flush-after-render)\n                         js/undefined)))\n    (binding [util/*always-update* true]\n      (el))))\n\n(defn render\n  \"Render the given Reagent element (i.e. Hiccup data)\n  into a given React root.\"\n  ([root el]\n   (render root el tmpl/*current-default-compiler*))\n  ([root el compiler]\n   (let [;; Not sure if this should be fn here?\n         ;; At least this moves the as-element call to the reagent-root\n         ;; render, and handles the *always-update* binding correctly?\n         comp (fn [] (p/as-element compiler el))]\n     (.render root (react/createElement reagent-root #js {:comp comp})))))\n\n(defn hydrate-root\n  ([container el]\n   (hydrate-root container el nil))\n  ([container el {:keys [compiler on-recoverable-error identifier-prefix]\n                  :or {compiler tmpl/*current-default-compiler*}}]\n   (let [comp (fn [] (p/as-element compiler el))]\n     (react-dom-client/hydrateRoot container (react/createElement reagent-root #js {:comp comp})))))\n"],"x_google_ignoreList":[0]}