{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["this__5310__auto__","writer__5311__auto__","opt__5312__auto__","cljs.core/-write","reagent.impl.template/UnsafeHTML","reagent.impl.template/->UnsafeHTML","s","reagent.impl.template/re-tag","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template.goog$module$goog$object.get","reagent.impl.template/cached-prop-name","temp__5825__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","reagent.impl.template.goog$module$goog$object.set","reagent.impl.template/kv-conv","G__44064","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__44072","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__44077","cljs.core.assoc","reagent.impl.util.class_names","or__5025__auto__","reagent.impl.template/convert-props","G__44079","js-props","temp__5823__auto__","d","and__5023__auto__","reagent.impl.template/make-element","this","argv","component","jsprops","first-child","G__44085","cljs.core/count","js/module$node_modules$react$index.createElement","reagent.impl.protocols/as-element","cljs.core.nth","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__44102","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_","reagent.impl.template/reag-element","compiler","reagent.impl.component/as-class","temp__5827__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/function-element","first-arg","cljs.core.subvec","reagent.impl.component/functional-render-fn","reagent.impl.template/maybe-function-element","reagent.impl.component/react-class?","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/module$node_modules$react$index.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","_","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","react-key","reagent.impl.util/get-react-key","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","reagent.impl.template/raw-element","comp","reagent.impl.template/expand-seq","cljs.core.into_array","p1__44120#","cljs.core.map","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__44121","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err","reagent.impl.template/hiccup-element","n","pos","G__44128","reagent.impl.protocols/parse-tag","cljs.core._EQ_","cljs.core.subs","reagent.impl.template/vec-to-elem","fn-to-element","js/console.error","cljs.core.pr_str","G__44133","cljs.core/Keyword","reagent.impl.template/as-element","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym","parse-fn","cljs.core.get","reagent.impl.template/t_reagent$impl$template44145","tag-name","tag-value","reagent.impl.template/class-compiler","reagent.impl.template/*current-default-compiler*","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n(deftype UnsafeHTML [s])\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))\n        ^js js-props (if (.-custom id-class)\n                       (convert-custom-prop-value props)\n                       (convert-prop-value props))]\n    ;; Ensure only tagged values are used for dangerouslySetInnerHTML\n    (when-let [d (and js-props (.-dangerouslySetInnerHTML js-props))]\n      (if (instance? UnsafeHTML d)\n        (set! (.-dangerouslySetInnerHTML js-props) #js {:__html (.-s d)})\n        (js-delete js-props \"dangerouslySetInnerHTML\")))\n    js-props))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element [this argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n                           (p/as-element this (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                          (.push a (p/as-element this v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn function-element [tag v first-arg compiler]\n  (let [jsprops #js {}]\n    (set! (.-reagentRender jsprops) tag)\n    (set! (.-argv jsprops) (subvec v first-arg))\n    ; (set! (.-opts jsprops) opts)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement (comp/functional-render-fn compiler tag) jsprops)))\n\n(defn maybe-function-element\n  \"If given tag is a Class, use it as a class,\n  else wrap in Reagent function wrapper.\"\n  [tag v compiler]\n  (if (comp/react-class? tag)\n    (reag-element tag v compiler)\n    (function-element tag v 1 compiler)))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [this x _]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n;; This is used for html elements (:h1, :input) and also React component with :>/adapt-react-class\n(defn native-element [parsed argv first ^p/Compiler compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [;; Also read :key from props map, because\n            ;; input wrapper will not place the key in useful place.\n            react-key (util/get-react-key props)\n            input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (p/as-element\n          compiler\n          (with-meta [input-class argv component jsprops first-child compiler]\n                     (merge (when react-key\n                              {:key react-key})\n                            (meta argv)))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn raw-element [comp argv compiler]\n  (let [props (nth argv 2 nil)\n        jsprops (or props #js {})]\n    ;; If we have key attached to vector metadata, copy that to the\n    ;; jsprops.\n    ;; Often the key is already on the jsprops.\n    (when-some [key (-> (meta argv) util/get-react-key)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv comp jsprops 3)))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (p/parse-tag compiler n tag) v 1 compiler)\n      0 (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler fn-to-element]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (case tag\n      :> (native-element (->HiccupTag (nth v 1 nil) nil nil nil) v 2 compiler)\n      :r> (raw-element (nth v 1 nil) v compiler)\n      :f> (function-element (nth v 1 nil) v 2 compiler)\n      :<> (fragment-element v compiler)\n      (cond\n       (hiccup-tag? tag)\n       (hiccup-element v compiler)\n\n       (instance? NativeWrapper tag)\n       (native-element tag v 1 compiler)\n\n       :else (fn-to-element tag v compiler)))))\n\n(defn as-element [this x fn-to-element]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x this fn-to-element)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x this)\n                   (expand-seq x this))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym \"reagent-compiler\")\n        fn-to-element (if (:function-components opts)\n                        maybe-function-element\n                        reag-element)\n        parse-fn (get opts :parse-tag cached-parse)]\n\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (parse-tag [this tag-name tag-value]\n        (parse-fn this tag-name tag-value))\n      (as-element [this x]\n        (as-element this x fn-to-element))\n      (make-element [this argv component jsprops first-child]\n        (make-element this argv component jsprops first-child)))))\n\n(def class-compiler (create-compiler {}))\n(def ^:dynamic *current-default-compiler* class-compiler)\n\n(defn set-default-compiler! [compiler]\n  (set! *current-default-compiler* compiler))\n"],"x_google_ignoreList":[0]}