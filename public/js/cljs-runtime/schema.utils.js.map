{"version":3,"sources":["schema/utils.cljc"],"mappings":"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","names":["var_args","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","schema.utils/assoc-when","seq46695","G__46696","cljs.core/first","cljs.core/next","self__5734__auto__","m","kvs","js/Error","cljs.core/even?","cljs.core/count","cljs.core.into","or__5025__auto__","iter__5503__auto__","s__46740","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5501__auto__","size__5502__auto__","b__46742","cljs.core/chunk-buffer","i__46741","vec__46750","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46739","cljs.core/chunk-rest","vec__46757","cljs.core/cons","cljs.core/rest","k","v","cljs.core.partition","schema.utils/type-of","x","schema.utils/fn-schema-bearer","f","schema.utils/format*","seq46770","G__46771","fmt","args","cljs.core.apply","goog.string/format","schema.utils/max-value-length","cljs.core.atom","schema.utils/value-name","value","t","cljs.core/deref","cljs.core.symbol","schema.utils/fn-name","vec__46792","_","s","cljs.core/re-matches","cljs.core.pr_str","cljs.core._EQ_","cljs.core/demunge","cljs.core/re-find","schema.utils/record?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IRecord","this__5310__auto__","writer__5311__auto__","opt__5312__auto__","cljs.core/-write","schema.utils/ValidationError","schema.utils/->ValidationError","schema","expectation-delay","fail-explanation","this","writer","opts","cljs.core/-pr-writer","schema.utils/validation-error-explain","err","cljs.core/List","schema.utils/make-ValidationError","schema.utils/NamedError","schema.utils/->NamedError","name","error","schema.utils/named-error-explain","this__5323__auto__","k__5324__auto__","this__5325__auto__","k46835","else__5326__auto__","G__46849","cljs.core/Keyword","cljs.core.get","__extmap","this__5343__auto__","f__5344__auto__","init__5345__auto__","cljs.core.reduce","ret__5346__auto__","p__46852","vec__46853","k__5347__auto__","v__5348__auto__","this__5338__auto__","writer__5339__auto__","opts__5340__auto__","pr-pair__5341__auto__","keyval__5342__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__46834","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5321__auto__","__meta","this__5318__auto__","__hash","this__5327__auto__","this__5319__auto__","h__5134__auto__","coll__5320__auto__","cljs.core/hash-unordered-coll","this46836","other46837","this__5333__auto__","k__5334__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__5330__auto__","G__46914","this__5331__auto__","k__5332__auto__","pred__46925","cljs.core/keyword-identical?","expr__46926","cljs.core.assoc","this__5336__auto__","cljs.core/MapEntry","this__5322__auto__","this__5328__auto__","entry__5329__auto__","cljs.core/vector?","cljs.core/-conj","schema.utils/ErrorContainer","this__5369__auto__","writer__5370__auto__","G__46844","extmap__5365__auto__","G__46963","cljs.core/record?","schema.utils/->ErrorContainer","schema.utils/map->ErrorContainer","schema.utils/error","schema.utils/error?","schema.utils/error-val","schema.utils/declare-class-schema!","klass","schema.utils.goog$module$goog$object.set","schema.utils/class-schema","schema.utils.goog$module$goog$object.get","schema.utils/use-fn-validation","cljs.core/chunk-first"],"sourcesContent":["(ns schema.utils\n  \"Private utilities used in schema implementation.\"\n  (:refer-clojure :exclude [record?])\n  #?(:clj (:require [clojure.string :as string])\n     :cljs (:require\n             goog.string.format\n             [goog.object :as gobject]\n             [goog.string :as gstring]\n             [clojure.string :as string]))\n  #?(:cljs (:require-macros [schema.utils :refer [char-map]])))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Miscellaneous helpers\n\n(defn assoc-when\n  \"Like assoc but only assocs when value is truthy.  Copied from plumbing.core so that\n   schema need not depend on plumbing.\"\n  [m & kvs]\n  (assert (even? (count kvs)))\n  (into (or m {})\n        (for [[k v] (partition 2 kvs)\n              :when v]\n          [k v])))\n\n(defn type-of [x]\n  #?(:clj (class x)\n     :cljs (js* \"typeof ~{}\" x)))\n\n(defn fn-schema-bearer\n  \"What class can we associate the fn schema with? In Clojure use the class of the fn; in\n   cljs just use the fn itself.\"\n  [f]\n  #?(:bb f\n     :clj (class f)\n     :cljs f))\n\n(defn format* [fmt & args]\n  (apply #?(:clj format :cljs gstring/format) fmt args))\n\n(def max-value-length (atom 19))\n\n(defn value-name\n  \"Provide a descriptive short name for a value.\"\n  [value]\n  (let [t (type-of value)]\n    (if (<= (count (str value)) @max-value-length)\n      value\n      (symbol (str \"a-\" #?(:clj (.getName ^Class t) :cljs t))))))\n\n#?(:clj\n(defmacro char-map []\n  clojure.lang.Compiler/CHAR_MAP))\n\n#?(:clj\n(defn unmunge\n  \"TODO: eventually use built in demunge in latest cljs.\"\n  [s]\n  (->> (char-map)\n       (sort-by #(- (count (second %))))\n       (reduce (fn [^String s [to from]] (string/replace s from (str to))) s))))\n\n(defn fn-name\n  \"A meaningful name for a function that looks like its symbol, if applicable.\"\n  [f]\n  #?(:cljs\n     (let [[_ s] (re-matches #\"#object\\[(.*)\\]\" (pr-str f))]\n       (if (= \"Function\" s)\n         \"function\"\n         (->> s demunge (re-find #\"[^/]+(?:$|(?=/+$))\"))))\n     :clj (let [s (.getName (class f))\n                slash (.lastIndexOf s \"$\")\n                raw (unmunge\n                      (if (>= slash 0)\n                        (str (subs s 0 slash) \"/\" (subs s (inc slash)))\n                        s))]\n            (string/replace raw #\"^clojure.core/\" \"\"))))\n\n(defn record? [x]\n  #?(:clj (instance? clojure.lang.IRecord x)\n     :cljs (satisfies? IRecord x)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Error descriptions\n\n;; A leaf schema validation error, describing the schema and value and why it failed to\n;; match the schema.  In Clojure, prints like a form describing the failure that would\n;; return true.\n\n(declare validation-error-explain)\n\n(deftype ValidationError [schema value expectation-delay fail-explanation]\n  #?(:cljs IPrintWithWriter)\n  #?(:cljs (-pr-writer [this writer opts]\n             (-pr-writer (validation-error-explain this) writer opts))))\n\n(defn validation-error-explain [^ValidationError err]\n  (list (or (.-fail-explanation err) 'not) @(.-expectation-delay err)))\n\n#?(:clj ;; Validation errors print like forms that would return false\n(defmethod print-method ValidationError [err writer]\n  (print-method (validation-error-explain err) writer)))\n\n(defn make-ValidationError\n  \"for cljs sake (easier than normalizing imports in macros.clj)\"\n  [schema value expectation-delay fail-explanation]\n  (ValidationError. schema value expectation-delay fail-explanation))\n\n\n;; Attach a name to an error from a named schema.\n(declare named-error-explain)\n\n(deftype NamedError [name error]\n  #?(:cljs IPrintWithWriter)\n  #?(:cljs (-pr-writer [this writer opts]\n             (-pr-writer (named-error-explain this) writer opts))))\n\n(defn named-error-explain [^NamedError err]\n  (list 'named (.-error err) (.-name err)))\n\n#?(:clj ;; Validation errors print like forms that would return false\n(defmethod print-method NamedError [err writer]\n  (print-method (named-error-explain err) writer)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Monoidish error containers, which wrap errors (to distinguish from success values).\n\n(defrecord ErrorContainer [error])\n\n(defn error\n  \"Distinguish a value (must be non-nil) as an error.\"\n  [x] (assert x) (->ErrorContainer x))\n\n(defn error? [x]\n  (instance? ErrorContainer x))\n\n(defn error-val [x]\n  (when (error? x)\n    (.-error ^ErrorContainer x)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Registry for attaching schemas to classes, used for defn and defrecord\n\n#?(:clj\n(let [^java.util.Map +class-schemata+ (java.util.Collections/synchronizedMap (java.util.WeakHashMap.))]\n  (defn declare-class-schema!\n    \"Globally set the schema for a class (above and beyond a simple instance? check).\n   Use with care, i.e., only on classes that you control.  Also note that this\n   schema only applies to instances of the concrete type passed, i.e.,\n   (= (class x) klass), not (instance? klass x).\"\n    [klass schema]\n    #?(:bb nil ;; fn identity is used as klass in bb\n       :default (assert (class? klass)\n                        (format* \"Cannot declare class schema for non-class %s\" (pr-str (class klass)))))\n    (.put +class-schemata+ klass schema))\n\n  (defn class-schema\n    \"The last schema for a class set by declare-class-schema!, or nil.\"\n    [klass]\n    (.get +class-schemata+ klass))))\n\n#?(:cljs\n(do\n  (defn declare-class-schema! [klass schema]\n    (gobject/set klass \"schema$utils$schema\" schema))\n\n  (defn class-schema [klass]\n    (gobject/get klass \"schema$utils$schema\"))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Utilities for fast-as-possible reference to use to turn fn schema validation on/off\n\n(def use-fn-validation\n  \"Turn on run-time function validation for functions compiled when\n   s/compile-fn-validation was true -- has no effect for functions compiled\n   when it is false.\"\n  ;; specialize in Clojure for performance\n  #?(:bb (atom false)\n     :clj (java.util.concurrent.atomic.AtomicReference. false)\n     :cljs (atom false)))\n"],"x_google_ignoreList":[0]}