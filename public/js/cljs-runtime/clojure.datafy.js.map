{"version":3,"sources":["clojure/datafy.cljs"],"mappings":";AAaA;;;;;;;wBAAA,xBAAMA,wDAMHC;AANH,AAOE,IAAMC,IAAE,AAACC,8BAASF;AAAlB,AACE,GAAI,CAAYC,MAAED;AAChBC;;AACA,GAAI,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,CAAA,wCAAA,eAAA,CAAAE,gCAAA,2BAAA,KAAA,OAAA,lJAAuBF,mBAAAA,wFAAAA;AACzB,2EAAA,pEAACG,kDAAUH,EAAEI,8FAAYL;;AAIzBC;;;;AAER;;;;;;;qBAAA,rBAAMK,kDAMHC,KAAKC,EAAEP;AANV,AAOE,OAACQ,2BAAMF,KAAKC,EAAEP;;AAEhB,4BAAA,5BAAOS,gEAAYC;AAAnB,AACE,2BAAA,pBAACC,uGAAW,AAACC,gBAAMF,WAAI,AAACG,eAAKH;;AAE/B,AAAA,AAAA,CAAA,AAAA,qDAAAR,rDACEY;;AADF,CAAA,AAAA,AACEA,mEACA,WAASf;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACgB,4BAAehB;;;AAF9B,AAAA,CAAA,AAAA,uEAAAG,vEAIEc;;AAJF,CAAA,AAAA,AAIEA,qFACA,WAASjB;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACgB,4BAAehB;;;AAL9B,AAAA,CAAA,AAAA,6DAAAG,7DAOEe;;AAPF,CAAA,AAAA,AAOEA,2EACA,WAASP;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACD,0BAAWC;;;AAR1B,AAAA,CAAA,AAAA,iEAAAR,jEAUEgB;;AAVF,CAAA,AAAA,AAUEA,+EACA,WAASR;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACD,0BAAWC;;;AAX1B,AAAA,CAAA,AAAA,8DAAAR,9DAaEiB;;AAbF,CAAA,AAAA,AAaEA,4EACA,WAAST;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACD,0BAAWC;;;AAd1B,AAAA,CAAA,AAAA,kEAAAR,lEAgBEkB;;AAhBF,CAAA,AAAA,AAgBEA,gFACA,WAASV;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACD,0BAAWC;;;AAjB1B,AAAA,CAAA,AAAA,+DAAAR,/DAmBEmB;;AAnBF,CAAA,AAAA,AAmBEA,6EACA,WAASX;AAAT,AAAA,YAAA,RAASA;AAAT,AAAY,OAACD,0BAAWC","names":["clojure.datafy/datafy","x","v","clojure.core.protocols/datafy","cljs.core/PROTOCOL_SENTINEL","cljs.core.vary_meta","cljs.core/assoc","clojure.datafy/nav","coll","k","clojure.core.protocols/nav","clojure.datafy/datify-ref","r","cljs.core/with-meta","cljs.core/deref","cljs.core/meta","js/Error","cljs.core/Throwable->map","cljs.core/ExceptionInfo","cljs.core/Var","cljs.core/Reduced","cljs.core/Atom","cljs.core/Volatile","cljs.core/Delay"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns\n  ^{:doc \"Functions to turn objects into data. Alpha, subject to change\"}\n    clojure.datafy\n  (:require [clojure.core.protocols :as p]))\n\n(defn datafy\n  \"Attempts to return x as data.\n  datafy will return the value of clojure.protocols/datafy. If\n  the value has been transformed and the result supports\n  metadata, :clojure.datafy/obj will be set on the metadata to the\n  original value of x.\"\n  [x]\n  (let [v (p/datafy x)]\n    (if (identical? v x)\n      v\n      (if (implements? IWithMeta v)\n        (vary-meta v assoc ::obj x\n                   ;; Circling back to this at a later date per @dnolen\n                   ;; ::class (-> x .-constructor .-name symbol)\n                   )\n        v))))\n\n(defn nav\n  \"Returns (possibly transformed) v in the context of coll and k (a\n  key/index or nil). Callers should attempt to provide the key/index\n  context k for Indexed/Associative/ILookup colls if possible, but not\n  to fabricate one e.g. for sequences (pass nil). nav will return the\n  value of clojure.core.protocols/nav.\"\n  [coll k v]\n  (p/nav coll k v))\n\n(defn- datify-ref [r]\n  (with-meta [(deref r)] (meta r)))\n\n(extend-protocol p/Datafiable\n  js/Error\n  (datafy [x] (Throwable->map x))\n\n  ExceptionInfo\n  (datafy [x] (Throwable->map x))\n\n  Var\n  (datafy [r] (datify-ref r))\n\n  Reduced\n  (datafy [r] (datify-ref r))\n\n  Atom\n  (datafy [r] (datify-ref r))\n\n  Volatile\n  (datafy [r] (datify-ref r))\n\n  Delay\n  (datafy [r] (datify-ref r)))\n"],"x_google_ignoreList":[0]}