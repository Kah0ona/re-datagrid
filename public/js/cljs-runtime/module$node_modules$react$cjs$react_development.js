shadow$provide.module$node_modules$react$cjs$react_development = function(global, require, module, exports) {
  (function() {
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return typeof maybeIterable === "function" ? maybeIterable : null;
    }
    function warn(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      printWarning("warn", format, args);
    }
    function error(format) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
      var stack = ReactSharedInternals.ReactDebugCurrentFrame.getStackAddendum();
      stack !== "" && (format += "%s", args = args.concat([stack]));
      args = args.map(function(item) {
        return String(item);
      });
      args.unshift("Warning: " + format);
      Function.prototype.apply.call(console[level], console, args);
    }
    function warnNoop(publicInstance, callerName) {
      publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
      var warningKey = publicInstance + "." + callerName;
      didWarnStateUpdateForUnmountedComponent[warningKey] || (error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state \x3d {};` class property with the desired state in the %s component.", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = !0);
    }
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {
    }
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    function checkKeyStringCoercion(value) {
      try {
        var JSCompiler_inline_result = !1;
      } catch (e) {
        JSCompiler_inline_result = !0;
      }
      if (JSCompiler_inline_result) {
        return JSCompiler_inline_result = typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object", error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", JSCompiler_inline_result), "" + value;
      }
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      typeof type.tag === "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch(type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch(type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Consumer";
          case REACT_PROVIDER_TYPE:
            return (type._context.displayName || "Context") + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      }
      return null;
    }
    function hasValidRef(config) {
      if (hasOwnProperty.call(config, "ref")) {
        var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
        if (getter && getter.isReactWarning) {
          return !1;
        }
      }
      return config.ref !== void 0;
    }
    function hasValidKey(config) {
      if (hasOwnProperty.call(config, "key")) {
        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
        if (getter && getter.isReactWarning) {
          return !1;
        }
      }
      return config.key !== void 0;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function() {
        specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
      };
      warnAboutAccessingKey.isReactWarning = !0;
      Object.defineProperty(props, "key", {get:warnAboutAccessingKey, configurable:!0});
    }
    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function() {
        specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
      };
      warnAboutAccessingRef.isReactWarning = !0;
      Object.defineProperty(props, "ref", {get:warnAboutAccessingRef, configurable:!0});
    }
    function createElement(type, config, children) {
      var props = {}, key = null, ref = null, self = null, source = null;
      if (config != null) {
        for (propName in hasValidRef(config) && (ref = config.ref, typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self && (self = getComponentNameFromType(ReactCurrentOwner.current.type), didWarnAboutStringRefs[self] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', 
        self, config.ref), didWarnAboutStringRefs[self] = !0))), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), self = config.__self === void 0 ? null : config.__self, source = config.__source === void 0 ? null : config.__source, config) {
          hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
        }
      }
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        Object.freeze && Object.freeze(childArray);
        props.children = childArray;
      }
      if (type && type.defaultProps) {
        for (propName in childrenLength = type.defaultProps, childrenLength) {
          props[propName] === void 0 && (props[propName] = childrenLength[propName]);
        }
      }
      if (key || ref) {
        var propName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
        key && defineKeyPropWarningGetter(props, propName);
        ref && defineRefPropWarningGetter(props, propName);
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      return ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
    }
    function cloneElement(element, config, children) {
      if (element === null || element === void 0) {
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
      }
      var props = assign({}, element.props), key = element.key, ref = element.ref, self = element._self, source = element._source, owner = element._owner;
      if (config != null) {
        hasValidRef(config) && (ref = config.ref, owner = ReactCurrentOwner.current);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
        if (element.type && element.type.defaultProps) {
          var defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName] === void 0 && defaultProps !== void 0 ? defaultProps[propName] : config[propName]);
        }
      }
      var propName = arguments.length - 2;
      if (propName === 1) {
        props.children = children;
      } else if (propName > 1) {
        defaultProps = Array(propName);
        for (var i = 0; i < propName; i++) {
          defaultProps[i] = arguments[i + 2];
        }
        props.children = defaultProps;
      }
      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    function isValidElement(object) {
      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function escape(key) {
      var escaperLookup = {"\x3d":"\x3d0", ":":"\x3d2"};
      return "$" + key.replace(/[=:]/g, function(match) {
        return escaperLookup[match];
      });
    }
    function getElementKey(element, index) {
      return typeof element === "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === "undefined" || type === "boolean") {
        children = null;
      }
      var invokeCallback = !1;
      if (children === null) {
        invokeCallback = !0;
      } else {
        switch(type) {
          case "string":
          case "number":
            invokeCallback = !0;
            break;
          case "object":
            switch(children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = !0;
            }
        }
      }
      if (invokeCallback) {
        return invokeCallback = children, callback = callback(invokeCallback), nameSoFar = nameSoFar === "" ? "." + getElementKey(invokeCallback, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", nameSoFar != null && (escapedPrefix = nameSoFar.replace(userProvidedKeyEscapeRegex, "$\x26/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
          return c;
        })) : callback != null && (isValidElement(callback) && (!callback.key || invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key), callback = cloneAndReplaceKey(callback, escapedPrefix + (!callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$\x26/") + "/") + nameSoFar)), array.push(callback)), 1;
      }
      invokeCallback = 0;
      nameSoFar = nameSoFar === "" ? "." : nameSoFar + ":";
      if (isArrayImpl(children)) {
        for (var i = 0; i < children.length; i++) {
          type = children[i];
          var nextName = nameSoFar + getElementKey(type, i);
          invokeCallback += mapIntoArray(type, array, escapedPrefix, nextName, callback);
        }
      } else {
        if (nextName = getIteratorFn(children), typeof nextName === "function") {
          for (nextName === children.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0), children = nextName.call(children), i = 0; !(type = children.next()).done;) {
            type = type.value, nextName = nameSoFar + getElementKey(type, i++), invokeCallback += mapIntoArray(type, array, escapedPrefix, nextName, callback);
          }
        } else if (type === "object") {
          throw array = String(children), Error("Objects are not valid as a React child (found: " + (array === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
        }
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [], count = 0;
      mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (payload._status === -1) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(function(moduleObject) {
          if (payload._status === 0 || payload._status === -1) {
            payload._status = 1, payload._result = moduleObject;
          }
        }, function(error) {
          if (payload._status === 0 || payload._status === -1) {
            payload._status = 2, payload._result = error;
          }
        });
        payload._status === -1 && (payload._status = 0, payload._result = ctor);
      }
      if (payload._status === 1) {
        return ctor = payload._result, ctor === void 0 && error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent \x3d lazy(() \x3d\x3e import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", ctor), "default" in ctor || error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent \x3d lazy(() \x3d\x3e import('./MyComponent'))", 
        ctor), ctor.default;
      }
      throw payload._result;
    }
    function isValidElementType(type) {
      return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || 
      type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) ? !0 : !1;
    }
    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      dispatcher === null && error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      return dispatcher;
    }
    function disabledLog() {
    }
    function disableLogs() {
      if (disabledDepth === 0) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {configurable:!0, enumerable:!0, value:disabledLog, writable:!0};
        Object.defineProperties(console, {info:props, log:props, warn:props, error:props, group:props, groupCollapsed:props, groupEnd:props});
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (disabledDepth === 0) {
        var props = {configurable:!0, enumerable:!0, writable:!0};
        Object.defineProperties(console, {log:assign({}, props, {value:prevLog}), info:assign({}, props, {value:prevInfo}), warn:assign({}, props, {value:prevWarn}), error:assign({}, props, {value:prevError}), group:assign({}, props, {value:prevGroup}), groupCollapsed:assign({}, props, {value:prevGroupCollapsed}), groupEnd:assign({}, props, {value:prevGroupEnd})});
      }
      disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      if (prefix === void 0) {
        try {
          throw Error();
        } catch (x) {
          prefix = (source = x.stack.trim().match(/\n( *(at )?)/)) && source[1] || "";
        }
      }
      return "\n" + prefix + name;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      var frame = componentFrameCache.get(fn);
      if (frame !== void 0) {
        return frame;
      }
      reentry = !0;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = null;
      disableLogs();
      try {
        if (construct) {
          if (construct = function() {
            throw Error();
          }, Object.defineProperty(construct.prototype, "props", {set:function() {
            throw Error();
          }}), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(construct, []);
            } catch (x) {
              var control = x;
            }
            Reflect.construct(fn, [], construct);
          } else {
            try {
              construct.call();
            } catch (x) {
              control = x;
            }
            fn.call(construct.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          for (var sampleLines = sample.stack.split("\n"), controlLines = control.stack.split("\n"), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c];) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    fn.displayName && _frame.includes("\x3canonymous\x3e") && (_frame = _frame.replace("\x3canonymous\x3e", fn.displayName));
                    typeof fn === "function" && componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
      }
      control = (control = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(control) : "";
      typeof fn === "function" && componentFrameCache.set(fn, control);
      return control;
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        return source = type.prototype, describeNativeComponentFrame(type, !(!source || !source.isReactComponent));
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch(type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch(type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return type = describeNativeComponentFrame(type.render, !1), type;
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE:
            var payload = type._payload;
            type = type._init;
            try {
              return describeUnknownElementTypeFrameInDEV(type(payload), source, ownerFn);
            } catch (x) {
            }
        }
      }
      return "";
    }
    function setCurrentlyValidatingElement(element) {
      if (element) {
        var owner = element._owner;
        element = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(element);
      } else {
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
    }
    function setCurrentlyValidatingElement$1(element) {
      if (element) {
        var owner = element._owner;
        currentExtraStackFrame = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      } else {
        currentExtraStackFrame = null;
      }
    }
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentNameFromType(ReactCurrentOwner.current.type);
        if (name) {
          return "\n\nCheck the render method of `" + name + "`.";
        }
      }
      return "";
    }
    function validateExplicitKey(element, parentType) {
      if (element._store && !element._store.validated && element.key == null) {
        element._store.validated = !0;
        var currentComponentErrorInfo = getDeclarationErrorAddendum();
        currentComponentErrorInfo || (parentType = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name) && (currentComponentErrorInfo = "\n\nCheck the top-level render call using \x3c" + parentType + "\x3e.");
        ownerHasKeyUseWarning[currentComponentErrorInfo] || (ownerHasKeyUseWarning[currentComponentErrorInfo] = !0, parentType = "", element && element._owner && element._owner !== ReactCurrentOwner.current && (parentType = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, 
        parentType), setCurrentlyValidatingElement$1(null));
      }
    }
    function validateChildKeys(node, parentType) {
      if (typeof node === "object") {
        if (isArrayImpl(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            isValidElement(child) && validateExplicitKey(child, parentType);
          }
        } else if (isValidElement(node)) {
          node._store && (node._store.validated = !0);
        } else if (node && (i = getIteratorFn(node), typeof i === "function" && i !== node.entries)) {
          for (node = i.call(node); !(i = node.next()).done;) {
            isValidElement(i.value) && validateExplicitKey(i.value, parentType);
          }
        }
      }
    }
    function validatePropTypes(element) {
      var type = element.type;
      if (type !== null && type !== void 0 && typeof type !== "string") {
        var propTypes;
        if (typeof type === "function" || typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
          if (propTypes = type.propTypes) {
            var name = getComponentNameFromType(type), values = element.props, has = Function.call.bind(hasOwnProperty), typeSpecName;
            for (typeSpecName in propTypes) {
              if (has(propTypes, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof propTypes[typeSpecName] !== "function") {
                    var err = Error((name || "React class") + ": prop type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof propTypes[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = propTypes[typeSpecName](values, typeSpecName, name, "prop", null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                !error$1 || error$1 instanceof Error || (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", name || "React class", "prop", typeSpecName, typeof error$1), setCurrentlyValidatingElement(null));
                error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", "prop", error$1.message), setCurrentlyValidatingElement(null));
              }
            }
          } else {
            type.PropTypes === void 0 || propTypesMisspellWarningShown || (propTypesMisspellWarningShown = !0, element = getComponentNameFromType(type), error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", element || "Unknown"));
          }
          typeof type.getDefaultProps !== "function" || type.getDefaultProps.isReactClassApproved || error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);
      if (!validType) {
        var info = "";
        if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
          info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
        }
        if (props !== null && props !== void 0) {
          var sourceInfo = props.__source;
          sourceInfo = sourceInfo !== void 0 ? "\n\nCheck your code at " + sourceInfo.fileName.replace(/^.*[\\\/]/, "") + ":" + sourceInfo.lineNumber + "." : "";
        } else {
          sourceInfo = "";
        }
        info = sourceInfo ? info + sourceInfo : info + getDeclarationErrorAddendum();
        type === null ? sourceInfo = "null" : isArrayImpl(type) ? sourceInfo = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (sourceInfo = "\x3c" + (getComponentNameFromType(type.type) || "Unknown") + " /\x3e", info = " Did you accidentally export a JSX literal instead of a component?") : sourceInfo = typeof type;
        error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", sourceInfo, info);
      }
      info = createElement.apply(this, arguments);
      if (info == null) {
        return info;
      }
      if (validType) {
        for (validType = 2; validType < arguments.length; validType++) {
          validateChildKeys(arguments[validType], type);
        }
      }
      if (type === REACT_FRAGMENT_TYPE) {
        validType = Object.keys(info.props);
        for (sourceInfo = 0; sourceInfo < validType.length; sourceInfo++) {
          var key = validType[sourceInfo];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(info);
            error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        info.ref !== null && (setCurrentlyValidatingElement$1(info), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
      } else {
        validatePropTypes(info);
      }
      return info;
    }
    function enqueueTask(task) {
      if (enqueueTaskImpl === null) {
        try {
          var requireString = ("require" + Math.random()).slice(0, 7);
          enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
        } catch (_err) {
          enqueueTaskImpl = function(callback) {
            didWarnAboutMessageChannel === !1 && (didWarnAboutMessageChannel = !0, typeof MessageChannel === "undefined" && error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () \x3d\x3e ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
            var channel = new MessageChannel();
            channel.port1.onmessage = callback;
            channel.port2.postMessage(void 0);
          };
        }
      }
      return enqueueTaskImpl(task);
    }
    function act(callback) {
      var prevActScopeDepth = actScopeDepth;
      actScopeDepth++;
      ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
      var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
      try {
        ReactCurrentActQueue.isBatchingLegacy = !0;
        var result = callback();
        if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
          var queue = ReactCurrentActQueue.current;
          queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue));
        }
      } catch (error) {
        throw popActScope(prevActScopeDepth), error;
      } finally {
        ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
      }
      if (result !== null && typeof result === "object" && typeof result.then === "function") {
        var thenableResult = result, wasAwaited = !1;
        didWarnNoAwaitAct || typeof Promise === "undefined" || Promise.resolve().then(function() {
        }).then(function() {
          wasAwaited || (didWarnNoAwaitAct = !0, error("You called act(async () \x3d\x3e ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () \x3d\x3e ...);"));
        });
        return {then:function(resolve, reject) {
          wasAwaited = !0;
          thenableResult.then(function(returnValue) {
            popActScope(prevActScopeDepth);
            actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue, resolve, reject) : resolve(returnValue);
          }, function(error) {
            popActScope(prevActScopeDepth);
            reject(error);
          });
        }};
      }
      var returnValue = result;
      popActScope(prevActScopeDepth);
      return actScopeDepth === 0 ? (callback = ReactCurrentActQueue.current, callback !== null && (flushActQueue(callback), ReactCurrentActQueue.current = null), {then:function(resolve, reject) {
        ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
      }}) : {then:function(resolve, reject) {
        resolve(returnValue);
      }};
    }
    function popActScope(prevActScopeDepth) {
      prevActScopeDepth !== actScopeDepth - 1 && error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
      actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      var queue = ReactCurrentActQueue.current;
      if (queue !== null) {
        try {
          flushActQueue(queue), enqueueTask(function() {
            queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
          });
        } catch (error) {
          reject(error);
        }
      } else {
        resolve(returnValue);
      }
    }
    function flushActQueue(queue) {
      if (!isFlushing) {
        isFlushing = !0;
        var i = 0;
        try {
          for (; i < queue.length; i++) {
            var callback = queue[i];
            do {
              callback = callback(!0);
            } while (callback !== null);
          }
          queue.length = 0;
        } catch (error) {
          throw queue.slice(i + 1), error;
        } finally {
          isFlushing = !1;
        }
      }
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = 
    Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, ReactCurrentDispatcher = {current:null}, ReactCurrentBatchConfig = {transition:null}, ReactCurrentActQueue = {current:null, isBatchingLegacy:!1, didScheduleLegacyUpdate:!1}, ReactCurrentOwner = {current:null}, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
      currentExtraStackFrame = stack;
    };
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
      var stack = "";
      currentExtraStackFrame && (stack += currentExtraStackFrame);
      var impl = ReactDebugCurrentFrame.getCurrentStack;
      impl && (stack += impl() || "");
      return stack;
    };
    var ReactSharedInternals = {ReactCurrentDispatcher, ReactCurrentBatchConfig, ReactCurrentOwner};
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    var didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {isMounted:function(publicInstance) {
      return !1;
    }, enqueueForceUpdate:function(publicInstance, callback, callerName) {
      warnNoop(publicInstance, "forceUpdate");
    }, enqueueReplaceState:function(publicInstance, completeState, callback, callerName) {
      warnNoop(publicInstance, "replaceState");
    }, enqueueSetState:function(publicInstance, partialState, callback, callerName) {
      warnNoop(publicInstance, "setState");
    }}, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
      if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      }
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {isMounted:["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."], replaceState:["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]}, defineDeprecationWarning = function(methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {get:function() {
        warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
      }});
    }, fnName;
    for (fnName in deprecatedAPIs) {
      deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
    ComponentDummy.prototype = Component.prototype;
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = !0;
    var isArrayImpl = Array.isArray, hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {key:!0, ref:!0, __self:!0, __source:!0}, specialPropKeyWarningShown, specialPropRefWarningShown;
    var didWarnAboutStringRefs = {};
    var ReactElement = function(type, key, ref, self, source, owner, props) {
      type = {$$typeof:REACT_ELEMENT_TYPE, type, key, ref, props, _owner:owner, _store:{}};
      Object.defineProperty(type._store, "validated", {configurable:!1, enumerable:!1, writable:!0, value:!1});
      Object.defineProperty(type, "_self", {configurable:!1, enumerable:!1, writable:!1, value:self});
      Object.defineProperty(type, "_source", {configurable:!1, enumerable:!1, writable:!1, value:source});
      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
      return type;
    }, didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
    var REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix, reentry = !1;
    var componentFrameCache = new (typeof WeakMap === "function" ? WeakMap : Map)();
    var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    var propTypesMisspellWarningShown = !1;
    var ownerHasKeyUseWarning = {}, didWarnAboutDeprecatedCreateFactory = !1, didWarnAboutMessageChannel = !1, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = !1, isFlushing = !1;
    exports.Children = {map:mapChildren, forEach:function(children, forEachFunc, forEachContext) {
      mapChildren(children, function() {
        forEachFunc.apply(this, arguments);
      }, forEachContext);
    }, count:function(children) {
      var n = 0;
      mapChildren(children, function() {
        n++;
      });
      return n;
    }, toArray:function(children) {
      return mapChildren(children, function(child) {
        return child;
      }) || [];
    }, only:function(children) {
      if (!isValidElement(children)) {
        throw Error("React.Children.only expected to receive a single React element child.");
      }
      return children;
    }};
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.act = act;
    exports.cloneElement = function(element, props, children) {
      for (var newElement = cloneElement.apply(this, arguments), i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    };
    exports.createContext = function(defaultValue) {
      var context = {$$typeof:REACT_CONTEXT_TYPE, _currentValue:defaultValue, _currentValue2:defaultValue, _threadCount:0, Provider:null, Consumer:null, _defaultValue:null, _globalName:null};
      context.Provider = {$$typeof:REACT_PROVIDER_TYPE, _context:context};
      var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
      defaultValue = {$$typeof:REACT_CONTEXT_TYPE, _context:context};
      Object.defineProperties(defaultValue, {Provider:{get:function() {
        hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error("Rendering \x3cContext.Consumer.Provider\x3e is not supported and will be removed in a future major release. Did you mean to render \x3cContext.Provider\x3e instead?"));
        return context.Provider;
      }, set:function(_Provider) {
        context.Provider = _Provider;
      }}, _currentValue:{get:function() {
        return context._currentValue;
      }, set:function(_currentValue) {
        context._currentValue = _currentValue;
      }}, _currentValue2:{get:function() {
        return context._currentValue2;
      }, set:function(_currentValue2) {
        context._currentValue2 = _currentValue2;
      }}, _threadCount:{get:function() {
        return context._threadCount;
      }, set:function(_threadCount) {
        context._threadCount = _threadCount;
      }}, Consumer:{get:function() {
        hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering \x3cContext.Consumer.Consumer\x3e is not supported and will be removed in a future major release. Did you mean to render \x3cContext.Consumer\x3e instead?"));
        return context.Consumer;
      }}, displayName:{get:function() {
        return context.displayName;
      }, set:function(displayName) {
        hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName \x3d '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
      }}});
      context.Consumer = defaultValue;
      context._currentRenderer = null;
      context._currentRenderer2 = null;
      return context;
    };
    exports.createElement = createElementWithValidation;
    exports.createFactory = function(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead."));
      Object.defineProperty(validatedFactory, "type", {enumerable:!1, get:function() {
        warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
        Object.defineProperty(this, "type", {value:type});
        return type;
      }});
      return validatedFactory;
    };
    exports.createRef = function() {
      var refObject = {current:null};
      Object.seal(refObject);
      return refObject;
    };
    exports.forwardRef = function(render) {
      render != null && render.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render !== "function" ? error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : 
      "Any additional parameter will be undefined.");
      render == null || render.defaultProps == null && render.propTypes == null || error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
      var elementType = {$$typeof:REACT_FORWARD_REF_TYPE, render}, ownName;
      Object.defineProperty(elementType, "displayName", {enumerable:!1, configurable:!0, get:function() {
        return ownName;
      }, set:function(name) {
        ownName = name;
        render.name || render.displayName || (render.displayName = name);
      }});
      return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function(ctor) {
      var lazyType = {$$typeof:REACT_LAZY_TYPE, _payload:{_status:-1, _result:ctor}, _init:lazyInitializer}, defaultProps, propTypes;
      Object.defineProperties(lazyType, {defaultProps:{configurable:!0, get:function() {
        return defaultProps;
      }, set:function(newDefaultProps) {
        error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
        defaultProps = newDefaultProps;
        Object.defineProperty(lazyType, "defaultProps", {enumerable:!0});
      }}, propTypes:{configurable:!0, get:function() {
        return propTypes;
      }, set:function(newPropTypes) {
        error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
        propTypes = newPropTypes;
        Object.defineProperty(lazyType, "propTypes", {enumerable:!0});
      }}});
      return lazyType;
    };
    exports.memo = function(type, compare) {
      isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
      compare = {$$typeof:REACT_MEMO_TYPE, type, compare:compare === void 0 ? null : compare};
      var ownName;
      Object.defineProperty(compare, "displayName", {enumerable:!1, configurable:!0, get:function() {
        return ownName;
      }, set:function(name) {
        ownName = name;
        type.name || type.displayName || (type.displayName = name);
      }});
      return compare;
    };
    exports.startTransition = function(scope, options) {
      options = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = {};
      var currentTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition._updatedFibers = new Set();
      try {
        scope();
      } finally {
        ReactCurrentBatchConfig.transition = options, options === null && currentTransition._updatedFibers && (currentTransition._updatedFibers.size > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear());
      }
    };
    exports.unstable_act = act;
    exports.useCallback = function(callback, deps) {
      return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function(Context) {
      var dispatcher = resolveDispatcher();
      if (Context._context !== void 0) {
        var realContext = Context._context;
        realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
      }
      return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function(value, formatterFn) {
      return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function(value) {
      return resolveDispatcher().useDeferredValue(value);
    };
    exports.useEffect = function(create, deps) {
      return resolveDispatcher().useEffect(create, deps);
    };
    exports.useId = function() {
      return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function(ref, create, deps) {
      return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function(create, deps) {
      return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function(create, deps) {
      return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function(create, deps) {
      return resolveDispatcher().useMemo(create, deps);
    };
    exports.useReducer = function(reducer, initialArg, init) {
      return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function(initialValue) {
      return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function(initialState) {
      return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
      return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    };
    exports.useTransition = function() {
      return resolveDispatcher().useTransition();
    };
    exports.version = "18.3.1";
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
};

//# sourceMappingURL=module$node_modules$react$cjs$react_development.js.map
