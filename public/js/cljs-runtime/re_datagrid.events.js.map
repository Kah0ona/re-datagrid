{"version":3,"sources":["re_datagrid/events.cljs"],"mappings":"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","names":["re-datagrid.events/get-next-sort-direction","c","pred__55323","expr__55324","js/Error","cljs.core/=","re-datagrid.events/extend-options-with-defaults","options","merged","cljs.core.merge","re-datagrid.events/register-scroll-events","id","re_frame.core.reg_event_db","p__55334","vec__55335","cljs.core.nth","db","_","opts","fields","header-filter-expanded?","re-datagrid.local-db/db","cljs.core/deref","cljs.core.get_in","cljs.core/boolean","cljs.core/assoc-in","or__5025__auto__","p__55402","vec__55403","grid-id","o","p__55407","vec__55408","p__55411","vec__55422","expanded?","exp","cljs.core/not","cljs.core.swap_BANG_","re_frame.core.reg_event_fx","p__55433","p__55434","map__55436","cljs.core/--destructure-map","cljs.core.get","vec__55442","field-name","nd","extra-dispatch","cljs.core/vec","cljs.core.concat","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","G__55461","cljs.core.update_in","cljs.core.assoc","p__55464","vec__55465","all-records","id-field","checked?","cljs.core.map","cljs.core/set","p__55471","vec__55472","record","callback-fn","pk","pk'","n'","cljs.core/some","cljs.core.disj","cljs.core.conj","p__55476","vec__55478","defaults","p__55482","vec__55483","k","v","p__55492","p__55493","map__55494","vec__55495","update-dispatch","keys-from-grid","r","r'","cljs.core/select-keys","cljs.core/dissoc","p__55510","p__55511","map__55512","vec__55513","edited-record","dispatch","p__55516","vec__55517","p__55520","p__55521","map__55522","vec__55523","start-edit-dispatch","p__55526","p__55527","map__55528","vec__55529","direction","disp","p__55573","vec__55574","show?","p__55577","p__55578","map__55579","vec__55580","G__55583","p__55584","p__55585","map__55586","vec__55587","delete-dispatch","p__55595","p__55596","map__55598","vec__55599","blur?","G__55621"],"sourcesContent":["(ns re-datagrid.events\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]\n            [taoensso.timbre :as timbre\n             :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                 logf tracef debugf infof warnf errorf fatalf reportf\n                                 spy get-env log-env)]\n            [re-datagrid.local-db :as local-db]))\n\n(defn get-next-sort-direction\n  [c]\n  (condp = c\n    nil  :asc\n    :asc :desc\n    :desc :none\n    :none :asc))\n\n(defn extend-options-with-defaults\n  [options]\n  (let [merged (merge\n                {:can-edit                    true\n                 :can-create                  true\n                 :can-delete                  true\n                 :delete-are-you-sure-message \"De gegevens kunnen niet meer worden teruggehaald.\"\n                 :debug                       false}\n                options)]\n    ;;  (debug merged)\n    merged))\n\n\n(defn register-scroll-events\n  [id]\n  ;;whenever there 's a div re-datagrid-read-more-marker IN the viewport\n  ;;dispatch the expand max-num-rows variable\n\n\n  )\n\n(rf/reg-event-db\n :datagrid/initialize\n (fn [db [_ opts fields]]\n   (assert (:data-subscription opts)\n           \"No subscription for records. Please set a :data-subscription re-frame subscribe pattern on init-time.\")\n   (let [id (:grid-id opts)\n         header-filter-expanded? (-> @local-db/db\n                                     (get-in  [id :header-filter-expanded?])\n                                     boolean)]\n     (when (:progressive-loading opts)\n       (register-scroll-events id))\n     (assoc-in db [:datagrid/data id] {:options                 (extend-options-with-defaults opts)\n                                       :fields                  fields\n                                       :selected-records        #{}\n                                       :are-you-sure-callback   nil\n                                       :show-sure?              false\n                                       :creating?               false\n                                       :create-record           nil\n                                       :expanded?               false\n                                       :mass-select-check       false\n                                       :header-filter-expanded? header-filter-expanded?\n                                       :rec-marked-for-deletion nil\n                                       :header-filter-values    {}\n                                       :edit-rows               {} ;; map of pk -> rec\n                                       :sorting                 {:key       (:default-sort-key opts)\n                                                                 :direction (when (:default-sort-key opts)\n                                                                              (or (:default-sort-direction opts) :asc))}}))))\n\n(rf/reg-event-db\n :datagrid/update-options\n (fn [db [_ grid-id o]]\n   (assoc-in db [:datagrid/data grid-id :options] o)))\n\n\n(rf/reg-event-db\n :datagrid/update-fields\n (fn [db [_ grid-id o]]\n   (assoc-in db [:datagrid/data grid-id :fields] o)))\n\n(rf/reg-event-db\n :datagrid/header-filter-expanded?\n (fn [db [_ id expanded?]]\n   (let [exp (or expanded? (not (get-in db [:datagrid/data id :header-filter-expanded?])))]\n     (swap! local-db/db assoc-in [id :header-filter-expanded?] exp)\n     (assoc-in db [:datagrid/data id :header-filter-expanded?] exp))))\n\n(rf/reg-event-fx\n :datagrid/sort-field\n (fn [{db :db} [_ grid-id field-name]]\n   (let [nd             (get-next-sort-direction (get-in db [:datagrid/data grid-id :sorting :direction]))\n         extra-dispatch (get-in db [:datagrid/data grid-id :options :sort-dispatch])\n         extra-dispatch (when extra-dispatch\n                          (vec (concat extra-dispatch [field-name nd])))]\n     (debug \"Sorting\" grid-id \", field:\" field-name \" in direction:\" nd)\n     (cond-> {:db\n              (-> db\n                  (assoc-in [:datagrid/data  grid-id :sorting :key] field-name)\n                  (update-in [:datagrid/data  grid-id :sorting :direction] get-next-sort-direction))}\n       extra-dispatch (assoc :dispatch extra-dispatch)))))\n\n(rf/reg-event-db\n :datagrid/toggle-mass-select\n (fn [db [_ id all-records]]\n   (let [id-field (get-in db [:datagrid/data  id :options :id-field])\n         checked? (get-in db [:datagrid/data  id :mass-select-check])]\n     (-> db\n         (update-in [:datagrid/data  id :mass-select-check] not)\n         (assoc-in [:datagrid/data  id :selected-records]\n                   (if checked? ;;now it won't be\n                     #{}\n                     (->>\n                      all-records\n                      (map id-field)\n                      set)))))))\n\n(rf/reg-event-db\n :datagrid/toggle-checkbox\n (fn [db [_ id record]]\n   (let [id-field    (get-in db [:datagrid/data id :options :id-field])\n         callback-fn (get-in db [:datagrid/data id :options :on-selection-change])\n         pk          (get record id-field)]\n     (update-in db [:datagrid/data  id :selected-records]\n                (fn [o pk']\n                  (let [n' (if (some #{pk'} o)\n                             (disj o pk')\n                             (conj o pk'))]\n                    (when callback-fn\n                      (callback-fn n' record))\n                    n'))\n                pk))))\n\n(rf/reg-event-db\n :datagrid/create-new-record\n (fn [db [_ id]]\n   (let [defaults (get-in db [:datagrid/data  id :options :default-values])]\n     (-> db\n         ;;put it under 'nil' key in edit-rows\n         (assoc-in [:datagrid/data  id :edit-rows nil] (or defaults {}))\n         (assoc-in [:datagrid/data  id :creating?] true)))))\n\n(rf/reg-event-db\n :datagrid/update-edited-record\n (fn [db [_ id pk k v]]\n   (debug \"Updating grid\" id \", pk:\" pk \", k:\" k \",v:\" v)\n   (assoc-in db [:datagrid/data  id :edit-rows pk k] v)))\n\n;;rec-with-only-grid-fields (if is-update?\n ;;                           (assoc (remove-keys-not-in-gridfields @edit-record fields)\n  ;;                                 (:id-field options) (get @edit-record (:id-field options)))\n   ;;                         (remove-keys-not-in-gridfields @edit-record fields))\n;;rec-with-added-defaults   (if (:default-values options)\n ;;                           (merge (:default-values options) rec-with-only-grid-fields)\n  ;;                          rec-with-only-grid-fields)\n\n(rf/reg-event-fx\n :datagrid/save-edited-record\n (fn [{db :db} [_ id pk]]\n   (if (nil? pk) ;; it's a create, redispatch\n     {:db       db\n      :dispatch [:datagrid/save-new-record id]}\n     ;;else\n     (let [fields          (get-in db [:datagrid/data  id :fields])\n           id-field        (get-in db [:datagrid/data  id :options :id-field])\n           defaults        (get-in db [:datagrid/data  id :options :default-values])\n           update-dispatch (get-in db [:datagrid/data  id :options :update-dispatch])\n           keys-from-grid  (map :name fields)\n           r               (as-> (get-in db [:datagrid/data  id :edit-rows pk]) r'\n                             (select-keys r' keys-from-grid)\n                             (assoc r' id-field pk)\n                             (merge defaults r'))\n           update-dispatch (conj update-dispatch r)]\n       {:db       (update-in db [:datagrid/data  id :edit-rows] dissoc pk)\n        :dispatch update-dispatch}))))\n\n\n(rf/reg-event-fx\n :datagrid/save-new-record\n (fn [{db :db} [_ id]]\n   (let [edited-record (get-in db [:datagrid/data  id :edit-rows nil])\n         dispatch      (-> (get-in db [:datagrid/data  id :options :create-dispatch])\n                           (conj edited-record))]\n     {:db       (-> db\n                    (update-in [:datagrid/data  id :edit-rows] dissoc nil)\n                    (assoc-in  [:datagrid/data  id :creating?] false))\n      :dispatch dispatch})))\n\n(rf/reg-event-db\n :datagrid/toggle-expand\n (fn [db [_ id]]\n   (update-in db [:datagrid/data  id :expanded?] not)))\n\n\n\n(rf/reg-event-fx\n :datagrid/start-edit\n (fn [{db :db} [_ id pk record]]\n   (let [start-edit-dispatch (get-in db [:datagrid/data id :options :start-edit-dispatch])]\n     (merge\n      {:db (assoc-in db [:datagrid/data id :edit-rows pk] record)}\n      (when start-edit-dispatch\n        {:dispatch (conj start-edit-dispatch record)})))))\n\n\n(rf/reg-event-fx\n :datagrid/reorder\n (fn [{db :db} [_ id direction record]]\n   (assert (get-in db [:datagrid/data id :options :reorder-dispatch]) \"There is no :reorder-dispatch set in the options!\")\n   (debug \"reorder \" id \",\" direction \",\" record)\n   (let [disp (-> db\n                  (get-in [:datagrid/data id :options :reorder-dispatch])\n                  (concat [direction record])\n                  vec)]\n     (debug disp)\n     {:db       db\n      :dispatch disp})))\n\n(rf/reg-event-db\n :datagrid/show-are-you-sure-popup\n (fn [db [_ id show?]]\n   (assoc-in db [:datagrid/data  id :show-sure?] show?)))\n\n(rf/reg-event-fx\n :datagrid/delete-record-maybe\n (fn [{db :db} [_ id record]]\n   (let [show? (get-in db [:datagrid/data id :options :delete-are-you-sure-message])]\n     (cond-> {:db (-> db\n                      (assoc-in [:datagrid/data id :rec-marked-for-deletion] record)\n                      (assoc-in [:datagrid/data id :show-sure?] show?))}\n       (not show?)\n       (assoc :dispatch [:datagrid/delete-record id])))))\n\n(rf/reg-event-fx\n :datagrid/delete-record\n (fn [{db :db} [_ id]]\n   (let [delete-dispatch (get-in db [:datagrid/data id :options :delete-dispatch])\n         record          (get-in db [:datagrid/data id :rec-marked-for-deletion])]\n     (assert record)\n     {:db       (-> db\n                    (assoc-in [:datagrid/data id :show-sure?] false)\n                    (assoc-in [:datagrid/data id :options :rec-marked-for-deletion] nil))\n      :dispatch (conj delete-dispatch record)})))\n\n(rf/reg-event-fx\n :datagrid/header-filter-value\n (fn [{db :db} [_ id k v blur?]]\n   (let [extra-dispatch (get-in db [:datagrid/data id :options :header-filter-dispatch])\n         extra-dispatch (when extra-dispatch\n                          (vec (concat extra-dispatch [id k v blur?])))]\n     (cond->\n         {:db (assoc-in db [:datagrid/data id :header-filter-values k] v)}\n       extra-dispatch (assoc :dispatch extra-dispatch)))))\n"]}