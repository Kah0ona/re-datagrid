{
"version":3,
"file":"goog.i18n.messageformat.js",
"lineCount":348,
"mappings":"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",
"sources":["goog/i18n/messageformat.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Message/plural format library with locale support.\n *\n * Message format grammar:\n *\n * messageFormatPattern := string ( \"{\" messageFormatElement \"}\" string )*\n * messageFormatElement := argumentIndex [ \",\" elementFormat ]\n * elementFormat := \"plural\" \",\" pluralStyle\n *                  | \"selectordinal\" \",\" ordinalStyle\n *                  | \"select\" \",\" selectStyle\n * pluralStyle :=  pluralFormatPattern\n * ordinalStyle :=  selectFormatPattern\n * selectStyle :=  selectFormatPattern\n * pluralFormatPattern := [ \"offset\" \":\" offsetIndex ] pluralForms*\n * selectFormatPattern := pluralForms*\n * pluralForms := stringKey \"{\" ( \"{\" messageFormatElement \"}\"|string )* \"}\"\n *\n * This is a subset of the ICU MessageFormatSyntax:\n *   http://userguide.icu-project.org/formatparse/messages\n * See also http://go/plurals and http://go/ordinals for internal details.\n *\n *\n * Message example:\n *\n * I see {NUM_PEOPLE, plural, offset:1\n *         =0 {no one at all}\n *         =1 {{WHO}}\n *         one {{WHO} and one other person}\n *         other {{WHO} and # other people}}\n * in {PLACE}.\n *\n * Calling format({'NUM_PEOPLE': 2, 'WHO': 'Mark', 'PLACE': 'Athens'}) would\n * produce \"I see Mark and one other person in Athens.\" as output.\n *\n * OR:\n *\n * {NUM_FLOOR, selectordinal,\n *   one {Take the elevator to the #st floor.}\n *   two {Take the elevator to the #nd floor.}\n *   few {Take the elevator to the #rd floor.}\n *   other {Take the elevator to the #th floor.}}\n *\n * Calling format({'NUM_FLOOR': 22}) would produce\n * \"Take the elevator to the 22nd floor\".\n *\n * See messageformat_test.html for more examples.\n */\n\ngoog.provide('goog.i18n.MessageFormat');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.CompactNumberFormatSymbols');\ngoog.require('goog.i18n.NumberFormat');\ngoog.require('goog.i18n.NumberFormatSymbols');\ngoog.require('goog.i18n.ordinalRules');\ngoog.require('goog.i18n.pluralRules');\n\n\n\n/**\n * Constructor of MessageFormat.\n * @param {string} pattern The pattern we parse and apply positional parameters\n *     to.\n * @constructor\n * @final\n */\ngoog.i18n.MessageFormat = function(pattern) {\n  'use strict';\n  /**\n   * The pattern we parse and apply positional parameters to.\n   * @type {?string}\n   * @private\n   */\n  this.pattern_ = pattern;\n\n  /**\n   * All encountered literals during parse stage. Indices tell us the order of\n   * replacement.\n   * @type {?Array<string>}\n   * @private\n   */\n  this.initialLiterals_ = null;\n\n  /**\n   * Working array with all encountered literals during parse and format stages.\n   * Indices tell us the order of replacement.\n   * @type {?Array<string>}\n   * @private\n   */\n  this.literals_ = null;\n\n  /**\n   * Input pattern gets parsed into objects for faster formatting.\n   * @type {?Array<!goog.i18n.MessageFormat.BlockTypeVal_>}\n   * @private\n   */\n  this.parsedPattern_ = null;\n\n  /**\n   * Locale aware number formatter.\n   * @type {!goog.i18n.NumberFormat}\n   * @private\n   */\n  this.numberFormatter_ = goog.i18n.MessageFormat.getNumberFormatter_();\n};\n\n\n/**\n * Locale associated with the most recently created NumberFormat.\n * @type {?Object}\n * @private\n */\ngoog.i18n.MessageFormat.numberFormatterSymbols_ = null;\n\n\n/**\n * Locale associated with the most recently created NumberFormat.\n * @type {?Object}\n * @private\n */\ngoog.i18n.MessageFormat.compactNumberFormatterSymbols_ = null;\n\n\n/**\n * Locale aware number formatter. Reference to the most recently created\n * NumberFormat for sharing between MessageFormat instances.\n * @type {?goog.i18n.NumberFormat}\n * @private\n */\ngoog.i18n.MessageFormat.numberFormatter_ = null;\n\n\n/**\n * Literal strings, including '', are replaced with \\uFDDF_x_ for\n * parsing purposes, and recovered during format phase.\n * \\uFDDF is a Unicode nonprinting character, not expected to be found in the\n * typical message.\n * @type {string}\n * @private\n */\ngoog.i18n.MessageFormat.LITERAL_PLACEHOLDER_ = '\\uFDDF_';\n\n\n/**\n * Marks a string and block during parsing.\n * @enum {number}\n * @private\n */\ngoog.i18n.MessageFormat.Element_ = {\n  STRING: 0,\n  BLOCK: 1\n};\n\n\n/**\n * Block type.\n * @enum {number}\n * @private\n */\ngoog.i18n.MessageFormat.BlockType_ = {\n  PLURAL: 0,\n  ORDINAL: 1,\n  SELECT: 2,\n  SIMPLE: 3,\n  STRING: 4,\n  UNKNOWN: 5\n};\n\n\n/**\n * Mandatory option in both select and plural form.\n * @type {string}\n * @private\n */\ngoog.i18n.MessageFormat.OTHER_ = 'other';\n\n\n/**\n * Regular expression for looking for string literals.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.REGEX_LITERAL_ = new RegExp(\"'([{}#].*?)'\", 'g');\n\n\n/**\n * Regular expression for looking for '' in the message.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.REGEX_DOUBLE_APOSTROPHE_ = new RegExp(\"''\", 'g');\n\n/**\n * @typedef {{ type: !goog.i18n.MessageFormat.Element_, value: ? }}\n * @private\n */\ngoog.i18n.MessageFormat.TypeVal_;\n\n/**\n * @typedef {{ type: !goog.i18n.MessageFormat.BlockType_, value: ? }}\n * @private\n */\ngoog.i18n.MessageFormat.BlockTypeVal_;\n\n\n/**\n * Gets the a NumberFormat instance for the current locale.\n * If the locale is the same as the previous invocation, returns the same\n * NumberFormat instance. Otherwise, creates a new one.\n * @return {!goog.i18n.NumberFormat}\n * @private\n */\ngoog.i18n.MessageFormat.getNumberFormatter_ = function() {\n  'use strict';\n  var currentSymbols = goog.i18n.NumberFormatSymbols;\n  var currentCompactSymbols = goog.i18n.CompactNumberFormatSymbols;\n\n  if (goog.i18n.MessageFormat.numberFormatterSymbols_ !== currentSymbols ||\n      goog.i18n.MessageFormat.compactNumberFormatterSymbols_ !==\n          currentCompactSymbols) {\n    goog.i18n.MessageFormat.numberFormatterSymbols_ = currentSymbols;\n    goog.i18n.MessageFormat.compactNumberFormatterSymbols_ =\n        /** @type {?} */ (currentCompactSymbols);\n    goog.i18n.MessageFormat.numberFormatter_ =\n        new goog.i18n.NumberFormat(goog.i18n.NumberFormat.Format.DECIMAL);\n  }\n\n  return /** @type {!goog.i18n.NumberFormat} */ (\n      goog.i18n.MessageFormat.numberFormatter_);\n};\n\n\n/**\n * Formats a message, treating '#' with special meaning representing\n * the number (plural_variable - offset).\n * @param {!Object} namedParameters Parameters that either\n *     influence the formatting or are used as actual data.\n *     I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}),\n *     object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters.\n *     1st parameter could mean 5 people, which could influence plural format,\n *     and 2nd parameter is just a data to be printed out in proper position.\n * @return {string} Formatted message.\n */\ngoog.i18n.MessageFormat.prototype.format = function(namedParameters) {\n  'use strict';\n  return this.format_(namedParameters, false);\n};\n\n\n/**\n * Formats a message, treating '#' as literary character.\n * @param {!Object} namedParameters Parameters that either\n *     influence the formatting or are used as actual data.\n *     I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}),\n *     object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters.\n *     1st parameter could mean 5 people, which could influence plural format,\n *     and 2nd parameter is just a data to be printed out in proper position.\n * @return {string} Formatted message.\n */\ngoog.i18n.MessageFormat.prototype.formatIgnoringPound = function(\n    namedParameters) {\n  'use strict';\n  return this.format_(namedParameters, true);\n};\n\n\n/**\n * Formats a message.\n * @param {!Object} namedParameters Parameters that either\n *     influence the formatting or are used as actual data.\n *     I.e. in call to fmt.format({'NUM_PEOPLE': 5, 'NAME': 'Angela'}),\n *     object {'NUM_PEOPLE': 5, 'NAME': 'Angela'} holds positional parameters.\n *     1st parameter could mean 5 people, which could influence plural format,\n *     and 2nd parameter is just a data to be printed out in proper position.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @return {string} Formatted message.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.format_ = function(\n    namedParameters, ignorePound) {\n  'use strict';\n  this.init_();\n  if (!this.parsedPattern_ || this.parsedPattern_.length == 0) {\n    return '';\n  }\n  this.literals_ = goog.array.clone(this.initialLiterals_);\n\n  var result = [];\n  this.formatBlock_(this.parsedPattern_, namedParameters, ignorePound, result);\n  var message = result.join('');\n\n  if (!ignorePound) {\n    goog.asserts.assert(message.search('#') == -1, 'Not all # were replaced.');\n  }\n\n  while (this.literals_.length > 0) {\n    message = message.replace(\n        this.buildPlaceholder_(this.literals_), this.literals_.pop());\n  }\n\n  return message;\n};\n\n\n/**\n * Parses generic block and returns a formatted string.\n * @param {!Array<!goog.i18n.MessageFormat.BlockTypeVal_>} parsedPattern\n *     Holds parsed tree.\n * @param {!Object} namedParameters Parameters that either influence\n *     the formatting or are used as actual data.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatBlock_ = function(\n    parsedPattern, namedParameters, ignorePound, result) {\n  'use strict';\n  for (var i = 0; i < parsedPattern.length; i++) {\n    switch (parsedPattern[i].type) {\n      case goog.i18n.MessageFormat.BlockType_.STRING:\n        result.push(parsedPattern[i].value);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.SIMPLE:\n        var pattern = parsedPattern[i].value;\n        this.formatSimplePlaceholder_(pattern, namedParameters, result);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.SELECT:\n        var pattern = parsedPattern[i].value;\n        this.formatSelectBlock_(pattern, namedParameters, ignorePound, result);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.PLURAL:\n        var pattern = parsedPattern[i].value;\n        this.formatPluralOrdinalBlock_(\n            pattern, namedParameters, goog.i18n.pluralRules.select, ignorePound,\n            result);\n        break;\n      case goog.i18n.MessageFormat.BlockType_.ORDINAL:\n        var pattern = parsedPattern[i].value;\n        this.formatPluralOrdinalBlock_(\n            pattern, namedParameters, goog.i18n.ordinalRules.select,\n            ignorePound, result);\n        break;\n      default:\n        goog.asserts.fail('Unrecognized block type: ' + parsedPattern[i].type);\n    }\n  }\n};\n\n\n/**\n * Formats simple placeholder.\n * @param {!Object} parsedPattern JSON object containing placeholder info.\n * @param {!Object} namedParameters Parameters that are used as actual data.\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatSimplePlaceholder_ = function(\n    parsedPattern, namedParameters, result) {\n  'use strict';\n  var value = namedParameters[parsedPattern];\n  if (value === undefined) {\n    result.push('Undefined parameter - ' + parsedPattern);\n    return;\n  }\n\n  // Don't push the value yet, it may contain any of # { } in it which\n  // will break formatter. Insert a placeholder and replace at the end.\n  this.literals_.push(value);\n  result.push(this.buildPlaceholder_(this.literals_));\n};\n\n\n/**\n * Formats select block. Only one option is selected.\n * @param {{argumentIndex:?}} parsedPattern JSON object containing select\n *     block info.\n * @param {!Object} namedParameters Parameters that either influence\n *     the formatting or are used as actual data.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatSelectBlock_ = function(\n    parsedPattern, namedParameters, ignorePound, result) {\n  'use strict';\n  var argumentIndex = parsedPattern.argumentIndex;\n  if (namedParameters[argumentIndex] === undefined) {\n    result.push('Undefined parameter - ' + argumentIndex);\n    return;\n  }\n\n  var option = parsedPattern[namedParameters[argumentIndex]];\n  if (option === undefined) {\n    option = parsedPattern[goog.i18n.MessageFormat.OTHER_];\n    goog.asserts.assertArray(\n        option, 'Invalid option or missing other option for select block.');\n  }\n\n  this.formatBlock_(option, namedParameters, ignorePound, result);\n};\n\n\n/**\n * Formats plural or selectordinal block. Only one option is selected and all #\n * are replaced.\n * @param {{argumentIndex, argumentOffset}} parsedPattern JSON object\n *     containing plural block info.\n * @param {!Object} namedParameters Parameters that either influence\n *     the formatting or are used as actual data.\n * @param {function(number, number=):string} pluralSelector  A select function\n *     from goog.i18n.pluralRules or goog.i18n.ordinalRules which determines\n *     which plural/ordinal form to use based on the input number's cardinality.\n * @param {boolean} ignorePound If true, treat '#' in plural messages as a\n *     literary character, else treat it as an ICU syntax character, resolving\n *     to the number (plural_variable - offset).\n * @param {!Array<string>} result Each formatting stage appends its product\n *     to the result.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.formatPluralOrdinalBlock_ = function(\n    parsedPattern, namedParameters, pluralSelector, ignorePound, result) {\n  'use strict';\n  var argumentIndex = parsedPattern.argumentIndex;\n  var argumentOffset = parsedPattern.argumentOffset;\n  var pluralValue = +namedParameters[argumentIndex];\n  if (isNaN(pluralValue)) {\n    // TODO(user): Distinguish between undefined and invalid parameters.\n    result.push('Undefined or invalid parameter - ' + argumentIndex);\n    return;\n  }\n  var diff = pluralValue - argumentOffset;\n\n  // Check if there is an exact match.\n  var option = parsedPattern[namedParameters[argumentIndex]];\n  if (option === undefined) {\n    var item = pluralSelector(Math.abs(diff));\n    goog.asserts.assertString(item, 'Invalid plural key.');\n\n    option = parsedPattern[item];\n\n    // If option is not provided fall back to \"other\".\n    if (option === undefined) {\n      option = parsedPattern[goog.i18n.MessageFormat.OTHER_];\n    }\n\n    goog.asserts.assertArray(\n        option, 'Invalid option or missing other option for plural block.');\n  }\n\n  var pluralResult = [];\n  this.formatBlock_(option, namedParameters, ignorePound, pluralResult);\n  var plural = pluralResult.join('');\n  goog.asserts.assertString(plural, 'Empty block in plural.');\n  if (ignorePound) {\n    result.push(plural);\n  } else {\n    var localeAwareDiff = this.numberFormatter_.format(diff);\n    result.push(plural.replace(/#/g, localeAwareDiff));\n  }\n};\n\n\n/**\n * Set up the MessageFormat.\n * Parses input pattern into an array, for faster reformatting with\n * different input parameters.\n * Parsing is locale independent.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.init_ = function() {\n  'use strict';\n  if (this.pattern_) {\n    this.initialLiterals_ = [];\n    var pattern = this.insertPlaceholders_(this.pattern_);\n\n    this.parsedPattern_ = this.parseBlock_(pattern);\n    this.pattern_ = null;\n  }\n};\n\n\n/**\n * Replaces string literals with literal placeholders.\n * Literals are string of the form '}...', '{...' and '#...' where ... is\n * set of characters not containing '\n * Builds a dictionary so we can recover literals during format phase.\n * @param {string} pattern Pattern to clean up.\n * @return {string} Pattern with literals replaced with placeholders.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.insertPlaceholders_ = function(pattern) {\n  'use strict';\n  var literals = this.initialLiterals_;\n  var buildPlaceholder = goog.bind(this.buildPlaceholder_, this);\n\n  // First replace '' with single quote placeholder since they can be found\n  // inside other literals.\n  pattern = pattern.replace(\n      goog.i18n.MessageFormat.REGEX_DOUBLE_APOSTROPHE_, function() {\n        'use strict';\n        literals.push('\\'');\n        return buildPlaceholder(literals);\n      });\n\n  pattern = pattern.replace(\n      goog.i18n.MessageFormat.REGEX_LITERAL_, function(match, text) {\n        'use strict';\n        literals.push(text);\n        return buildPlaceholder(literals);\n      });\n\n  return pattern;\n};\n\n\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * @param {string} pattern (sub)Pattern to be broken.\n * @return {!Array<goog.i18n.MessageFormat.TypeVal_>}\n * @private\n */\ngoog.i18n.MessageFormat.prototype.extractParts_ = function(pattern) {\n  'use strict';\n  var prevPos = 0;\n  var braceStack = [];\n  var results = [];\n\n  var braces = /[{}]/g;\n  braces.lastIndex = 0;  // lastIndex doesn't get set to 0 so we have to.\n  var match;\n\n  while (match = braces.exec(pattern)) {\n    var pos = match.index;\n    if (match[0] == '}') {\n      var brace = braceStack.pop();\n      goog.asserts.assert(\n          brace !== undefined && brace == '{', 'No matching { for }.');\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        var part = {};\n        part.type = goog.i18n.MessageFormat.Element_.BLOCK;\n        part.value = pattern.substring(prevPos, pos);\n        results.push(part);\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        var substring = pattern.substring(prevPos, pos);\n        if (substring != '') {\n          results.push({\n            type: goog.i18n.MessageFormat.Element_.STRING,\n            value: substring\n          });\n        }\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n\n  // Take care of the final string, and check if the braceStack is empty.\n  goog.asserts.assert(\n      braceStack.length == 0, 'There are mismatched { or } in the pattern.');\n\n  var substring = pattern.substring(prevPos);\n  if (substring != '') {\n    results.push(\n        {type: goog.i18n.MessageFormat.Element_.STRING, value: substring});\n  }\n\n  return results;\n};\n\n\n/**\n * A regular expression to parse the plural block, extracting the argument\n * index and offset (if any).\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.PLURAL_BLOCK_RE_ =\n    /^\\s*(\\w+)\\s*,\\s*plural\\s*,(?:\\s*offset:(\\d+))?/;\n\n\n/**\n * A regular expression to parse the ordinal block, extracting the argument\n * index.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.ORDINAL_BLOCK_RE_ = /^\\s*(\\w+)\\s*,\\s*selectordinal\\s*,/;\n\n\n/**\n * A regular expression to parse the select block, extracting the argument\n * index.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.MessageFormat.SELECT_BLOCK_RE_ = /^\\s*(\\w+)\\s*,\\s*select\\s*,/;\n\n\n/**\n * Detects which type of a block is the pattern.\n * @param {string} pattern Content of the block.\n * @return {goog.i18n.MessageFormat.BlockType_} One of the block types.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseBlockType_ = function(pattern) {\n  'use strict';\n  if (goog.i18n.MessageFormat.PLURAL_BLOCK_RE_.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.PLURAL;\n  }\n\n  if (goog.i18n.MessageFormat.ORDINAL_BLOCK_RE_.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.ORDINAL;\n  }\n\n  if (goog.i18n.MessageFormat.SELECT_BLOCK_RE_.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.SELECT;\n  }\n\n  if (/^\\s*\\w+\\s*/.test(pattern)) {\n    return goog.i18n.MessageFormat.BlockType_.SIMPLE;\n  }\n\n  return goog.i18n.MessageFormat.BlockType_.UNKNOWN;\n};\n\n\n/**\n * Parses generic block.\n * @param {string} pattern Content of the block to parse.\n * @return {!Array<!goog.i18n.MessageFormat.BlockTypeVal_>} Subblocks marked as\n *     strings, select...\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseBlock_ = function(pattern) {\n  'use strict';\n  var result = [];\n  var parts = this.extractParts_(pattern);\n  for (var i = 0; i < parts.length; i++) {\n    var block = {};\n    if (goog.i18n.MessageFormat.Element_.STRING == parts[i].type) {\n      block.type = goog.i18n.MessageFormat.BlockType_.STRING;\n      block.value = parts[i].value;\n    } else if (goog.i18n.MessageFormat.Element_.BLOCK == parts[i].type) {\n      var blockType = this.parseBlockType_(parts[i].value);\n\n      switch (blockType) {\n        case goog.i18n.MessageFormat.BlockType_.SELECT:\n          block.type = goog.i18n.MessageFormat.BlockType_.SELECT;\n          block.value = this.parseSelectBlock_(parts[i].value);\n          break;\n        case goog.i18n.MessageFormat.BlockType_.PLURAL:\n          block.type = goog.i18n.MessageFormat.BlockType_.PLURAL;\n          block.value = this.parsePluralBlock_(parts[i].value);\n          break;\n        case goog.i18n.MessageFormat.BlockType_.ORDINAL:\n          block.type = goog.i18n.MessageFormat.BlockType_.ORDINAL;\n          block.value = this.parseOrdinalBlock_(parts[i].value);\n          break;\n        case goog.i18n.MessageFormat.BlockType_.SIMPLE:\n          block.type = goog.i18n.MessageFormat.BlockType_.SIMPLE;\n          block.value = parts[i].value;\n          break;\n        default:\n          goog.asserts.fail(\n              'Unknown block type for pattern: ' + parts[i].value);\n      }\n    } else {\n      goog.asserts.fail('Unknown part of the pattern.');\n    }\n    result.push(block);\n  }\n\n  return result;\n};\n\n\n/**\n * Parses a select type of a block and produces JSON object for it.\n * @param {string} pattern Subpattern that needs to be parsed as select pattern.\n * @return {!Object<string, !Array<!goog.i18n.MessageFormat.BlockTypeVal_>>}\n *     Object with select block info.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseSelectBlock_ = function(pattern) {\n  'use strict';\n  var argumentIndex = '';\n  var replaceRegex = goog.i18n.MessageFormat.SELECT_BLOCK_RE_;\n  pattern = pattern.replace(replaceRegex, function(string, name) {\n    'use strict';\n    argumentIndex = name;\n    return '';\n  });\n  var result = {};\n  result.argumentIndex = argumentIndex;\n\n  var parts = this.extractParts_(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  var pos = 0;\n  while (pos < parts.length) {\n    var key = parts[pos].value;\n    goog.asserts.assertString(key, 'Missing select key element.');\n\n    pos++;\n    goog.asserts.assert(\n        pos < parts.length, 'Missing or invalid select value element.');\n\n    var value;\n    if (goog.i18n.MessageFormat.Element_.BLOCK == parts[pos].type) {\n      value = this.parseBlock_(parts[pos].value);\n    } else {\n      goog.asserts.fail('Expected block type.');\n    }\n    result[key.replace(/\\s/g, '')] = value;\n    pos++;\n  }\n\n  goog.asserts.assertArray(\n      result[goog.i18n.MessageFormat.OTHER_],\n      'Missing other key in select statement.');\n  return result;\n};\n\n\n/**\n * Parses a plural type of a block and produces JSON object for it.\n * @param {string} pattern Subpattern that needs to be parsed as plural pattern.\n * @return {!Object<string, !Array<!goog.i18n.MessageFormat.BlockTypeVal_>>}\n *     Object with select block info.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parsePluralBlock_ = function(pattern) {\n  'use strict';\n  var argumentIndex = '';\n  var argumentOffset = 0;\n  var replaceRegex = goog.i18n.MessageFormat.PLURAL_BLOCK_RE_;\n  pattern = pattern.replace(replaceRegex, function(string, name, offset) {\n    'use strict';\n    argumentIndex = name;\n    if (offset) {\n      argumentOffset = parseInt(offset, 10);\n    }\n    return '';\n  });\n\n  var result = {};\n  result.argumentIndex = argumentIndex;\n  result.argumentOffset = argumentOffset;\n\n  var parts = this.extractParts_(pattern);\n  // Looking for (key block)+ sequence.\n  var pos = 0;\n  while (pos < parts.length) {\n    var key = parts[pos].value;\n    goog.asserts.assertString(key, 'Missing plural key element.');\n\n    pos++;\n    goog.asserts.assert(\n        pos < parts.length, 'Missing or invalid plural value element.');\n\n    var value;\n    if (goog.i18n.MessageFormat.Element_.BLOCK == parts[pos].type) {\n      value = this.parseBlock_(parts[pos].value);\n    } else {\n      goog.asserts.fail('Expected block type.');\n    }\n    result[key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1')] = value;\n    pos++;\n  }\n\n  goog.asserts.assertArray(\n      result[goog.i18n.MessageFormat.OTHER_],\n      'Missing other key in plural statement.');\n\n  return result;\n};\n\n\n/**\n * Parses an ordinal type of a block and produces JSON object for it.\n * For example the input string:\n *  '{FOO, selectordinal, one {Message A}other {Message B}}'\n * Should result in the output object:\n * {\n *   argumentIndex: 'FOO',\n *   argumentOffest: 0,\n *   one: [ { type: 4, value: 'Message A' } ],\n *   other: [ { type: 4, value: 'Message B' } ]\n * }\n * @param {string} pattern Subpattern that needs to be parsed as plural pattern.\n * @return {!Object} Object with select block info.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.parseOrdinalBlock_ = function(pattern) {\n  'use strict';\n  var argumentIndex = '';\n  var replaceRegex = goog.i18n.MessageFormat.ORDINAL_BLOCK_RE_;\n  pattern = pattern.replace(replaceRegex, function(string, name) {\n    'use strict';\n    argumentIndex = name;\n    return '';\n  });\n\n  var result = {};\n  result.argumentIndex = argumentIndex;\n  result.argumentOffset = 0;\n\n  var parts = this.extractParts_(pattern);\n  // Looking for (key block)+ sequence.\n  var pos = 0;\n  while (pos < parts.length) {\n    var key = parts[pos].value;\n    goog.asserts.assertString(key, 'Missing ordinal key element.');\n\n    pos++;\n    goog.asserts.assert(\n        pos < parts.length, 'Missing or invalid ordinal value element.');\n\n    if (goog.i18n.MessageFormat.Element_.BLOCK == parts[pos].type) {\n      var value = this.parseBlock_(parts[pos].value);\n    } else {\n      goog.asserts.fail('Expected block type.');\n    }\n    result[key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1')] = value;\n    pos++;\n  }\n\n  goog.asserts.assertArray(\n      result[goog.i18n.MessageFormat.OTHER_],\n      'Missing other key in selectordinal statement.');\n\n  return result;\n};\n\n\n/**\n * Builds a placeholder from the last index of the array.\n * @param {!Array<string>} literals All literals encountered during parse.\n * @return {string} \\uFDDF_ + last index + _.\n * @private\n */\ngoog.i18n.MessageFormat.prototype.buildPlaceholder_ = function(literals) {\n  'use strict';\n  goog.asserts.assert(literals.length > 0, 'Literal array is empty.');\n\n  var index = (literals.length - 1).toString(10);\n  return goog.i18n.MessageFormat.LITERAL_PLACEHOLDER_ + index + '_';\n};\n"],
"names":["goog","provide","require","i18n","MessageFormat","goog.i18n.MessageFormat","pattern","pattern_","initialLiterals_","literals_","parsedPattern_","numberFormatter_","getNumberFormatter_","numberFormatterSymbols_","compactNumberFormatterSymbols_","LITERAL_PLACEHOLDER_","Element_","STRING","BLOCK","BlockType_","PLURAL","ORDINAL","SELECT","SIMPLE","UNKNOWN","OTHER_","REGEX_LITERAL_","RegExp","REGEX_DOUBLE_APOSTROPHE_","TypeVal_","BlockTypeVal_","goog.i18n.MessageFormat.getNumberFormatter_","currentSymbols","NumberFormatSymbols","currentCompactSymbols","CompactNumberFormatSymbols","NumberFormat","Format","DECIMAL","prototype","format","goog.i18n.MessageFormat.prototype.format","namedParameters","format_","formatIgnoringPound","goog.i18n.MessageFormat.prototype.formatIgnoringPound","goog.i18n.MessageFormat.prototype.format_","ignorePound","init_","length","array","clone","result","formatBlock_","message","join","asserts","assert","search","replace","buildPlaceholder_","pop","goog.i18n.MessageFormat.prototype.formatBlock_","parsedPattern","i","type","push","value","formatSimplePlaceholder_","formatSelectBlock_","formatPluralOrdinalBlock_","pluralRules","select","ordinalRules","fail","goog.i18n.MessageFormat.prototype.formatSimplePlaceholder_","undefined","goog.i18n.MessageFormat.prototype.formatSelectBlock_","argumentIndex","option","assertArray","goog.i18n.MessageFormat.prototype.formatPluralOrdinalBlock_","pluralSelector","argumentOffset","pluralValue","isNaN","diff","item","Math","abs","assertString","pluralResult","plural","localeAwareDiff","goog.i18n.MessageFormat.prototype.init_","insertPlaceholders_","parseBlock_","goog.i18n.MessageFormat.prototype.insertPlaceholders_","literals","buildPlaceholder","bind","match","text","extractParts_","goog.i18n.MessageFormat.prototype.extractParts_","prevPos","braceStack","results","braces","lastIndex","exec","pos","index","brace","part","substring","PLURAL_BLOCK_RE_","ORDINAL_BLOCK_RE_","SELECT_BLOCK_RE_","parseBlockType_","goog.i18n.MessageFormat.prototype.parseBlockType_","test","goog.i18n.MessageFormat.prototype.parseBlock_","parts","block","blockType","parseSelectBlock_","parsePluralBlock_","parseOrdinalBlock_","goog.i18n.MessageFormat.prototype.parseSelectBlock_","replaceRegex","string","name","key","goog.i18n.MessageFormat.prototype.parsePluralBlock_","offset","parseInt","goog.i18n.MessageFormat.prototype.parseOrdinalBlock_","goog.i18n.MessageFormat.prototype.buildPlaceholder_","toString"]
}
