{
"version":3,
"file":"goog.i18n.numberformat.js",
"lineCount":1017,
"mappings":"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",
"sources":["goog/i18n/numberformat.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Number format/parse library with locale support.\n */\n\n/**\n * Namespace for locale number format functions\n */\ngoog.provide('goog.i18n.NumberFormat');\ngoog.provide('goog.i18n.NumberFormat.CurrencyStyle');\ngoog.provide('goog.i18n.NumberFormat.Format');\n\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.CompactNumberFormatSymbols');\n\ngoog.require('goog.i18n.LocaleFeature');\ngoog.require('goog.i18n.NativeLocaleDigits');\n\ngoog.require('goog.i18n.NumberFormatSymbols');\ngoog.require('goog.i18n.NumberFormatSymbolsType');\ngoog.require('goog.i18n.NumberFormatSymbols_u_nu_latn');\ngoog.require('goog.i18n.currency');\ngoog.require('goog.math');\ngoog.require('goog.string');\n\ngoog.scope(function() {\n\n// For referencing modules\nconst LocaleFeature = goog.module.get('goog.i18n.LocaleFeature');\nconst NativeLocaleDigits = goog.module.get('goog.i18n.NativeLocaleDigits');\n\n/**\n * Constructor of NumberFormat.\n * @param {number|string} pattern The number that indicates a predefined\n *     number format pattern.\n * @param {string=} opt_currency Optional international currency\n *     code. This determines the currency code/symbol used in format/parse. If\n *     not given, the currency code for the current locale will be used.\n * @param {number=} opt_currencyStyle currency style, value defined in\n *     goog.i18n.NumberFormat.CurrencyStyle. If not given, the currency style\n *     for the current locale will be used.\n * @param {!goog.i18n.NumberFormatSymbolsType.Type=} opt_symbols Optional number\n *     format symbols map, analogous to goog.i18n.NumberFormatSymbols. If\n *     present, this overrides the symbols from the current locale, such as the\n *     percent sign and minus sign.\n * @constructor\n */\ngoog.i18n.NumberFormat = function(\n    pattern, opt_currency, opt_currencyStyle, opt_symbols) {\n  'use strict';\n  if (opt_currency && !goog.i18n.currency.isValid(opt_currency)) {\n    throw new TypeError('Currency must be valid ISO code');\n  }\n\n  /**\n   * Remember if the implementation is ECMAScript\n   * @private {?goog.global.Intl.NumberFormat}\n   */\n  this.intlFormatter_ = null;\n  /** @private {boolean} */\n  this.resetSignificantDigits_ = false;\n  /** @private {boolean} */\n  this.resetFractionDigits_ = false;\n  /** @private {boolean} */\n  this.resetShowTrailingZeros_ = false;\n\n  /** @const @private {?string} */\n  this.intlCurrencyCode_ = opt_currency ? opt_currency.toUpperCase() : null;\n\n  /** @const @private {number} */\n  this.currencyStyle_ =\n      opt_currencyStyle || goog.i18n.NumberFormat.CurrencyStyle.LOCAL;\n\n  /** @const @private {?Object<string, string>} */\n  this.overrideNumberFormatSymbols_ = opt_symbols || null;\n\n  /** @private {number} */\n  this.maximumIntegerDigits_ = 40;\n  /** @private {number} */\n  this.minimumIntegerDigits_ = 1;\n  /** @private {number} */\n  this.significantDigits_ = 0;  // invariant, <= maximumFractionDigits\n  /** @private {number} */\n  this.maximumFractionDigits_ = 3;  // invariant, >= minFractionDigits\n  /** @private {number} */\n  this.minimumFractionDigits_ = 0;\n  /** @private {number} */\n  this.minExponentDigits_ = 0;\n  /** @private {boolean} */\n  this.useSignForPositiveExponent_ = false;\n\n  /**\n   * Whether to show trailing zeros in the fraction when significantDigits_ is\n   * positive.\n   * @private {boolean}\n   */\n  this.showTrailingZeros_ = false;\n\n  /** @private {string} */\n  this.positivePrefix_ = '';\n  /** @private {string} */\n  this.positiveSuffix_ = '';\n  /** @private {string} */\n  this.negativePrefix_ = this.getNumberFormatSymbols_().MINUS_SIGN;\n  /** @private {string} */\n  this.negativeSuffix_ = '';\n\n  // The multiplier for use in percent, per mille, etc.\n  /** @private {number} */\n  this.multiplier_ = 1;\n\n  /**\n   * True if the percent/permill sign of the negative pattern is expected.\n   * @private {boolean}\n   */\n  this.negativePercentSignExpected_ = false;\n\n  /**\n   * The grouping array is used to store the values of each number group\n   * following left of the decimal place. For example, a number group with\n   * goog.i18n.NumberFormat('#,##,###') should have [3,2] where 2 is the\n   * repeated number group following a fixed number grouping of size 3.\n   * @private {!Array<number>}\n   * @const\n   */\n  this.groupingArray_ = [];\n\n  /** @private {boolean} */\n  this.decimalSeparatorAlwaysShown_ = false;\n  /** @private {boolean} */\n  this.useExponentialNotation_ = false;\n  /** @private {!goog.i18n.NumberFormat.CompactStyle} */\n  this.compactStyle_ = goog.i18n.NumberFormat.CompactStyle.NONE;\n\n  /**\n   * The number to base the formatting on when using compact styles, or null\n   * if formatting should not be based on another number.\n   * @type {?number}\n   * @private\n   */\n  this.baseFormattingNumber_ = null;\n\n  // Original numeric pattern. Needed because JS modifies this.pattern_*/\n  /** @const @private {number} */\n  this.inputPattern_ = (typeof pattern === 'number') ? pattern : -1;\n\n  /** @private {string} */\n  this.pattern_ = (typeof pattern === 'string') ? pattern : '';\n\n  if (goog.i18n.NumberFormat.USE_ECMASCRIPT_I18N_NUMFORMAT &&\n      (typeof pattern === 'number')\n      // COMPACT formats re: BUG b/209630094 for Firefox 94.\n      // Do not use ECMAScript mode for compact formatting.\n      && pattern != goog.i18n.NumberFormat.Format.COMPACT_SHORT &&\n      pattern != goog.i18n.NumberFormat.Format.COMPACT_LONG) {\n    // Use Native mode for regular patterns\n    this.SetUpIntlFormatter_(this.inputPattern_);\n  } else {\n    // JavaScript implementation for older browswer or a string pattern.\n    this.setFormatterToPolyfill_(pattern);\n  }\n};\n\n// For referencing goog.i18n.USE_ECMASCRIPT_I18N_NUMFORMAT to determine\n// compile-time choice of ECMAScript vs. JavaScript implementation\n// and data.\n\n/** {boolean} */\ngoog.i18n.NumberFormat.USE_ECMASCRIPT_I18N_NUMFORMAT =\n    goog.FEATURESET_YEAR >= 2020;\n\n/**\n * Standard number formatting patterns.\n * @enum {number}\n */\ngoog.i18n.NumberFormat.Format = {\n  DECIMAL: 1,\n  SCIENTIFIC: 2,\n  PERCENT: 3,\n  CURRENCY: 4,\n  COMPACT_SHORT: 5,\n  COMPACT_LONG: 6\n};\n\n\n/**\n * Currency styles.\n * @enum {number}\n */\ngoog.i18n.NumberFormat.CurrencyStyle = {\n  LOCAL: 0,     // currency style as it is used in its circulating country.\n  PORTABLE: 1,  // currency style that differentiate it from other popular ones.\n  GLOBAL: 2     // currency style that is unique among all currencies.\n};\n\n\n/**\n * Compacting styles.\n * @enum {number}\n */\ngoog.i18n.NumberFormat.CompactStyle = {\n  NONE: 0,   // Don't compact.\n  SHORT: 1,  // Short compact form, such as 1.2B.\n  LONG: 2    // Long compact form, such as 1.2 billion.\n};\n\n\n/**\n * Records if global enforcement of ASCII digits has changed.\n * type {boolean}\n * @private\n */\ngoog.i18n.NumberFormat.resetEnforceAsciiDigits_ = false;\n\n/**\n * If the usage of Ascii digits should be enforced.\n * @type {boolean}\n * @private\n */\ngoog.i18n.NumberFormat.enforceAsciiDigits_ = false;\n\n/**\n * Set if the usage of Ascii digits in formatting should be enforced.\n * NOTE: This function must be called before constructing NumberFormat.\n *\n * @param {boolean} doEnforce Boolean value about if Ascii digits should be\n *     enforced.\n */\ngoog.i18n.NumberFormat.setEnforceAsciiDigits = function(doEnforce) {\n  'use strict';\n  goog.i18n.NumberFormat.resetEnforceAsciiDigits_ =\n      (doEnforce != goog.i18n.NumberFormat.enforceAsciiDigits_);\n  goog.i18n.NumberFormat.enforceAsciiDigits_ = doEnforce;\n};\n\n\n/**\n * Return if Ascii digits is enforced.\n * @return {boolean} If Ascii digits is enforced.\n */\ngoog.i18n.NumberFormat.isEnforceAsciiDigits = function() {\n  'use strict';\n  return goog.i18n.NumberFormat.enforceAsciiDigits_;\n};\n\n\n/**\n * Returns the current NumberFormatSymbols.\n * @return {?}\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getNumberFormatSymbols_ = function() {\n  'use strict';\n  return this.overrideNumberFormatSymbols_ ||\n      (goog.i18n.NumberFormat.enforceAsciiDigits_ ?\n           goog.i18n.NumberFormatSymbols_u_nu_latn :\n           goog.i18n.NumberFormatSymbols);\n};\n\n\n/**\n * Returns the currency code.\n * @return {string}\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getCurrencyCode_ = function() {\n  'use strict';\n  return this.intlCurrencyCode_ ||\n      this.getNumberFormatSymbols_().DEF_CURRENCY_CODE;\n};\n\n\n/**\n * Sets minimum number of fraction digits.\n * @param {number} min the minimum.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setMinimumFractionDigits = function(min) {\n  'use strict';\n  if (this.significantDigits_ > 0 && min > 0) {\n    throw new Error(\n        'Can\\'t combine significant digits and minimum fraction digits');\n  }\n  // Even if it's the same value, remember the intention to reset the value.\n  this.resetFractionDigits_ =\n      this.resetFractionDigits_ || (min != this.minimumFractionDigits_);\n  this.minimumFractionDigits_ = min;\n  return this;\n};\n\n\n/**\n * Gets minimum number of fraction digits.\n * @return {number} The number of minimum fraction digits.\n */\ngoog.i18n.NumberFormat.prototype.getMinimumFractionDigits = function() {\n  'use strict';\n  return this.minimumFractionDigits_;\n};\n\n\n/**\n * Sets maximum number of fraction digits.\n * @param {number} max the maximum.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setMaximumFractionDigits = function(max) {\n  'use strict';\n  if (max > 308) {\n    // Math.pow(10, 309) becomes Infinity which breaks the logic in this class.\n    throw new Error('Unsupported maximum fraction digits: ' + max);\n  }\n  // Even if it's the same value, remember the intention to reset the value.\n  this.resetFractionDigits_ =\n      this.resetFractionDigits_ || (max != this.maximumFractionDigits_);\n  this.maximumFractionDigits_ = max;\n  return this;\n};\n\n\n/**\n * Gets maximum number of fraction digits.\n * @return {number} The number of maximum fraction digits.\n */\ngoog.i18n.NumberFormat.prototype.getMaximumFractionDigits = function() {\n  'use strict';\n  return this.maximumFractionDigits_;\n};\n\n/**\n * Sets number of significant digits to show. Only fractions will be rounded.\n * Regardless of the number of significant digits set, the number of fractional\n * digits shown will always be capped by the maximum number of fractional digits\n * set on {@link #setMaximumFractionDigits}.\n * @param {number} number The number of significant digits to include.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setSignificantDigits = function(number) {\n  'use strict';\n  if (this.minimumFractionDigits_ > 0 && number >= 0) {\n    throw new Error(\n        'Can\\'t combine significant digits and minimum fraction digits');\n  }\n  this.resetSignificantDigits_ = (number !== this.significantDigits_);\n\n  this.significantDigits_ = number;\n  return this;\n};\n\n\n/**\n * Gets number of significant digits to show. Only fractions will be rounded.\n * @return {number} The number of significant digits to include.\n */\ngoog.i18n.NumberFormat.prototype.getSignificantDigits = function() {\n  'use strict';\n  return this.significantDigits_;\n};\n\n\n/**\n * Sets whether trailing fraction zeros should be shown when significantDigits_\n * is positive. If this is true and significantDigits_ is 2, 1 will be formatted\n * as '1.0'.\n * @param {boolean} showTrailingZeros Whether trailing zeros should be shown.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setShowTrailingZeros = function(\n    showTrailingZeros) {\n  'use strict';\n  this.showTrailingZeros_ = (showTrailingZeros != this.resetShowTrailingZeros_);\n  return this;\n};\n\n/**\n * Sets a number to base the formatting on when compact style formatting is\n * used. If this is null, the formatting should be based only on the number to\n * be formatting.\n *\n * This base formatting number can be used to format the target number as\n * another number would be formatted. For example, 100,000 is normally formatted\n * as \"100K\" in the COMPACT_SHORT format. To instead format it as '0.1M', the\n * base number could be set to 1,000,000 in order to force all numbers to be\n * formatted in millions. Similarly, 1,000,000,000 would normally be formatted\n * as '1B' and setting the base formatting number to 1,000,000, would cause it\n * to be formatted instead as '1,000M'.\n *\n * @param {?number} baseFormattingNumber The number to base formatting on, or\n * null if formatting should not be based on another number.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setBaseFormatting = function(\n    baseFormattingNumber) {\n  'use strict';\n  goog.asserts.assert(\n      baseFormattingNumber === null || isFinite(baseFormattingNumber));\n  this.baseFormattingNumber_ = baseFormattingNumber;\n  return this;\n};\n\n/**\n * Gets the number on which compact formatting is currently based, or null if\n * no such number is set. See setBaseFormatting() for more information.\n * @return {?number}\n */\ngoog.i18n.NumberFormat.prototype.getBaseFormatting = function() {\n  'use strict';\n  return this.baseFormattingNumber_;\n};\n\n/**\n * Set formatter to polyfill mode when Intl doesn't support Closure features.\n * Called when setting some formatter behavior after constructing the Intl\n * object.\n * @param {number|string} pattern Value to initialize object in JavaScript.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.setFormatterToPolyfill_ = function(pattern) {\n  // JavaScript implementation for older browswer or a string pattern.\n  this.intlFormatter_ = null;\n  if (typeof pattern === 'number') {\n    this.applyStandardPattern_(pattern);\n  } else {\n    this.applyPattern_(pattern);\n  }\n};\n\n/**\n * Apply provided pattern, result are stored in member variables.\n *\n * @param {string} pattern String pattern being applied.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.applyPattern_ = function(pattern) {\n  'use strict';\n  this.pattern_ = pattern.replace(/ /g, '\\u00a0');\n  const pos = [0];\n\n  this.positivePrefix_ = this.parseAffix_(pattern, pos);\n  const trunkStart = pos[0];\n  this.parseTrunk_(pattern, pos);\n  const trunkLen = pos[0] - trunkStart;\n  this.positiveSuffix_ = this.parseAffix_(pattern, pos);\n  if (pos[0] < pattern.length &&\n      pattern.charAt(pos[0]) == goog.i18n.NumberFormat.PATTERN_SEPARATOR_) {\n    pos[0]++;\n    if (this.multiplier_ != 1) this.negativePercentSignExpected_ = true;\n    this.negativePrefix_ = this.parseAffix_(pattern, pos);\n    // we assume this part is identical to positive part.\n    // user must make sure the pattern is correctly constructed.\n    pos[0] += trunkLen;\n    this.negativeSuffix_ = this.parseAffix_(pattern, pos);\n  } else {\n    // if no negative affix specified, they share the same positive affix\n    this.negativePrefix_ += this.positivePrefix_;\n    this.negativeSuffix_ += this.positiveSuffix_;\n  }\n};\n\n\n/**\n * Apply a predefined pattern to NumberFormat object.\n * @param {number} patternType The number that indicates a predefined number\n *     format pattern.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.applyStandardPattern_ = function(patternType) {\n  'use strict';\n  switch (patternType) {\n    case goog.i18n.NumberFormat.Format.DECIMAL:\n      this.applyPattern_(this.getNumberFormatSymbols_().DECIMAL_PATTERN);\n      break;\n    case goog.i18n.NumberFormat.Format.SCIENTIFIC:\n      this.applyPattern_(this.getNumberFormatSymbols_().SCIENTIFIC_PATTERN);\n      break;\n    case goog.i18n.NumberFormat.Format.PERCENT:\n      this.applyPattern_(this.getNumberFormatSymbols_().PERCENT_PATTERN);\n      break;\n    case goog.i18n.NumberFormat.Format.CURRENCY:\n      this.applyPattern_(goog.i18n.currency.adjustPrecision(\n          this.getNumberFormatSymbols_().CURRENCY_PATTERN,\n          this.getCurrencyCode_()));\n      break;\n    case goog.i18n.NumberFormat.Format.COMPACT_SHORT:\n      this.applyCompactStyle_(goog.i18n.NumberFormat.CompactStyle.SHORT);\n      break;\n    case goog.i18n.NumberFormat.Format.COMPACT_LONG:\n      this.applyCompactStyle_(goog.i18n.NumberFormat.CompactStyle.LONG);\n      break;\n    default:\n      throw new Error('Unsupported pattern type.');\n  }\n};\n\n\n/**\n * Apply a predefined pattern for shorthand formats.\n * @param {!goog.i18n.NumberFormat.CompactStyle} style the compact style to\n *     set defaults for.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.applyCompactStyle_ = function(style) {\n  'use strict';\n  this.compactStyle_ = style;\n  this.applyPattern_(this.getNumberFormatSymbols_().DECIMAL_PATTERN);\n  this.setMinimumFractionDigits(0);\n  this.setMaximumFractionDigits(2);\n  this.setSignificantDigits(2);\n};\n\n\n/**\n * Parses text string to produce a Number.\n *\n * This method attempts to parse text starting from position \"opt_pos\" if it\n * is given. Otherwise the parse will start from the beginning of the text.\n * When opt_pos presents, opt_pos will be updated to the character next to where\n * parsing stops after the call. If an error occurs, opt_pos won't be updated.\n *\n * @param {string} text The string to be parsed.\n * @param {?Array<number>=} opt_pos Position to pass in and get back.\n * @return {number} Parsed number. This throws an error if the text cannot be\n *     parsed.\n */\ngoog.i18n.NumberFormat.prototype.parse = function(text, opt_pos) {\n  'use strict';\n  let pos = opt_pos || [0];\n\n  if (this.compactStyle_ !== goog.i18n.NumberFormat.CompactStyle.NONE) {\n    throw new Error('Parsing of compact numbers is unimplemented');\n  }\n\n  let ret = NaN;\n\n  // We don't want to handle multiple kinds of space in parsing, normalize the\n  // regular and narrow nbsp to nbsp.\n  text = text.replace(/ |\\u202f/g, '\\u00a0');\n\n  let gotPositive = text.indexOf(this.positivePrefix_, pos[0]) == pos[0];\n  let gotNegative = text.indexOf(this.negativePrefix_, pos[0]) == pos[0];\n\n  // check for the longest match\n  if (gotPositive && gotNegative) {\n    if (this.positivePrefix_.length > this.negativePrefix_.length) {\n      gotNegative = false;\n    } else if (this.positivePrefix_.length < this.negativePrefix_.length) {\n      gotPositive = false;\n    }\n  }\n\n  if (gotPositive) {\n    pos[0] += this.positivePrefix_.length;\n  } else if (gotNegative) {\n    pos[0] += this.negativePrefix_.length;\n  }\n\n  // process digits or Inf, find decimal position\n  if (text.indexOf(this.getNumberFormatSymbols_().INFINITY, pos[0]) == pos[0]) {\n    pos[0] += this.getNumberFormatSymbols_().INFINITY.length;\n    ret = Infinity;\n  } else {\n    ret = this.parseNumber_(text, pos);\n  }\n\n  // check for suffix\n  if (gotPositive) {\n    if (!(text.indexOf(this.positiveSuffix_, pos[0]) == pos[0])) {\n      return NaN;\n    }\n    pos[0] += this.positiveSuffix_.length;\n  } else if (gotNegative) {\n    if (!(text.indexOf(this.negativeSuffix_, pos[0]) == pos[0])) {\n      return NaN;\n    }\n    pos[0] += this.negativeSuffix_.length;\n  }\n\n  return gotNegative ? -ret : ret;\n};\n\n\n/**\n * This function will parse a \"localized\" text into a Number. It needs to\n * handle locale specific decimal, grouping, exponent and digits.\n *\n * @param {string} text The text that need to be parsed.\n * @param {!Array<number>} pos  In/out parsing position. In case of failure,\n *    pos value won't be changed.\n * @return {number} Number value, or NaN if nothing can be parsed.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.parseNumber_ = function(text, pos) {\n  'use strict';\n  let sawDecimal = false;\n  let sawExponent = false;\n  let sawDigit = false;\n  let exponentPos = -1;\n  let scale = 1;\n  const decimal = this.getNumberFormatSymbols_().DECIMAL_SEP;\n  let grouping = this.getNumberFormatSymbols_().GROUP_SEP;\n  const exponentChar = this.getNumberFormatSymbols_().EXP_SYMBOL;\n\n  if (this.compactStyle_ != goog.i18n.NumberFormat.CompactStyle.NONE) {\n    throw new Error('Parsing of compact style numbers is not implemented');\n  }\n\n  // We don't want to handle multiple kinds of space in parsing, normalize the\n  // narrow nbsp to nbsp.\n  grouping = grouping.replace(/\\u202f/g, '\\u00a0');\n\n  let normalizedText = '';\n  for (; pos[0] < text.length; pos[0]++) {\n    const ch = text.charAt(pos[0]);\n    const digit = this.getDigit_(ch);\n    if (digit >= 0 && digit <= 9) {\n      normalizedText += digit;\n      sawDigit = true;\n    } else if (ch == decimal.charAt(0)) {\n      if (sawDecimal || sawExponent) {\n        break;\n      }\n      normalizedText += '.';\n      sawDecimal = true;\n    } else if (\n        ch == grouping.charAt(0) &&\n        ('\\u00a0' != grouping.charAt(0) ||\n         pos[0] + 1 < text.length &&\n             this.getDigit_(text.charAt(pos[0] + 1)) >= 0)) {\n      // Got a grouping character here. When grouping character is nbsp, need\n      // to make sure the character following it is a digit.\n      if (sawDecimal || sawExponent) {\n        break;\n      }\n      continue;\n    } else if (ch == exponentChar.charAt(0)) {\n      if (sawExponent) {\n        break;\n      }\n      normalizedText += 'E';\n      sawExponent = true;\n      exponentPos = pos[0];\n    } else if (ch == '+' || ch == '-') {\n      // Stop parsing if a '+' or '-' sign is found after digits have been found\n      // but it's not located right after an exponent sign.\n      if (sawDigit && exponentPos != pos[0] - 1) {\n        break;\n      }\n      normalizedText += ch;\n    } else if (\n        this.multiplier_ == 1 &&\n        ch == this.getNumberFormatSymbols_().PERCENT.charAt(0)) {\n      // Parse the percent character as part of the number only when it's\n      // not already included in the pattern.\n      if (scale != 1) {\n        break;\n      }\n      scale = 100;\n      if (sawDigit) {\n        pos[0]++;  // eat this character if parse end here\n        break;\n      }\n    } else if (\n        this.multiplier_ == 1 &&\n        ch == this.getNumberFormatSymbols_().PERMILL.charAt(0)) {\n      // Parse the permill character as part of the number only when it's\n      // not already included in the pattern.\n      if (scale != 1) {\n        break;\n      }\n      scale = 1000;\n      if (sawDigit) {\n        pos[0]++;  // eat this character if parse end here\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n\n  // Scale the number when the percent/permill character was included in\n  // the pattern.\n  if (this.multiplier_ != 1) {\n    scale = this.multiplier_;\n  }\n\n  return parseFloat(normalizedText) / scale;\n};\n\n/**\n * Creates Intl native formatter based on settings.\n * Uses pattern type if integer.\n * If a string, try to parse or derive parameters for native mode.\n * @param {number} inputPattern numeric indicator of standard pattern\n * @private\n */\ngoog.i18n.NumberFormat.prototype.SetUpIntlFormatter_ = function(inputPattern) {\n  /** @type {!goog.i18n.NumberFormat.IntlOptions} */\n  const options = {\n    notation: 'standard',  // Default\n    minimumIntegerDigits: Math.min(21, Math.max(1, this.minimumIntegerDigits_))\n  };\n\n  // Create notation based on a enum value.\n  if (this.useSignForPositiveExponent_) {\n    options.signDisplay = 'always';\n  }\n\n  if (goog.i18n.NumberFormat.enforceAsciiDigits_) {\n    options.numberingSystem = 'latn';\n  }\n\n  // If changed from defaults, specify significant or fraction digits.\n  if (this.resetSignificantDigits_) {\n    // !!! Should we also set this minimum. No!\n    options.minimumSignificantDigits = 1;\n    options.maximumSignificantDigits =\n        Math.max(1, Math.min(21, this.significantDigits_));\n  } else if (this.resetFractionDigits_) {\n    options.minimumFractionDigits = Math.max(0, this.minimumFractionDigits_);\n    options.maximumFractionDigits =\n        Math.min(20, Math.max(0, this.maximumFractionDigits_));\n  }\n\n  switch (inputPattern) {\n    case goog.i18n.NumberFormat.Format.DECIMAL:\n      options.style = 'decimal';\n      break;\n    case goog.i18n.NumberFormat.Format.SCIENTIFIC:\n      options.notation = 'scientific';\n      // Special case for scientific notation\n      options.maximumFractionDigits =\n          Math.min(20, Math.max(0, this.minExponentDigits_));\n      break;\n    case goog.i18n.NumberFormat.Format.PERCENT:\n      options.style = 'percent';\n      break;\n    case goog.i18n.NumberFormat.Format.CURRENCY:\n      // From NumberFormatSymbols.\n      options.style = 'currency';\n      const currencyCode = this.getCurrencyCode_();\n      options.currency = currencyCode;\n\n      // Get the precision based on currency code, if available.\n      // Mask off bits regarding formatting.\n      const precision = goog.i18n.currency.isAvailable(currencyCode) ?\n          goog.i18n.currency.CurrencyInfo[currencyCode][0] % 16 :\n          2;\n\n      if (this.resetFractionDigits_) {\n        // Fraction digits were purposely reset, so use those rather than\n        // default for currency.\n        options.minimumFractionDigits =\n            Math.max(this.minimumFractionDigits_, 0);\n        options.maximumFractionDigits =\n            Math.min(this.maximumFractionDigits_, 20);\n      } else {\n        // Use default currency fraction digits.\n        options.minimumFractionDigits = Math.max(0, precision);\n        options.maximumFractionDigits =\n            Math.min(options.minimumFractionDigits, 20);\n      }\n\n      // Map Closure currency styles to Intl currencyDisplay.\n      switch (this.currencyStyle_) {\n        default:\n        case goog.i18n.NumberFormat.CurrencyStyle.PORTABLE:\n          options.currencyDisplay = 'symbol';\n          break;\n        case goog.i18n.NumberFormat.CurrencyStyle.GLOBAL:\n          options.currencyDisplay = 'code';\n          break;\n        case goog.i18n.NumberFormat.CurrencyStyle.LOCAL:\n          options.currencyDisplay = 'symbol';\n      }\n      break;\n    case goog.i18n.NumberFormat.Format.COMPACT_SHORT:\n      this.compactStyle_ = goog.i18n.NumberFormat.CompactStyle.SHORT;\n      options.notation = 'compact';\n      options.compactDisplay = 'short';\n      break;\n    case goog.i18n.NumberFormat.Format.COMPACT_LONG:\n      this.compactStyle_ = goog.i18n.NumberFormat.CompactStyle.LONG;\n      options.notation = 'compact';\n      options.compactDisplay = 'long';\n      break;\n    default:\n      throw new Error(\n          'Unsupported ECMAScript NumberFormat custom pattern = ' +\n          this.pattern_);\n  }\n\n  try {\n    // Create Intl formatter.\n    let locale;\n    if (goog.LOCALE) {\n      locale = goog.LOCALE.replace('_', '-');\n    }\n    if (locale && !goog.i18n.NumberFormat.enforceAsciiDigits_ &&\n        (locale in NativeLocaleDigits.FormatWithLocaleDigits)) {\n      // Sets native digits for same locales as polyfill.\n      options.numberingSystem =\n          NativeLocaleDigits.FormatWithLocaleDigits[locale];\n    }\n    // This works with undefined locale or empty string.\n    this.intlFormatter_ = new Intl.NumberFormat(locale, options);\n  } catch (error) {\n    this.intlFormatter_ = null;\n    throw new Error('ECMAScript NumberFormat error: ' + error);\n  }\n  // Keep track of state.\n  this.resetShowTrailingZeros_ = this.resetSignificantDigits_ =\n      this.resetFractionDigits_ = false;\n  goog.i18n.NumberFormat.resetEnforceAsciiDigits_ = false;\n};\n\n/**\n * Checks options to see if the native formatter needs to be\n * remade.\n * @return {boolean} True if options have changed.\n */\ngoog.i18n.NumberFormat.prototype.NativeOptionsChanged_ = function() {\n  return (\n      this.resetSignificantDigits_ || this.resetFractionDigits_ ||\n      this.resetShowTrailingZeros_ ||\n      goog.i18n.NumberFormat.resetEnforceAsciiDigits_);\n};\n\n/**\n * Formats a Number to produce a string.\n *\n * @param {number} number The Number to be formatted.\n * @return {string} The formatted number string.\n */\ngoog.i18n.NumberFormat.prototype.format = function(number) {\n  'use strict';\n  // Check for compatibility with polyfill implementation.\n  if (this.minimumFractionDigits_ > this.maximumFractionDigits_) {\n    throw new Error('Min value must be less than max value');\n  }\n  if (goog.i18n.NumberFormat.USE_ECMASCRIPT_I18N_NUMFORMAT &&\n      this.intlFormatter_) {\n    return this.formatUsingNativeMode_(number);\n  }\n  // Format using JavaScript\n  if (isNaN(number)) {\n    return this.getNumberFormatSymbols_().NAN;\n  }\n\n  const parts = [];\n  const baseFormattingNumber = (this.baseFormattingNumber_ === null) ?\n      number :\n      this.baseFormattingNumber_;\n  const unit = this.getUnitAfterRounding_(baseFormattingNumber, number);\n  number = goog.i18n.NumberFormat.decimalShift_(number, -unit.divisorBase);\n\n  // in icu code, it is commented that certain computation need to keep the\n  // negative sign for 0.\n  const isNegative = number < 0.0 || number == 0.0 && 1 / number < 0.0;\n\n  if (isNegative) {\n    // Also handle compact number formats\n    if (unit.negative_prefix) {\n      // Compact form includes the negative sign\n      parts.push(unit.negative_prefix);\n    } else {\n      parts.push(unit.prefix);\n      parts.push(this.negativePrefix_);\n    }\n  } else {\n    parts.push(unit.prefix);\n    parts.push(this.positivePrefix_);\n  }\n\n  if (!isFinite(number)) {\n    parts.push(this.getNumberFormatSymbols_().INFINITY);\n  } else {\n    // convert number to non-negative value\n    number *= isNegative ? -1 : 1;\n\n    number *= this.multiplier_;\n    this.useExponentialNotation_ ?\n        this.subformatExponential_(number, parts) :\n        this.subformatFixed_(number, this.minimumIntegerDigits_, parts);\n  }\n\n  if (isNegative) {\n    // Also handle compact number formats\n    if (unit.negative_suffix) {\n      // Compact form includes the negative sign\n      parts.push(unit.negative_suffix);\n    } else {\n      if (isFinite(number)) {\n        // Add scientific or compact suffix only for finite values.\n        // Infinity does not have a scientific or compact suffix in ECMA-402.\n        parts.push(unit.suffix);\n      }\n      parts.push(this.negativeSuffix_);\n    }\n  } else {\n    if (isFinite(number)) {\n      // Add scientific or compact suffix only for finite values.\n      parts.push(unit.suffix);\n    }\n    parts.push(this.positiveSuffix_);\n  }\n  return parts.join('');\n};\n\n/**\n * Formats a Number to produce a string using Intl NumberFormat class.\n *\n * @param {number} number The Number to be formatted.\n * @return {string} The formatted number string.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.formatUsingNativeMode_ = function(number) {\n  if (this.intlFormatter_.format == null || this.NativeOptionsChanged_()) {\n    // Need to recreate the native formatter.\n    this.SetUpIntlFormatter_(this.inputPattern_);\n  }\n\n  // Special case for significant digits and fractional number because\n  // the JavaScript version applies significant digits to the\n  // fraction part, not just the whole number portion.\n  if (Math.abs(number) < 1 &&\n      this.significantDigits_ > this.maximumFractionDigits_) {\n    // Round using the maximum number of fraction digits\n    const multipler = Math.pow(10, this.maximumFractionDigits_);\n    const newNum = Math.abs(number) * multipler;\n    const rounded = Math.round(newNum) * Math.sign(number);\n    number = rounded / multipler;\n  }\n\n  // Create custom output when specialized percentage is requested.\n  /** @type {!goog.i18n.NumberFormat.IntlOptions} */\n  const options = this.intlFormatter_.resolvedOptions();\n  if (options.style === 'percent' && this.overrideNumberFormatSymbols_ &&\n      this.overrideNumberFormatSymbols_['PERCENT']) {\n    /** @type {!Array<!goog.i18n.NumberFormat.FormattedPart>} */\n    const resultParts = this.intlFormatter_.formatToParts(number);\n    const percentReplacement = this.overrideNumberFormatSymbols_['PERCENT'];\n    // Return with custom percent symbol 'percentSign'\n    const parts = resultParts.map(\n        (element) => element.type === 'percentSign' ? percentReplacement :\n                                                      element.value);\n    return parts.join('');\n  }\n\n  if (this.showTrailingZeros_) {\n    // Trailing zeros requires more complex handling.\n    /** @type {!Array<!goog.i18n.NumberFormat.FormattedPart>} */\n    const resultParts = this.intlFormatter_.formatToParts(number);\n\n    // Count digits in integer part except leading zeros.\n    let intSize = 0;\n    resultParts.forEach(\n        element => element.type === 'integer' && element.value !== '0' ?\n            intSize += element.value.length :\n            0);\n\n    let fracSize = 0;\n    for (let i = 0; i < resultParts.length; i++) {\n      if (resultParts[i].type === 'fraction') {\n        fracSize += resultParts[i].value.length;\n      }\n    }\n\n    if (intSize + fracSize < this.significantDigits_) {\n      // Create temporary formatter for rendering this condition\n      delete options['minimumSignificantDigits'];\n      delete options['maximumSignificantDigits'];\n      options.minimumFractionDigits = this.significantDigits_ - intSize;\n      this.resetFractionDigits_ = true;\n      try {\n        const newIntlFormatter = new Intl.NumberFormat(options.locale, options);\n        return newIntlFormatter.format(number);\n      } catch {\n        // Fall back if Intl constructor fails.\n        return this.intlFormatter_.format(number);\n      }\n    }\n  }\n\n  if (this.baseFormattingNumber_) {\n    // Get the compact form for the base number.\n    /** @type {!Array<!goog.i18n.NumberFormat.FormattedPart>} */\n    const scaledResult =\n        this.intlFormatter_.formatToParts(this.baseFormattingNumber_);\n    // Adjust format options for a standard number with correct digit count.\n    delete options['compactDisplay'];\n    options.notation = 'standard';\n    if (number != 0) {\n      const scaledForFraction = this.baseFormattingNumber_ / number;\n      let fractionDigits = 0;\n      if (Math.abs(scaledForFraction) > 1.0) {\n        fractionDigits = this.intLog10_(this.baseFormattingNumber_ / number);\n        if (Math.round(scaledForFraction) != scaledForFraction) {\n          fractionDigits +=\n              1;  // Avoid an extra decimal place if exact divisor.\n        }\n      }\n      if (!Number.isNaN(fractionDigits) && !options.minimumFractionDigits) {\n        options.minimumFractionDigits = fractionDigits;\n        options.maximumFractionDigits = !options.maximumFractionDigits ?\n            fractionDigits :\n            Math.max(options.maximumFractionDigits, fractionDigits);\n      } else {\n        // Special case to prevent extra digits in result.\n        options.maximumFractionDigits = options.minimumFractionDigits;\n      }\n      delete options['minimumSignificantDigits'];\n      delete options['maximumSignificantDigits'];\n    }\n\n    const baseFormattingNumber = (this.baseFormattingNumber_ === null) ?\n        number :\n        this.baseFormattingNumber_;\n    const unit = this.getUnitAfterRounding_(baseFormattingNumber, number);\n    const reducedNumber =\n        goog.i18n.NumberFormat.decimalShift_(number, -unit.divisorBase);\n\n    let reducedFormatter;\n    try {\n      reducedFormatter = new Intl.NumberFormat(options.locale, options);\n    } catch {\n      // Fall back if Intl constructor fails.\n      return this.intlFormatter_.format(number);\n    }\n\n    // Combine reduced result number parts with the scaled compact form.\n    /** @type {!Array<!goog.i18n.NumberFormat.FormattedPart>} */\n    const reducedResult = reducedFormatter.formatToParts(reducedNumber);\n    const baseFormattedParts = reducedResult.map(\n        (element) =>\n            (element.type === 'integer' || element.type === 'group' ||\n             element.type === 'decimal' || element.type === 'fraction') ?\n            element.value :\n            '');\n    // Add compact and literal parts from scaled result.\n    const compactAdditions =\n        scaledResult\n            .filter(\n                entry => entry.type === 'compact' || entry.type === 'literal')\n            .map(entry => entry.value);\n    return baseFormattedParts.concat(compactAdditions).join('');\n  }\n\n  // No special formatting.\n  return this.intlFormatter_.format(number);\n};\n\n/**\n * Round a number into an integer and fractional part\n * based on the rounding rules for this NumberFormat.\n * @param {number} number The number to round.\n * @return {{intValue: number, fracValue: number}} The integer and fractional\n *     part after rounding.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.roundNumber_ = function(number) {\n  'use strict';\n  const shift = goog.i18n.NumberFormat.decimalShift_;\n\n  let shiftedNumber = shift(number, this.maximumFractionDigits_);\n  if (this.significantDigits_ > 0) {\n    shiftedNumber = this.roundToSignificantDigits_(\n        shiftedNumber, this.significantDigits_, this.maximumFractionDigits_);\n  }\n  shiftedNumber = Math.round(shiftedNumber);\n\n  let intValue, fracValue;\n  if (isFinite(shiftedNumber)) {\n    intValue = Math.floor(shift(shiftedNumber, -this.maximumFractionDigits_));\n    fracValue = Math.floor(\n        shiftedNumber - shift(intValue, this.maximumFractionDigits_));\n  } else {\n    intValue = number;\n    fracValue = 0;\n  }\n  return {intValue: intValue, fracValue: fracValue};\n};\n\n\n/**\n * Formats a number with the appropriate groupings when there are repeating\n * digits present. Repeating digits exists when the length of the digits left\n * of the decimal place exceeds the number of non-repeating digits.\n *\n * Formats a number by iterating through the integer number (intPart) from the\n * most left of the decimal place by inserting the appropriate number grouping\n * separator for the repeating digits until all of the repeating digits is\n * iterated. Then iterate through the non-repeating digits by inserting the\n * appropriate number grouping separator until all the non-repeating digits\n * is iterated through.\n *\n * In the number grouping concept, anything left of the decimal\n * place is followed by non-repeating digits and then repeating digits. If the\n * pattern is #,##,###, then we first (from the left of the decimal place) have\n * a non-repeating digit of size 3 followed by repeating digits of size 2\n * separated by a thousand separator. If the length of the digits are six or\n * more, there may be repeating digits required. For example, the value of\n * 12345678 would format as 1,23,45,678 where the repeating digit is length 2.\n *\n * @param {!Array<string>} parts An array to build the 'parts' of the formatted\n *  number including the values and separators.\n * @param {number} zeroCode The value of the zero digit whether or not\n *  goog.i18n.NumberFormat.enforceAsciiDigits_ is enforced.\n * @param {string} intPart The integer representation of the number to be\n *  formatted and referenced.\n * @param {!Array<number>} groupingArray The array of numbers to determine the\n *  grouping of repeated and non-repeated digits.\n * @param {number} repeatedDigitLen The length of the repeated digits left of\n *  the non-repeating digits left of the decimal.\n * @return {!Array<string>} Returns the resulting parts variable containing\n *  how numbers are to be grouped and appear.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.formatNumberGroupingRepeatingDigitsParts_ =\n    function(parts, zeroCode, intPart, groupingArray, repeatedDigitLen) {\n  'use strict';\n  // Keep track of how much has been completed on the non repeated groups\n  let nonRepeatedGroupCompleteCount = 0;\n  let currentGroupSizeIndex = 0;\n  let currentGroupSize = 0;\n\n  const grouping = this.getNumberFormatSymbols_().GROUP_SEP;\n  const digitLen = intPart.length;\n\n  // There are repeating digits and non-repeating digits\n  for (let i = 0; i < digitLen; i++) {\n    parts.push(String.fromCharCode(zeroCode + Number(intPart.charAt(i)) * 1));\n    if (digitLen - i > 1) {\n      currentGroupSize = groupingArray[currentGroupSizeIndex];\n      if (i < repeatedDigitLen) {\n        // Process the left side (the repeated number groups)\n        let repeatedDigitIndex = repeatedDigitLen - i;\n        // Edge case if there's a number grouping asking for \"1\" group at\n        // a time; otherwise, if the remainder is 1, there's the separator\n        if (currentGroupSize === 1 ||\n            (currentGroupSize > 0 &&\n             (repeatedDigitIndex % currentGroupSize) === 1)) {\n          parts.push(grouping);\n        }\n      } else if (currentGroupSizeIndex < groupingArray.length) {\n        // Process the right side (the non-repeated fixed number groups)\n        if (i === repeatedDigitLen) {\n          // Increase the group index because a separator\n          // has previously added in the earlier logic\n          currentGroupSizeIndex += 1;\n        } else if (\n            currentGroupSize ===\n            i - repeatedDigitLen - nonRepeatedGroupCompleteCount + 1) {\n          // Otherwise, just iterate to the right side and\n          // add a separator once the length matches to the expected\n          parts.push(grouping);\n          // Keep track of what has been completed on the right\n          nonRepeatedGroupCompleteCount += currentGroupSize;\n          currentGroupSizeIndex += 1;  // Get to the next number grouping\n        }\n      }\n    }\n  }\n  return parts;\n};\n\n\n/**\n * Formats a number with the appropriate groupings when there are no repeating\n * digits present. Non-repeating digits exists when the length of the digits\n * left of the decimal place is equal or lesser than the length of\n * non-repeating digits.\n *\n * Formats a number by iterating through the integer number (intPart) from the\n * right most non-repeating number group of the decimal place. For each group,\n * inserting the appropriate number grouping separator for the non-repeating\n * digits until the number is completely iterated.\n *\n * In the number grouping concept, anything left of the decimal\n * place is followed by non-repeating digits and then repeating digits. If the\n * pattern is #,##,###, then we first (from the left of the decimal place) have\n * a non-repeating digit of size 3 followed by repeating digits of size 2\n * separated by a thousand separator. If the length of the digits are five or\n * less, there won't be any repeating digits required. For example, the value\n * of 12345 would be formatted as 12,345 where the non-repeating digit is of\n * length 3.\n *\n * @param {!Array<string>} parts An array to build the 'parts' of the formatted\n *  number including the values and separators.\n * @param {number} zeroCode The value of the zero digit whether or not\n *  goog.i18n.NumberFormat.enforceAsciiDigits_ is enforced.\n * @param {string} intPart The integer representation of the number to be\n *  formatted and referenced.\n * @param {!Array<number>} groupingArray The array of numbers to determine the\n *  grouping of repeated and non-repeated digits.\n * @return {!Array<string>} Returns the resulting parts variable containing\n *  how numbers are to be grouped and appear.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.formatNumberGroupingNonRepeatingDigitsParts_ =\n    function(parts, zeroCode, intPart, groupingArray) {\n  'use strict';\n  // Keep track of how much has been completed on the non repeated groups\n  const grouping = this.getNumberFormatSymbols_().GROUP_SEP;\n  let currentGroupSizeIndex;\n  let currentGroupSize = 0;\n  let digitLenLeft = intPart.length;\n  const rightToLeftParts = [];\n\n  // Start from the right most non-repeating group and work inwards\n  for (currentGroupSizeIndex = groupingArray.length - 1;\n       currentGroupSizeIndex >= 0 && digitLenLeft > 0;\n       currentGroupSizeIndex--) {\n    currentGroupSize = groupingArray[currentGroupSizeIndex];\n    // Iterate from the right most digit\n    for (let rightDigitIndex = 0; rightDigitIndex < currentGroupSize &&\n         ((digitLenLeft - rightDigitIndex - 1) >= 0);\n         rightDigitIndex++) {\n      rightToLeftParts.push(String.fromCharCode(\n          zeroCode +\n          Number(intPart.charAt(digitLenLeft - rightDigitIndex - 1)) * 1));\n    }\n    // Update the number of digits left\n    digitLenLeft -= currentGroupSize;\n    if (digitLenLeft > 0) {\n      rightToLeftParts.push(grouping);\n    }\n  }\n  // Reverse and push onto the remaining parts\n  parts.push.apply(parts, rightToLeftParts.reverse());\n\n  return parts;\n};\n\n\n/**\n * Formats a Number in fraction format.\n *\n * @param {number} number\n * @param {number} minIntDigits Minimum integer digits.\n * @param {!Array<string>} parts\n *     This array holds the pieces of formatted string.\n *     This function will add its formatted pieces to the array.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.subformatFixed_ = function(\n    number, minIntDigits, parts) {\n  'use strict';\n  if (this.minimumFractionDigits_ > this.maximumFractionDigits_) {\n    throw new Error('Min value must be less than max value');\n  }\n\n  if (!parts) {\n    parts = [];\n  }\n\n  const rounded = this.roundNumber_(number);\n  const intValue = rounded.intValue;\n  const fracValue = rounded.fracValue;\n\n  const numIntDigits = (intValue == 0) ? 0 : this.intLog10_(intValue) + 1;\n  const fractionPresent = this.minimumFractionDigits_ > 0 || fracValue > 0 ||\n      (this.showTrailingZeros_ && numIntDigits < this.significantDigits_);\n  let minimumFractionDigits = this.minimumFractionDigits_;\n  if (fractionPresent) {\n    if (this.showTrailingZeros_ && this.significantDigits_ > 0) {\n      minimumFractionDigits = this.significantDigits_ - numIntDigits;\n    } else {\n      minimumFractionDigits = this.minimumFractionDigits_;\n    }\n  }\n\n  let intPart = '';\n  let translatableInt = intValue;\n  while (translatableInt > 1E20) {\n    // here it goes beyond double precision, add '0' make it look better\n    intPart = '0' + intPart;\n    translatableInt =\n        Math.round(goog.i18n.NumberFormat.decimalShift_(translatableInt, -1));\n  }\n  intPart = translatableInt + intPart;\n\n  const decimal = this.getNumberFormatSymbols_().DECIMAL_SEP;\n  const zeroCode = this.getNumberFormatSymbols_().ZERO_DIGIT.charCodeAt(0);\n  const digitLen = intPart.length;\n  let nonRepeatedGroupCount = 0;\n\n  if (intValue > 0 || minIntDigits > 0) {\n    for (let i = digitLen; i < minIntDigits; i++) {\n      parts.push(String.fromCharCode(zeroCode));\n    }\n\n    // If there's more than 1 number grouping,\n    // figure out the length of the non-repeated groupings (on the right)\n    if (this.groupingArray_.length >= 2) {\n      for (let j = 1; j < this.groupingArray_.length; j++) {\n        nonRepeatedGroupCount += this.groupingArray_[j];\n      }\n    }\n\n    // Anything left of the fixed number grouping is repeated,\n    // figure out the length of repeated groupings (on the left)\n    const repeatedDigitLen = digitLen - nonRepeatedGroupCount;\n    if (repeatedDigitLen > 0) {\n      // There are repeating digits and non-repeating digits\n      parts = this.formatNumberGroupingRepeatingDigitsParts_(\n          parts, zeroCode, intPart, this.groupingArray_, repeatedDigitLen);\n    } else {\n      // There are no repeating digits and only non-repeating digits\n      parts = this.formatNumberGroupingNonRepeatingDigitsParts_(\n          parts, zeroCode, intPart, this.groupingArray_);\n    }\n  } else if (!fractionPresent) {\n    // If there is no fraction present, and we haven't printed any\n    // integer digits, then print a zero.\n    parts.push(String.fromCharCode(zeroCode));\n  }\n\n  // Output the decimal separator if we always do so.\n  if (this.decimalSeparatorAlwaysShown_ || fractionPresent) {\n    parts.push(decimal);\n  }\n\n  let fracPart = String(fracValue);\n  // Handle case where fracPart is in scientific notation.\n  const fracPartSplit = fracPart.split('e+');\n  if (fracPartSplit.length == 2) {\n    // Only keep significant digits.\n    const floatFrac = parseFloat(fracPartSplit[0]);\n    fracPart = String(\n        this.roundToSignificantDigits_(floatFrac, this.significantDigits_, 1));\n    fracPart = fracPart.replace('.', '');\n    // Append zeroes based on the exponent.\n    const exp = parseInt(fracPartSplit[1], 10);\n    fracPart += goog.string.repeat('0', exp - fracPart.length + 1);\n  }\n\n  // Add Math.pow(10, this.maximumFractionDigits) to fracPart. Uses string ops\n  // to avoid complexity with scientific notation and overflows.\n  if (this.maximumFractionDigits_ + 1 > fracPart.length) {\n    const zeroesToAdd = this.maximumFractionDigits_ - fracPart.length;\n    fracPart = '1' + goog.string.repeat('0', zeroesToAdd) + fracPart;\n  }\n\n  let fracLen = fracPart.length;\n  while (fracPart.charAt(fracLen - 1) == '0' &&\n         fracLen > minimumFractionDigits + 1) {\n    fracLen--;\n  }\n\n  for (let i = 1; i < fracLen; i++) {\n    parts.push(String.fromCharCode(zeroCode + Number(fracPart.charAt(i)) * 1));\n  }\n};\n\n\n/**\n * Formats exponent part of a Number.\n *\n * @param {number} exponent Exponential value.\n * @param {!Array<string>} parts The array that holds the pieces of formatted\n *     string. This function will append more formatted pieces to the array.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.addExponentPart_ = function(exponent, parts) {\n  'use strict';\n  parts.push(this.getNumberFormatSymbols_().EXP_SYMBOL);\n\n  if (exponent < 0) {\n    exponent = -exponent;\n    parts.push(this.getNumberFormatSymbols_().MINUS_SIGN);\n  } else if (this.useSignForPositiveExponent_) {\n    parts.push(this.getNumberFormatSymbols_().PLUS_SIGN);\n  }\n\n  const exponentDigits = '' + exponent;\n  const zeroChar = this.getNumberFormatSymbols_().ZERO_DIGIT;\n  for (let i = exponentDigits.length; i < this.minExponentDigits_; i++) {\n    parts.push(zeroChar);\n  }\n  parts.push(exponentDigits);\n};\n\n/**\n * Returns the mantissa for the given value and its exponent.\n *\n * @param {number} value\n * @param {number} exponent\n * @return {number}\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getMantissa_ = function(value, exponent) {\n  'use strict';\n  return goog.i18n.NumberFormat.decimalShift_(value, -exponent);\n};\n\n/**\n * Formats Number in exponential format.\n *\n * @param {number} number Value need to be formatted.\n * @param {!Array<string>} parts The array that holds the pieces of formatted\n *     string. This function will append more formatted pieces to the array.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.subformatExponential_ = function(\n    number, parts) {\n  'use strict';\n  if (number == 0.0) {\n    this.subformatFixed_(number, this.minimumIntegerDigits_, parts);\n    this.addExponentPart_(0, parts);\n    return;\n  }\n\n  let exponent = goog.math.safeFloor(Math.log(number) / Math.log(10));\n  number = this.getMantissa_(number, exponent);\n\n  let minIntDigits = this.minimumIntegerDigits_;\n  if (this.maximumIntegerDigits_ > 1 &&\n      this.maximumIntegerDigits_ > this.minimumIntegerDigits_) {\n    // A repeating range is defined; adjust to it as follows.\n    // If repeat == 3, we have 6,5,4=>3; 3,2,1=>0; 0,-1,-2=>-3;\n    // -3,-4,-5=>-6, etc. This takes into account that the\n    // exponent we have here is off by one from what we expect;\n    // it is for the format 0.MMMMMx10^n.\n    let remainder = exponent % this.maximumIntegerDigits_;\n    if (remainder < 0) {\n      remainder = this.maximumIntegerDigits_ + remainder;\n    }\n\n    number = goog.i18n.NumberFormat.decimalShift_(number, remainder);\n    exponent -= remainder;\n\n    minIntDigits = 1;\n  } else {\n    // No repeating range is defined; use minimum integer digits.\n    if (this.minimumIntegerDigits_ < 1) {\n      exponent++;\n      number = goog.i18n.NumberFormat.decimalShift_(number, -1);\n    } else {\n      exponent -= this.minimumIntegerDigits_ - 1;\n      number = goog.i18n.NumberFormat.decimalShift_(\n          number, this.minimumIntegerDigits_ - 1);\n    }\n  }\n  this.subformatFixed_(number, minIntDigits, parts);\n  this.addExponentPart_(exponent, parts);\n};\n\n\n/**\n * Returns the digit value of current character. The character could be either\n * '0' to '9', or a locale specific digit.\n *\n * @param {string} ch Character that represents a digit.\n * @return {number} The digit value, or -1 on error.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getDigit_ = function(ch) {\n  'use strict';\n  const code = ch.charCodeAt(0);\n  // between '0' to '9'\n  if (48 <= code && code < 58) {\n    return code - 48;\n  } else {\n    const zeroCode = this.getNumberFormatSymbols_().ZERO_DIGIT.charCodeAt(0);\n    return zeroCode <= code && code < zeroCode + 10 ? code - zeroCode : -1;\n  }\n};\n\n\n// ----------------------------------------------------------------------\n// CONSTANTS\n// ----------------------------------------------------------------------\n// Constants for characters used in programmatic (unlocalized) patterns.\n/**\n * A zero digit character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_ = '0';\n\n\n/**\n * A grouping separator character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_GROUPING_SEPARATOR_ = ',';\n\n\n/**\n * A decimal separator character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_DECIMAL_SEPARATOR_ = '.';\n\n\n/**\n * A per mille character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_PER_MILLE_ = '\\u2030';\n\n\n/**\n * A percent character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_PERCENT_ = '%';\n\n\n/**\n * A digit character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_DIGIT_ = '#';\n\n\n/**\n * A separator character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_SEPARATOR_ = ';';\n\n\n/**\n * An exponent character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_EXPONENT_ = 'E';\n\n\n/**\n * A plus character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_PLUS_ = '+';\n\n\n/**\n * A generic currency sign character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.PATTERN_CURRENCY_SIGN_ = '\\u00A4';\n\n\n/**\n * A quote character.\n * @type {string}\n * @private\n * @const\n */\ngoog.i18n.NumberFormat.QUOTE_ = '\\'';\n\n\n/**\n * Parses affix part of pattern.\n *\n * @param {string} pattern Pattern string that need to be parsed.\n * @param {!Array<number>} pos One element position array to set and receive\n *     parsing position.\n *\n * @return {string} Affix received from parsing.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.parseAffix_ = function(pattern, pos) {\n  'use strict';\n  let affix = '';\n  let inQuote = false;\n  const len = pattern.length;\n\n  for (; pos[0] < len; pos[0]++) {\n    const ch = pattern.charAt(pos[0]);\n    if (ch == goog.i18n.NumberFormat.QUOTE_) {\n      if (pos[0] + 1 < len &&\n          pattern.charAt(pos[0] + 1) == goog.i18n.NumberFormat.QUOTE_) {\n        pos[0]++;\n        affix += '\\'';  // 'don''t'\n      } else {\n        inQuote = !inQuote;\n      }\n      continue;\n    }\n\n    if (inQuote) {\n      affix += ch;\n    } else {\n      switch (ch) {\n        case goog.i18n.NumberFormat.PATTERN_DIGIT_:\n        case goog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_:\n        case goog.i18n.NumberFormat.PATTERN_GROUPING_SEPARATOR_:\n        case goog.i18n.NumberFormat.PATTERN_DECIMAL_SEPARATOR_:\n        case goog.i18n.NumberFormat.PATTERN_SEPARATOR_:\n          return affix;\n        case goog.i18n.NumberFormat.PATTERN_CURRENCY_SIGN_:\n          if ((pos[0] + 1) < len &&\n              pattern.charAt(pos[0] + 1) ==\n                  goog.i18n.NumberFormat.PATTERN_CURRENCY_SIGN_) {\n            pos[0]++;\n            affix += this.getCurrencyCode_();\n          } else {\n            switch (this.currencyStyle_) {\n              case goog.i18n.NumberFormat.CurrencyStyle.LOCAL:\n                affix += goog.i18n.currency.getLocalCurrencySignWithFallback(\n                    this.getCurrencyCode_());\n                break;\n              case goog.i18n.NumberFormat.CurrencyStyle.GLOBAL:\n                affix += goog.i18n.currency.getGlobalCurrencySignWithFallback(\n                    this.getCurrencyCode_());\n                break;\n              case goog.i18n.NumberFormat.CurrencyStyle.PORTABLE:\n                affix += goog.i18n.currency.getPortableCurrencySignWithFallback(\n                    this.getCurrencyCode_());\n                break;\n              default:\n                break;\n            }\n          }\n          break;\n        case goog.i18n.NumberFormat.PATTERN_PERCENT_:\n          if (!this.negativePercentSignExpected_ && this.multiplier_ != 1) {\n            throw new Error('Too many percent/permill');\n          } else if (\n              this.negativePercentSignExpected_ && this.multiplier_ != 100) {\n            throw new Error('Inconsistent use of percent/permill characters');\n          }\n          this.multiplier_ = 100;\n          this.negativePercentSignExpected_ = false;\n          affix += this.getNumberFormatSymbols_().PERCENT;\n          break;\n        case goog.i18n.NumberFormat.PATTERN_PER_MILLE_:\n          if (!this.negativePercentSignExpected_ && this.multiplier_ != 1) {\n            throw new Error('Too many percent/permill');\n          } else if (\n              this.negativePercentSignExpected_ && this.multiplier_ != 1000) {\n            throw new Error('Inconsistent use of percent/permill characters');\n          }\n          this.multiplier_ = 1000;\n          this.negativePercentSignExpected_ = false;\n          affix += this.getNumberFormatSymbols_().PERMILL;\n          break;\n        default:\n          affix += ch;\n      }\n    }\n  }\n\n  return affix;\n};\n\n\n/**\n * Parses the trunk part of a pattern.\n *\n * @param {string} pattern Pattern string that need to be parsed.\n * @param {!Array<number>} pos One element position array to set and receive\n *     parsing position.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.parseTrunk_ = function(pattern, pos) {\n  'use strict';\n  let decimalPos = -1;\n  let digitLeftCount = 0;\n  let zeroDigitCount = 0;\n  let digitRightCount = 0;\n  let groupingCount = -1;\n  const len = pattern.length;\n  for (let loop = true; pos[0] < len && loop; pos[0]++) {\n    const ch = pattern.charAt(pos[0]);\n    switch (ch) {\n      case goog.i18n.NumberFormat.PATTERN_DIGIT_:\n        if (zeroDigitCount > 0) {\n          digitRightCount++;\n        } else {\n          digitLeftCount++;\n        }\n        if (groupingCount >= 0 && decimalPos < 0) {\n          groupingCount++;\n        }\n        break;\n      case goog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_:\n        if (digitRightCount > 0) {\n          throw new Error('Unexpected \"0\" in pattern \"' + pattern + '\"');\n        }\n        zeroDigitCount++;\n        if (groupingCount >= 0 && decimalPos < 0) {\n          groupingCount++;\n        }\n        break;\n      case goog.i18n.NumberFormat.PATTERN_GROUPING_SEPARATOR_:\n        if (groupingCount > 0) {\n          this.groupingArray_.push(groupingCount);\n        }\n        groupingCount = 0;\n        break;\n      case goog.i18n.NumberFormat.PATTERN_DECIMAL_SEPARATOR_:\n        if (decimalPos >= 0) {\n          throw new Error(\n              'Multiple decimal separators in pattern \"' + pattern + '\"');\n        }\n        decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;\n        break;\n      case goog.i18n.NumberFormat.PATTERN_EXPONENT_:\n        if (this.useExponentialNotation_) {\n          throw new Error(\n              'Multiple exponential symbols in pattern \"' + pattern + '\"');\n        }\n        this.useExponentialNotation_ = true;\n        this.minExponentDigits_ = 0;\n\n        // exponent pattern can have a optional '+'.\n        if ((pos[0] + 1) < len &&\n            pattern.charAt(pos[0] + 1) ==\n                goog.i18n.NumberFormat.PATTERN_PLUS_) {\n          pos[0]++;\n          this.useSignForPositiveExponent_ = true;\n        }\n\n        // Use lookahead to parse out the exponential part\n        // of the pattern, then jump into phase 2.\n        while ((pos[0] + 1) < len &&\n               pattern.charAt(pos[0] + 1) ==\n                   goog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_) {\n          pos[0]++;\n          this.minExponentDigits_++;\n        }\n\n        if ((digitLeftCount + zeroDigitCount) < 1 ||\n            this.minExponentDigits_ < 1) {\n          throw new Error('Malformed exponential pattern \"' + pattern + '\"');\n        }\n        loop = false;\n        break;\n      default:\n        pos[0]--;\n        loop = false;\n        break;\n    }\n  }\n\n  if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) {\n    // Handle '###.###' and '###.' and '.###'\n    let n = decimalPos;\n    if (n == 0) {  // Handle '.###'\n      n++;\n    }\n    digitRightCount = digitLeftCount - n;\n    digitLeftCount = n - 1;\n    zeroDigitCount = 1;\n  }\n\n  // Do syntax checking on the digits.\n  if (decimalPos < 0 && digitRightCount > 0 ||\n      decimalPos >= 0 &&\n          (decimalPos < digitLeftCount ||\n           decimalPos > digitLeftCount + zeroDigitCount) ||\n      groupingCount == 0) {\n    throw new Error('Malformed pattern \"' + pattern + '\"');\n  }\n  const totalDigits = digitLeftCount + zeroDigitCount + digitRightCount;\n\n  this.maximumFractionDigits_ = decimalPos >= 0 ? totalDigits - decimalPos : 0;\n  if (decimalPos >= 0) {\n    this.minimumFractionDigits_ = digitLeftCount + zeroDigitCount - decimalPos;\n    if (this.minimumFractionDigits_ < 0) {\n      this.minimumFractionDigits_ = 0;\n    }\n  }\n\n  // The effectiveDecimalPos is the position the decimal is at or would be at\n  // if there is no decimal. Note that if decimalPos<0, then digitTotalCount ==\n  // digitLeftCount + zeroDigitCount.\n  const effectiveDecimalPos = decimalPos >= 0 ? decimalPos : totalDigits;\n  this.minimumIntegerDigits_ = effectiveDecimalPos - digitLeftCount;\n  if (this.useExponentialNotation_) {\n    this.maximumIntegerDigits_ = digitLeftCount + this.minimumIntegerDigits_;\n\n    // in exponential display, we need to at least show something.\n    if (this.maximumFractionDigits_ == 0 && this.minimumIntegerDigits_ == 0) {\n      this.minimumIntegerDigits_ = 1;\n    }\n  }\n\n  // Add another number grouping at the end\n  this.groupingArray_.push(Math.max(0, groupingCount));\n  this.decimalSeparatorAlwaysShown_ =\n      decimalPos == 0 || decimalPos == totalDigits;\n};\n\n\n/**\n * Alias for the compact format 'unit' object.\n * @typedef {{\n *     divisorBase: number,\n *     negative_prefix: string,\n *     negative_suffix: string,\n *     prefix: string,\n *     suffix: string\n * }}\n */\ngoog.i18n.NumberFormat.CompactNumberUnit;\n\n\n/**\n * Parameters to Intl.NumberFormat constructor\n * @private @typedef {{\n *    localeMatcher: (string|undefined),\n *    signDisplay: (string|undefined),\n *    notation: (string|undefined),\n *    useGrouping: (boolean|undefined),\n *    numberingSystem: (string|undefined),\n *    style: (string|undefined),\n *    currency: (string|undefined),\n *    currencyDisplay: (string|undefined),\n *    minimumIntegerDigits: (number|undefined),\n *    minimumFractionDigits: (number|undefined),\n *    maximumFractionDigits: (number|undefined),\n *    minimumSignificantDigits: (number|undefined),\n *    maximumSignificantDigits: (number|undefined),\n *    compactDisplay: (string|undefined),\n *    locale: (string|undefined),\n * }}\n */\ngoog.i18n.NumberFormat.IntlOptions;\n\n/**\n * Return results from formatToParts\n * @private @typedef {{\n *    type: (string),\n *    value: (string)\n * }}\n */\ngoog.i18n.NumberFormat.FormattedPart;\n\n/**\n * The empty unit, corresponding to a base of 0.\n * @private {!goog.i18n.NumberFormat.CompactNumberUnit}\n * @const\n */\ngoog.i18n.NumberFormat.NULL_UNIT_ = {\n  divisorBase: 0,\n  negative_prefix: '',\n  negative_suffix: '',\n  prefix: '',\n  suffix: ''\n};\n\n/**\n * Get compact unit for a certain number of digits\n *\n * @param {number} base The number of digits to get the unit for.\n * @param {string} plurality The plurality of the number.\n * @return {!goog.i18n.NumberFormat.CompactNumberUnit} The compact unit.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getUnitFor_ = function(base, plurality) {\n  'use strict';\n  /**\n   * @suppress {missingProperties} Auto-added to unblock check_level=STRICT\n   * migration\n   */\n  let table = this.compactStyle_ == goog.i18n.NumberFormat.CompactStyle.SHORT ?\n      goog.i18n.CompactNumberFormatSymbols.COMPACT_DECIMAL_SHORT_PATTERN :\n      goog.i18n.CompactNumberFormatSymbols.COMPACT_DECIMAL_LONG_PATTERN;\n\n  if (table == null) {\n    /**\n     * @suppress {missingProperties} Auto-added to unblock check_level=STRICT\n     * migration\n     */\n    table = goog.i18n.CompactNumberFormatSymbols.COMPACT_DECIMAL_SHORT_PATTERN;\n  }\n\n  if (base < 3) {\n    return goog.i18n.NumberFormat.NULL_UNIT_;\n  } else {\n    const shift = goog.i18n.NumberFormat.decimalShift_;\n\n    base = Math.min(14, base);\n    let patterns = table[shift(1, base)];\n    let previousNonNullBase = base - 1;\n    while (!patterns && previousNonNullBase >= 3) {\n      patterns = table[shift(1, previousNonNullBase)];\n      previousNonNullBase--;\n    }\n    if (!patterns) {\n      return goog.i18n.NumberFormat.NULL_UNIT_;\n    }\n\n    let pattern = patterns[plurality];\n\n    // Return pattern for negative formatting, if present\n    let neg_prefix = '';\n    let neg_suffix = '';\n    let index_of_neg_part = pattern.indexOf(';');\n    let neg_pattern = null;\n    if (index_of_neg_part >= 0) {\n      // Trim positive pattern\n      pattern = pattern.substring(0, index_of_neg_part);\n      neg_pattern = pattern.substring(index_of_neg_part + 1);\n      if (neg_pattern) {\n        const neg_parts = /([^0]*)(0+)(.*)/.exec(neg_pattern);\n        neg_prefix = neg_parts[1];\n        neg_suffix = neg_parts[3];\n      }\n    }\n\n    if (!pattern || pattern == '0') {\n      return goog.i18n.NumberFormat.NULL_UNIT_;\n    }\n\n    const parts = /([^0]*)(0+)(.*)/.exec(pattern);\n    if (!parts) {\n      return goog.i18n.NumberFormat.NULL_UNIT_;\n    }\n\n    return {\n      divisorBase: (previousNonNullBase + 1) - (parts[2].length - 1),\n      negative_prefix: neg_prefix,\n      negative_suffix: neg_suffix,\n      prefix: parts[1],\n      suffix: parts[3]\n    };\n  }\n};\n\n\n/**\n * Get the compact unit divisor, accounting for rounding of the quantity.\n *\n * @param {number} formattingNumber The number to base the formatting on. The\n *     unit will be calculated from this number.\n * @param {number} pluralityNumber The number to use for calculating the\n *     plurality.\n * @return {!goog.i18n.NumberFormat.CompactNumberUnit} The unit after rounding.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getUnitAfterRounding_ = function(\n    formattingNumber, pluralityNumber) {\n  'use strict';\n  if (this.compactStyle_ == goog.i18n.NumberFormat.CompactStyle.NONE) {\n    return goog.i18n.NumberFormat.NULL_UNIT_;\n  }\n\n  formattingNumber = Math.abs(formattingNumber);\n  pluralityNumber = Math.abs(pluralityNumber);\n\n  const initialPlurality = this.pluralForm_(formattingNumber);\n  // Compute the exponent from the formattingNumber, to compute the unit.\n  const base = formattingNumber <= 1 ? 0 : this.intLog10_(formattingNumber);\n  const initialDivisor = this.getUnitFor_(base, initialPlurality).divisorBase;\n  // Round both numbers based on the unit used.\n  const pluralityAttempt =\n      goog.i18n.NumberFormat.decimalShift_(pluralityNumber, -initialDivisor);\n  const pluralityRounded = this.roundNumber_(pluralityAttempt);\n  const formattingAttempt =\n      goog.i18n.NumberFormat.decimalShift_(formattingNumber, -initialDivisor);\n  const formattingRounded = this.roundNumber_(formattingAttempt);\n  // Compute the plurality of the pluralityNumber when formatted using the name\n  // units as the formattingNumber.\n  const finalPlurality =\n      this.pluralForm_(pluralityRounded.intValue + pluralityRounded.fracValue);\n  // Get the final unit, using the rounded formatting number to get the correct\n  // unit, and the plurality computed from the pluralityNumber.\n  return this.getUnitFor_(\n      initialDivisor + this.intLog10_(formattingRounded.intValue),\n      finalPlurality);\n};\n\n\n/**\n * Get the integer base 10 logarithm of a number.\n *\n * @param {number} number The number to log.\n * @return {number} The lowest integer n such that 10^n >= number.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.intLog10_ = function(number) {\n  'use strict';\n  // Handle infinity.\n  if (!isFinite(number)) {\n    return number > 0 ? number : 0;\n  }\n  // Turns out Math.log(1000000)/Math.LN10 is strictly less than 6.\n  // TODO(nickreid): Make this use `decimalShift_` or use another more efficient\n  // string-based method.\n  let i = 0;\n  while ((number /= 10) >= 1) i++;\n  return i;\n};\n\n/**\n * Shifts `number` by `digitCount` decimal digits.\n *\n * This function corrects for rounding error that may occur when naively\n * multiplying or dividing by a power of 10. See:\n * https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems\n * Example: `1.1e27 / Math.pow(10, 12)  != 1.1e15`.\n *\n * This function does not correct for inherent limitations in the precision of\n * JavaScript numbers.\n *\n * @param {number} number The number to shift.\n * @param {number} digitCount The number of places by which to shift number.\n *     Must be an integer. May be positive or negative.\n * @return {number}\n * @private\n */\ngoog.i18n.NumberFormat.decimalShift_ = function(number, digitCount) {\n  'use strict';\n  goog.asserts.assert(\n      digitCount % 1 == 0, 'Cannot shift by fractional digits \"%s\".',\n      digitCount);\n\n  // Make sure to cover all numbers that stringify to something that doesn't\n  // look like a number.\n  if (!number || !isFinite(number) || digitCount == 0) {\n    return number;\n  }\n\n  // This method isn't efficient, but it has the exact behaviour we want without\n  // worrying about floating-point math edge cases.\n  const numParts = String(number).split('e');\n  const magnitude = parseInt(numParts[1] || 0, 10) + digitCount;\n  return parseFloat(numParts[0] + 'e' + magnitude);\n};\n\n/**\n * Rounds `number` to `decimalCount` decimal places.\n *\n * Negative values of `decimalCount` will eliminate integeral digits.\n *\n * This function corrects for rounding error that may occur when naively\n * multiplying by a power of 10.\n *\n * This function does not correct for inherent limitations in the precision of\n * JavaScript numbers.\n *\n * @param {number} number The number to round.\n * @param {number} decimalCount The number of decimal places to retain.\n *     Must be an integer. May be positive or negative.\n * @return {number}\n * @private\n */\ngoog.i18n.NumberFormat.decimalRound_ = function(number, decimalCount) {\n  'use strict';\n  goog.asserts.assert(\n      decimalCount % 1 == 0, 'Cannot round to fractional digits \"%s\".',\n      decimalCount);\n\n  if (!number || !isFinite(number)) {\n    return number;\n  }\n\n  const shift = goog.i18n.NumberFormat.decimalShift_;\n  return shift(Math.round(shift(number, decimalCount)), -decimalCount);\n};\n\n\n/**\n * Round to a certain number of significant digits.\n *\n * @param {number} number The number to round.\n * @param {number} significantDigits The number of significant digits\n *     to round to.\n * @param {number} scale Treat number as fixed point times 10^scale.\n * @return {number} The rounded number.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.roundToSignificantDigits_ = function(\n    number, significantDigits, scale) {\n  'use strict';\n  if (!number) return number;\n\n  const digits = this.intLog10_(number);\n  const magnitude = significantDigits - digits - 1;\n\n  // Only round fraction, not (potentially shifted) integers.\n  if (magnitude < -scale) {\n    return goog.i18n.NumberFormat.decimalRound_(number, -scale);\n  } else {\n    return goog.i18n.NumberFormat.decimalRound_(number, magnitude);\n  }\n};\n\n\n/**\n * Get the plural form of a number.\n * @param {number} quantity The quantity to find plurality of.\n * @return {string} One of 'zero', 'one', 'two', 'few', 'many', 'other'.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.pluralForm_ = function(quantity) {\n  'use strict';\n  /* TODO: Implement */\n  return 'other';\n};\n\n\n/**\n * Checks if the currency symbol comes before the value ($12) or after (12$)\n * Handy for applications that need to have separate UI fields for the currency\n * value and symbol, especially for input: Price: [USD] [123.45]\n * The currency symbol might be a combo box, or a label.\n *\n * @return {boolean} true if currency is before value.\n */\ngoog.i18n.NumberFormat.prototype.isCurrencyCodeBeforeValue = function() {\n  'use strict';\n  if (goog.i18n.NumberFormat.USE_ECMASCRIPT_I18N_NUMFORMAT &&\n      this.intlFormatter_) {\n    // Examine the part of the output, checking if currency position preceeds\n    // numbers.\n\n    /** @type {!Array<!goog.i18n.NumberFormat.FormattedPart>} */\n    const resultParts = this.intlFormatter_.formatToParts(1000);\n\n    let partIndex = 0;\n    // Stop looking when either the currency or number is found.\n    while (partIndex < resultParts.length) {\n      const partType = resultParts[partIndex]['type'];\n      if (partType == 'currency') {\n        return true;  // If we see currency before a number.\n      }\n      if ((partType == 'integer') || (partType == 'decimal')) {\n        return false;\n      }\n      partIndex++;\n    }\n    return false;  // Nothing found\n  }\n  const posCurrSymbol = this.pattern_.indexOf('\\u00A4');  // '\u00a4' Currency sign\n  const posPound = this.pattern_.indexOf('#');\n  const posZero = this.pattern_.indexOf('0');\n\n  // posCurrValue is the first '#' or '0' found.\n  // If none of them is found (not possible, but still),\n  // the result is true (postCurrSymbol < MAX_VALUE)\n  // That is OK, matches the en_US and ROOT locales.\n  let posCurrValue = Number.MAX_VALUE;\n  if (posPound >= 0 && posPound < posCurrValue) {\n    posCurrValue = posPound;\n  }\n  if (posZero >= 0 && posZero < posCurrValue) {\n    posCurrValue = posZero;\n  }\n\n  // No need to test, it is guaranteed that both these symbols exist.\n  // If not, we have bigger problems than this.\n  return posCurrSymbol < posCurrValue;\n};\n});  // End of scope for module data\n"],
"names":["goog","provide","require","scope","LocaleFeature","module","get","NativeLocaleDigits","i18n","NumberFormat","goog.i18n.NumberFormat","pattern","opt_currency","opt_currencyStyle","opt_symbols","currency","isValid","TypeError","intlFormatter_","resetSignificantDigits_","resetFractionDigits_","resetShowTrailingZeros_","intlCurrencyCode_","toUpperCase","currencyStyle_","CurrencyStyle","LOCAL","overrideNumberFormatSymbols_","maximumIntegerDigits_","minimumIntegerDigits_","significantDigits_","maximumFractionDigits_","minimumFractionDigits_","minExponentDigits_","useSignForPositiveExponent_","showTrailingZeros_","positivePrefix_","positiveSuffix_","negativePrefix_","getNumberFormatSymbols_","MINUS_SIGN","negativeSuffix_","multiplier_","negativePercentSignExpected_","groupingArray_","decimalSeparatorAlwaysShown_","useExponentialNotation_","compactStyle_","CompactStyle","NONE","baseFormattingNumber_","inputPattern_","pattern_","USE_ECMASCRIPT_I18N_NUMFORMAT","Format","COMPACT_SHORT","COMPACT_LONG","SetUpIntlFormatter_","setFormatterToPolyfill_","FEATURESET_YEAR","DECIMAL","SCIENTIFIC","PERCENT","CURRENCY","PORTABLE","GLOBAL","SHORT","LONG","resetEnforceAsciiDigits_","enforceAsciiDigits_","setEnforceAsciiDigits","goog.i18n.NumberFormat.setEnforceAsciiDigits","doEnforce","isEnforceAsciiDigits","goog.i18n.NumberFormat.isEnforceAsciiDigits","prototype","goog.i18n.NumberFormat.prototype.getNumberFormatSymbols_","NumberFormatSymbols_u_nu_latn","NumberFormatSymbols","getCurrencyCode_","goog.i18n.NumberFormat.prototype.getCurrencyCode_","DEF_CURRENCY_CODE","setMinimumFractionDigits","goog.i18n.NumberFormat.prototype.setMinimumFractionDigits","min","Error","getMinimumFractionDigits","goog.i18n.NumberFormat.prototype.getMinimumFractionDigits","setMaximumFractionDigits","goog.i18n.NumberFormat.prototype.setMaximumFractionDigits","max","getMaximumFractionDigits","goog.i18n.NumberFormat.prototype.getMaximumFractionDigits","setSignificantDigits","goog.i18n.NumberFormat.prototype.setSignificantDigits","number","getSignificantDigits","goog.i18n.NumberFormat.prototype.getSignificantDigits","setShowTrailingZeros","goog.i18n.NumberFormat.prototype.setShowTrailingZeros","showTrailingZeros","setBaseFormatting","goog.i18n.NumberFormat.prototype.setBaseFormatting","baseFormattingNumber","asserts","assert","isFinite","getBaseFormatting","goog.i18n.NumberFormat.prototype.getBaseFormatting","goog.i18n.NumberFormat.prototype.setFormatterToPolyfill_","applyStandardPattern_","applyPattern_","goog.i18n.NumberFormat.prototype.applyPattern_","replace","pos","parseAffix_","trunkStart","parseTrunk_","trunkLen","length","charAt","PATTERN_SEPARATOR_","goog.i18n.NumberFormat.prototype.applyStandardPattern_","patternType","DECIMAL_PATTERN","SCIENTIFIC_PATTERN","PERCENT_PATTERN","adjustPrecision","CURRENCY_PATTERN","applyCompactStyle_","goog.i18n.NumberFormat.prototype.applyCompactStyle_","style","parse","goog.i18n.NumberFormat.prototype.parse","text","opt_pos","ret","NaN","gotPositive","indexOf","gotNegative","INFINITY","Infinity","parseNumber_","goog.i18n.NumberFormat.prototype.parseNumber_","sawDecimal","sawExponent","sawDigit","exponentPos","scale","decimal","DECIMAL_SEP","grouping","GROUP_SEP","exponentChar","EXP_SYMBOL","normalizedText","ch","digit","getDigit_","PERMILL","parseFloat","goog.i18n.NumberFormat.prototype.SetUpIntlFormatter_","inputPattern","options","notation","minimumIntegerDigits","Math","signDisplay","numberingSystem","minimumSignificantDigits","maximumSignificantDigits","minimumFractionDigits","maximumFractionDigits","currencyCode","precision","isAvailable","CurrencyInfo","currencyDisplay","compactDisplay","locale","LOCALE","FormatWithLocaleDigits","Intl","error","NativeOptionsChanged_","goog.i18n.NumberFormat.prototype.NativeOptionsChanged_","format","goog.i18n.NumberFormat.prototype.format","formatUsingNativeMode_","isNaN","NAN","parts","unit","getUnitAfterRounding_","decimalShift_","divisorBase","isNegative","negative_prefix","push","prefix","subformatExponential_","subformatFixed_","negative_suffix","suffix","join","goog.i18n.NumberFormat.prototype.formatUsingNativeMode_","abs","multipler","pow","newNum","rounded","round","sign","resolvedOptions","resultParts","formatToParts","percentReplacement","map","element","type","value","intSize","forEach","fracSize","i","newIntlFormatter","scaledResult","scaledForFraction","fractionDigits","intLog10_","Number","reducedNumber","reducedFormatter","reducedResult","baseFormattedParts","compactAdditions","filter","entry","concat","roundNumber_","goog.i18n.NumberFormat.prototype.roundNumber_","shift","shiftedNumber","roundToSignificantDigits_","intValue","fracValue","floor","formatNumberGroupingRepeatingDigitsParts_","goog.i18n.NumberFormat.prototype.formatNumberGroupingRepeatingDigitsParts_","zeroCode","intPart","groupingArray","repeatedDigitLen","nonRepeatedGroupCompleteCount","currentGroupSizeIndex","currentGroupSize","digitLen","String","fromCharCode","repeatedDigitIndex","formatNumberGroupingNonRepeatingDigitsParts_","goog.i18n.NumberFormat.prototype.formatNumberGroupingNonRepeatingDigitsParts_","digitLenLeft","rightToLeftParts","rightDigitIndex","apply","reverse","goog.i18n.NumberFormat.prototype.subformatFixed_","minIntDigits","numIntDigits","fractionPresent","translatableInt","ZERO_DIGIT","charCodeAt","nonRepeatedGroupCount","j","fracPart","fracPartSplit","split","floatFrac","exp","parseInt","string","repeat","zeroesToAdd","fracLen","addExponentPart_","goog.i18n.NumberFormat.prototype.addExponentPart_","exponent","PLUS_SIGN","exponentDigits","zeroChar","getMantissa_","goog.i18n.NumberFormat.prototype.getMantissa_","goog.i18n.NumberFormat.prototype.subformatExponential_","math","safeFloor","log","remainder","goog.i18n.NumberFormat.prototype.getDigit_","code","PATTERN_ZERO_DIGIT_","PATTERN_GROUPING_SEPARATOR_","PATTERN_DECIMAL_SEPARATOR_","PATTERN_PER_MILLE_","PATTERN_PERCENT_","PATTERN_DIGIT_","PATTERN_EXPONENT_","PATTERN_PLUS_","PATTERN_CURRENCY_SIGN_","QUOTE_","goog.i18n.NumberFormat.prototype.parseAffix_","affix","inQuote","len","getLocalCurrencySignWithFallback","getGlobalCurrencySignWithFallback","getPortableCurrencySignWithFallback","goog.i18n.NumberFormat.prototype.parseTrunk_","decimalPos","digitLeftCount","zeroDigitCount","digitRightCount","groupingCount","loop","n","totalDigits","effectiveDecimalPos","CompactNumberUnit","IntlOptions","FormattedPart","NULL_UNIT_","getUnitFor_","goog.i18n.NumberFormat.prototype.getUnitFor_","base","plurality","table","CompactNumberFormatSymbols","COMPACT_DECIMAL_SHORT_PATTERN","COMPACT_DECIMAL_LONG_PATTERN","patterns","previousNonNullBase","neg_prefix","neg_suffix","index_of_neg_part","neg_pattern","substring","neg_parts","exec","goog.i18n.NumberFormat.prototype.getUnitAfterRounding_","formattingNumber","pluralityNumber","initialPlurality","pluralForm_","initialDivisor","pluralityAttempt","pluralityRounded","formattingAttempt","formattingRounded","finalPlurality","goog.i18n.NumberFormat.prototype.intLog10_","goog.i18n.NumberFormat.decimalShift_","digitCount","numParts","magnitude","decimalRound_","goog.i18n.NumberFormat.decimalRound_","decimalCount","goog.i18n.NumberFormat.prototype.roundToSignificantDigits_","significantDigits","digits","goog.i18n.NumberFormat.prototype.pluralForm_","quantity","isCurrencyCodeBeforeValue","goog.i18n.NumberFormat.prototype.isCurrencyCodeBeforeValue","partIndex","partType","posCurrSymbol","posPound","posZero","posCurrValue","MAX_VALUE"]
}
