{"version":3,"sources":["alandipert/storage_atom.cljs"],"mappings":"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","names":["alandipert.storage-atom/transit-read-handlers","cljs.core.atom","alandipert.storage-atom/transit-write-handlers","alandipert.storage-atom/clj->json","x","cognitect.transit/write","cljs.core/deref","cognitect.transit.writer","alandipert.storage-atom/json->clj","cognitect.transit/read","cognitect.transit.reader","alandipert$storage-atom$IStorageBackend$_get$dyn","x__5373__auto__","m__5374__auto__","alandipert.storage-atom/-get","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","alandipert$storage-atom$IStorageBackend$_commit_BANG_$dyn","alandipert.storage-atom/-commit!","alandipert.storage-atom/IStorageBackend","this","not-found","value","cljs.core/PROTOCOL_SENTINEL","this__5310__auto__","writer__5311__auto__","opt__5312__auto__","cljs.core/-write","alandipert.storage-atom/StorageBackend","alandipert.storage-atom/->StorageBackend","store","key","temp__5821__auto__","existing","alandipert.storage-atom/debounce-factory","f","func","ttime","goog.Timer/clear","cljs.core/reset!","goog.Timer/callOnce","alandipert.storage-atom/storage-delay","alandipert.storage-atom/*storage-delay*","alandipert.storage-atom/*watch-active*","alandipert.storage-atom/store","atom","backend","debounce","cljs.core._EQ_","G__46731","p1__46729#","p2__46730#","p3__46727#","p4__46728#","cljs.core/add-watch","and__5023__auto__","cljs.core.not_EQ_","or__5025__auto__","alandipert.storage-atom/maybe-update-backend","storage","k","default","e","cljs.core/empty?","*watch-active*-orig-val__46738","*watch-active*-temp-val__46743","e46744","temp__5823__auto__","sk","*watch-active*-orig-val__46745","*watch-active*-temp-val__46746","clojure.string/blank?","alandipert.storage-atom/link-storage","p1__46753#","js/window","alandipert.storage-atom/dispatch-remove-event!","event","js/document","alandipert.storage-atom/load-html-storage","alandipert.storage-atom/load-local-storage","js/localStorage","alandipert.storage-atom/load-session-storage","js/sessionStorage","alandipert.storage-atom/html-storage","alandipert.storage-atom/local-storage","alandipert.storage-atom/session-storage","alandipert.storage-atom/clear-html-storage!","alandipert.storage-atom/clear-local-storage!","alandipert.storage-atom/clear-session-storage!","alandipert.storage-atom/remove-html-storage!","alandipert.storage-atom/remove-local-storage!","alandipert.storage-atom/remove-session-storage!"],"sourcesContent":["(ns alandipert.storage-atom\n  (:require [cognitect.transit :as t]\n            [goog.Timer :as timer]\n            [clojure.string :as string]))\n\n\n(def transit-read-handlers (atom {}))\n\n(def transit-write-handlers (atom {}))\n\n(defn clj->json [x]\n  (t/write (t/writer :json {:handlers @transit-write-handlers}) x))\n\n(defn json->clj [x]\n  (t/read (t/reader :json {:handlers @transit-read-handlers}) x))\n\n(defprotocol IStorageBackend\n  \"Represents a storage resource.\"\n  (-get [this not-found])\n  (-commit! [this value] \"Commit value to storage at location.\"))\n\n(deftype StorageBackend [store key]\n  IStorageBackend\n  (-get [this not-found]\n    (if-let [existing (.getItem store (clj->json key))]\n      (json->clj existing)\n      not-found))\n  (-commit! [this value]\n    (.setItem store (clj->json key) (clj->json value))))\n\n\n(defn debounce-factory\n  \"Return a function that will always store a future call into the\n  same atom. If recalled before the time is elapsed, the call is\n  replaced without being executed.\" []\n  (let [f (atom nil)]\n    (fn [func ttime]\n      (when @f\n        (timer/clear @f))\n      (reset! f (timer/callOnce func ttime)))))\n\n(def storage-delay\n  \"Delay in ms before a change is committed to the local storage. If a\nnew change occurs before the time is elapsed, the old change is\ndiscarded an only the new one is committed.\"\n  (atom 10))\n\n(def ^:dynamic *storage-delay* nil)\n\n(def ^:dynamic *watch-active* true)\n;; To prevent a save/load loop when changing the values quickly.\n\n(defn store\n  [atom backend]\n  (let [existing (-get backend ::none)\n        debounce (debounce-factory)]\n    (if (= ::none existing)\n      (-commit! backend @atom)\n      (reset! atom existing))\n    (doto atom\n      (add-watch ::storage-watch\n                 #(when (and *watch-active*\n                             (not= %3 %4))\n                    (debounce (fn [](-commit! backend %4))\n                              (or *storage-delay*\n                                  @storage-delay)))))))\n\n(defn maybe-update-backend\n  [atom storage k default e]\n  (when (identical? storage (.-storageArea e))\n    (if (empty? (.-key e)) ;; is all storage is being cleared?\n      (binding [*watch-active* false]\n        (reset! atom default))\n      (try\n        (when-let [sk (json->clj (.-key e))]\n          (when (= sk k) ;; is the stored key the one we are looking for?\n            (binding [*watch-active* false]\n              (reset! atom (let [value (.-newValue e)] ;; new value, or is key being removed?\n                             (if-not (string/blank? value)\n                               (json->clj value)\n                               default))))))\n        (catch :default e)))))\n\n(defn link-storage\n  [atom storage k]\n  (let [default @atom]\n    (.addEventListener js/window \"storage\"\n                       #(maybe-update-backend atom storage k default %))))\n\n(defn dispatch-remove-event!\n  \"Create and dispatch a synthetic StorageEvent. Expects key to be a string.\n  An empty key indicates that all storage is being cleared.\"\n  [storage key]\n  (let [event (.createEvent js/document \"StorageEvent\")]\n    (.initStorageEvent event \"storage\" false false key nil nil\n                       (-> js/window .-location .-href)\n                       storage)\n    (.dispatchEvent js/window event)\n    nil))\n\n;;; mostly for tests\n\n(defn load-html-storage\n  [storage k]\n  (-get (StorageBackend. storage k) nil))\n\n(defn load-local-storage [k]\n  (load-html-storage js/localStorage k))\n\n(defn load-session-storage [k]\n  (load-html-storage js/sessionStorage k))\n\n;;; main API\n\n(defn html-storage\n  [atom storage k]\n  (link-storage atom storage k)\n  (store atom (StorageBackend. storage k)))\n\n(defn local-storage\n  [atom k]\n  (html-storage atom js/localStorage k))\n\n(defn session-storage\n  [atom k]\n  (html-storage atom js/sessionStorage k))\n\n;; Methods to safely remove items from storage or clear storage entirely.\n\n(defn clear-html-storage!\n  \"Clear storage and also trigger an event on the current window\n  so its atoms will be cleared as well.\"\n  [storage]\n  (.clear storage)\n  (dispatch-remove-event! storage \"\"))\n\n(defn clear-local-storage! []\n  (clear-html-storage! js/localStorage))\n\n(defn clear-session-storage! []\n  (clear-html-storage! js/sessionStorage))\n\n(defn remove-html-storage!\n  \"Remove key from storage and also trigger an event on the current\n  window so its atoms will be cleared as well.\"\n  [storage k]\n  (let [key (clj->json k)]\n    (.removeItem storage key)\n    (dispatch-remove-event! storage key)))\n\n(defn remove-local-storage! [k]\n  (remove-html-storage! js/localStorage k))\n\n(defn remove-session-storage! [k]\n  (remove-html-storage! js/sessionStorage k))\n"],"x_google_ignoreList":[0]}